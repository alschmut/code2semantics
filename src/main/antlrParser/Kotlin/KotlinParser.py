# Generated from KotlinParser.g4 by ANTLR 4.7.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
from typing.io import TextIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00ac")
        buf.write("\u0a50\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\3\2\7\2\u0128\n\2\f\2\16\2\u012b")
        buf.write("\13\2\3\2\3\2\7\2\u012f\n\2\f\2\16\2\u0132\13\2\3\2\3")
        buf.write("\2\6\2\u0136\n\2\r\2\16\2\u0137\3\2\5\2\u013b\n\2\7\2")
        buf.write("\u013d\n\2\f\2\16\2\u0140\13\2\5\2\u0142\n\2\3\2\3\2\3")
        buf.write("\3\7\3\u0147\n\3\f\3\16\3\u014a\13\3\3\3\3\3\7\3\u014e")
        buf.write("\n\3\f\3\16\3\u0151\13\3\3\3\3\3\6\3\u0155\n\3\r\3\16")
        buf.write("\3\u0156\3\3\5\3\u015a\n\3\7\3\u015c\n\3\f\3\16\3\u015f")
        buf.write("\13\3\5\3\u0161\n\3\3\3\3\3\3\4\5\4\u0166\n\4\3\4\3\4")
        buf.write("\3\4\3\5\6\5\u016c\n\5\r\5\16\5\u016d\3\6\3\6\3\6\3\6")
        buf.write("\6\6\u0174\n\6\r\6\16\6\u0175\3\6\3\6\3\6\5\6\u017b\n")
        buf.write("\6\3\6\5\6\u017e\n\6\6\6\u0180\n\6\r\6\16\6\u0181\3\7")
        buf.write("\5\7\u0185\n\7\3\7\3\7\3\7\5\7\u018a\n\7\5\7\u018c\n\7")
        buf.write("\3\b\7\b\u018f\n\b\f\b\16\b\u0192\13\b\3\t\3\t\3\t\3\t")
        buf.write("\3\t\5\t\u0199\n\t\3\t\5\t\u019c\n\t\3\n\3\n\3\n\3\13")
        buf.write("\3\13\3\13\3\13\3\13\5\13\u01a6\n\13\3\f\5\f\u01a9\n\f")
        buf.write("\3\f\3\f\7\f\u01ad\n\f\f\f\16\f\u01b0\13\f\3\f\3\f\7\f")
        buf.write("\u01b4\n\f\f\f\16\f\u01b7\13\f\3\f\5\f\u01ba\n\f\3\f\7")
        buf.write("\f\u01bd\n\f\f\f\16\f\u01c0\13\f\3\f\5\f\u01c3\n\f\3\f")
        buf.write("\7\f\u01c6\n\f\f\f\16\f\u01c9\13\f\3\f\3\f\7\f\u01cd\n")
        buf.write("\f\f\f\16\f\u01d0\13\f\3\f\5\f\u01d3\n\f\3\f\7\f\u01d6")
        buf.write("\n\f\f\f\16\f\u01d9\13\f\3\f\5\f\u01dc\n\f\3\f\7\f\u01df")
        buf.write("\n\f\f\f\16\f\u01e2\13\f\3\f\3\f\7\f\u01e6\n\f\f\f\16")
        buf.write("\f\u01e9\13\f\3\f\5\f\u01ec\n\f\3\r\5\r\u01ef\n\r\3\r")
        buf.write("\3\r\7\r\u01f3\n\r\f\r\16\r\u01f6\13\r\5\r\u01f8\n\r\3")
        buf.write("\r\3\r\3\16\3\16\3\16\3\16\7\16\u0200\n\16\f\16\16\16")
        buf.write("\u0203\13\16\5\16\u0205\n\16\3\16\3\16\3\17\5\17\u020a")
        buf.write("\n\17\3\17\5\17\u020d\n\17\3\17\3\17\3\17\3\17\3\17\5")
        buf.write("\17\u0214\n\17\3\20\7\20\u0217\n\20\f\20\16\20\u021a\13")
        buf.write("\20\3\20\3\20\7\20\u021e\n\20\f\20\16\20\u0221\13\20\3")
        buf.write("\20\3\20\7\20\u0225\n\20\f\20\16\20\u0228\13\20\3\20\7")
        buf.write("\20\u022b\n\20\f\20\16\20\u022e\13\20\3\21\3\21\3\21\5")
        buf.write("\21\u0233\n\21\3\22\3\22\3\22\3\23\3\23\7\23\u023a\n\23")
        buf.write("\f\23\16\23\u023d\13\23\3\23\3\23\7\23\u0241\n\23\f\23")
        buf.write("\16\23\u0244\13\23\3\23\3\23\3\24\3\24\7\24\u024a\n\24")
        buf.write("\f\24\16\24\u024d\13\24\3\24\7\24\u0250\n\24\f\24\16\24")
        buf.write("\u0253\13\24\3\24\7\24\u0256\n\24\f\24\16\24\u0259\13")
        buf.write("\24\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\5\25\u0265\n\25\3\25\7\25\u0268\n\25\f\25\16\25\u026b")
        buf.write("\13\25\3\26\3\26\7\26\u026f\n\26\f\26\16\26\u0272\13\26")
        buf.write("\3\26\3\26\3\27\5\27\u0277\n\27\3\27\3\27\7\27\u027b\n")
        buf.write("\27\f\27\16\27\u027e\13\27\3\27\3\27\7\27\u0282\n\27\f")
        buf.write("\27\16\27\u0285\13\27\3\27\3\27\7\27\u0289\n\27\f\27\16")
        buf.write("\27\u028c\13\27\3\27\5\27\u028f\n\27\3\27\7\27\u0292\n")
        buf.write("\27\f\27\16\27\u0295\13\27\3\27\3\27\3\30\3\30\7\30\u029b")
        buf.write("\n\30\f\30\16\30\u029e\13\30\3\30\3\30\3\30\7\30\u02a3")
        buf.write("\n\30\f\30\16\30\u02a6\13\30\3\30\5\30\u02a9\n\30\3\31")
        buf.write("\3\31\7\31\u02ad\n\31\f\31\16\31\u02b0\13\31\3\31\5\31")
        buf.write("\u02b3\n\31\3\31\7\31\u02b6\n\31\f\31\16\31\u02b9\13\31")
        buf.write("\3\31\3\31\7\31\u02bd\n\31\f\31\16\31\u02c0\13\31\3\31")
        buf.write("\7\31\u02c3\n\31\f\31\16\31\u02c6\13\31\5\31\u02c8\n\31")
        buf.write("\3\31\7\31\u02cb\n\31\f\31\16\31\u02ce\13\31\3\31\3\31")
        buf.write("\3\32\3\32\7\32\u02d4\n\32\f\32\16\32\u02d7\13\32\6\32")
        buf.write("\u02d9\n\32\r\32\16\32\u02da\3\32\5\32\u02de\n\32\3\33")
        buf.write("\3\33\7\33\u02e2\n\33\f\33\16\33\u02e5\13\33\3\33\5\33")
        buf.write("\u02e8\n\33\3\33\7\33\u02eb\n\33\f\33\16\33\u02ee\13\33")
        buf.write("\3\33\5\33\u02f1\n\33\3\33\7\33\u02f4\n\33\f\33\16\33")
        buf.write("\u02f7\13\33\3\33\5\33\u02fa\n\33\3\34\5\34\u02fd\n\34")
        buf.write("\3\34\3\34\7\34\u0301\n\34\f\34\16\34\u0304\13\34\3\34")
        buf.write("\3\34\7\34\u0308\n\34\f\34\16\34\u030b\13\34\3\34\3\34")
        buf.write("\5\34\u030f\n\34\3\34\7\34\u0312\n\34\f\34\16\34\u0315")
        buf.write("\13\34\3\34\5\34\u0318\n\34\3\34\7\34\u031b\n\34\f\34")
        buf.write("\16\34\u031e\13\34\3\34\5\34\u0321\n\34\3\34\7\34\u0324")
        buf.write("\n\34\f\34\16\34\u0327\13\34\3\34\3\34\7\34\u032b\n\34")
        buf.write("\f\34\16\34\u032e\13\34\3\34\3\34\7\34\u0332\n\34\f\34")
        buf.write("\16\34\u0335\13\34\3\34\5\34\u0338\n\34\3\34\7\34\u033b")
        buf.write("\n\34\f\34\16\34\u033e\13\34\3\34\5\34\u0341\n\34\3\34")
        buf.write("\7\34\u0344\n\34\f\34\16\34\u0347\13\34\3\34\5\34\u034a")
        buf.write("\n\34\3\35\3\35\3\35\3\35\7\35\u0350\n\35\f\35\16\35\u0353")
        buf.write("\13\35\5\35\u0355\n\35\3\35\3\35\3\36\5\36\u035a\n\36")
        buf.write("\3\36\3\36\3\36\5\36\u035f\n\36\3\37\3\37\3\37\3\37\3")
        buf.write(" \3 \3 \7 \u0368\n \f \16 \u036b\13 \3 \5 \u036e\n \3")
        buf.write("!\5!\u0371\n!\3!\3!\7!\u0375\n!\f!\16!\u0378\13!\3!\3")
        buf.write("!\7!\u037c\n!\f!\16!\u037f\13!\3!\5!\u0382\n!\3!\7!\u0385")
        buf.write("\n!\f!\16!\u0388\13!\3!\3!\7!\u038c\n!\f!\16!\u038f\13")
        buf.write("!\3!\5!\u0392\n!\3!\7!\u0395\n!\f!\16!\u0398\13!\3!\5")
        buf.write("!\u039b\n!\3\"\5\"\u039e\n\"\3\"\3\"\7\"\u03a2\n\"\f\"")
        buf.write("\16\"\u03a5\13\"\3\"\5\"\u03a8\n\"\3\"\3\"\7\"\u03ac\n")
        buf.write("\"\f\"\16\"\u03af\13\"\3\"\5\"\u03b2\n\"\3\"\7\"\u03b5")
        buf.write("\n\"\f\"\16\"\u03b8\13\"\3\"\3\"\7\"\u03bc\n\"\f\"\16")
        buf.write("\"\u03bf\13\"\3\"\5\"\u03c2\n\"\3\"\7\"\u03c5\n\"\f\"")
        buf.write("\16\"\u03c8\13\"\3\"\5\"\u03cb\n\"\3#\5#\u03ce\n#\3#\3")
        buf.write("#\7#\u03d2\n#\f#\16#\u03d5\13#\3#\5#\u03d8\n#\3#\7#\u03db")
        buf.write("\n#\f#\16#\u03de\13#\3#\3#\7#\u03e2\n#\f#\16#\u03e5\13")
        buf.write("#\3#\3#\5#\u03e9\n#\3#\7#\u03ec\n#\f#\16#\u03ef\13#\3")
        buf.write("#\3#\5#\u03f3\n#\3#\7#\u03f6\n#\f#\16#\u03f9\13#\3#\5")
        buf.write("#\u03fc\n#\3#\7#\u03ff\n#\f#\16#\u0402\13#\3#\3#\7#\u0406")
        buf.write("\n#\f#\16#\u0409\13#\3#\5#\u040c\n#\3#\3#\3#\3#\5#\u0412")
        buf.write("\n#\3#\3#\3#\3#\5#\u0418\n#\5#\u041a\n#\3$\3$\3$\3$\7")
        buf.write("$\u0420\n$\f$\16$\u0423\13$\3$\3$\3%\3%\3%\5%\u042a\n")
        buf.write("%\3&\5&\u042d\n&\3&\3&\5&\u0431\n&\3&\3&\7&\u0435\n&\f")
        buf.write("&\16&\u0438\13&\3&\3&\3&\7&\u043d\n&\f&\16&\u0440\13&")
        buf.write("\3&\3&\7&\u0444\n&\f&\16&\u0447\13&\3&\5&\u044a\n&\3&")
        buf.write("\7&\u044d\n&\f&\16&\u0450\13&\3&\3&\3&\7&\u0455\n&\f&")
        buf.write("\16&\u0458\13&\3&\5&\u045b\n&\5&\u045d\n&\3\'\5\'\u0460")
        buf.write("\n\'\3\'\3\'\5\'\u0464\n\'\3\'\3\'\7\'\u0468\n\'\f\'\16")
        buf.write("\'\u046b\13\'\3\'\3\'\3\'\7\'\u0470\n\'\f\'\16\'\u0473")
        buf.write("\13\'\3\'\3\'\5\'\u0477\n\'\3\'\3\'\7\'\u047b\n\'\f\'")
        buf.write("\16\'\u047e\13\'\3\'\3\'\5\'\u0482\n\'\3(\5(\u0485\n(")
        buf.write("\3(\3(\7(\u0489\n(\f(\16(\u048c\13(\3(\3(\7(\u0490\n(")
        buf.write("\f(\16(\u0493\13(\3(\5(\u0496\n(\3(\7(\u0499\n(\f(\16")
        buf.write("(\u049c\13(\3(\3(\7(\u04a0\n(\f(\16(\u04a3\13(\3(\3(\3")
        buf.write(")\3)\7)\u04a9\n)\f)\16)\u04ac\13)\3)\3)\7)\u04b0\n)\f")
        buf.write(")\16)\u04b3\13)\3)\3)\7)\u04b7\n)\f)\16)\u04ba\13)\3)")
        buf.write("\7)\u04bd\n)\f)\16)\u04c0\13)\3)\7)\u04c3\n)\f)\16)\u04c6")
        buf.write("\13)\3)\3)\3*\5*\u04cb\n*\3*\7*\u04ce\n*\f*\16*\u04d1")
        buf.write("\13*\3*\3*\7*\u04d5\n*\f*\16*\u04d8\13*\3*\3*\7*\u04dc")
        buf.write("\n*\f*\16*\u04df\13*\3*\5*\u04e2\n*\3+\5+\u04e5\n+\3+")
        buf.write("\3+\3+\3+\5+\u04eb\n+\3,\3,\3,\7,\u04f0\n,\f,\16,\u04f3")
        buf.write("\13,\6,\u04f5\n,\r,\16,\u04f6\3-\3-\3-\3-\3.\3.\5.\u04ff")
        buf.write("\n.\3.\7.\u0502\n.\f.\16.\u0505\13.\3.\6.\u0508\n.\r.")
        buf.write("\16.\u0509\3/\3/\3/\3/\3/\3/\5/\u0512\n/\3\60\3\60\7\60")
        buf.write("\u0516\n\60\f\60\16\60\u0519\13\60\3\60\3\60\7\60\u051d")
        buf.write("\n\60\f\60\16\60\u0520\13\60\5\60\u0522\n\60\3\60\3\60")
        buf.write("\7\60\u0526\n\60\f\60\16\60\u0529\13\60\3\60\3\60\7\60")
        buf.write("\u052d\n\60\f\60\16\60\u0530\13\60\3\60\3\60\3\61\3\61")
        buf.write("\3\61\5\61\u0537\n\61\3\62\3\62\7\62\u053b\n\62\f\62\16")
        buf.write("\62\u053e\13\62\3\62\3\62\7\62\u0542\n\62\f\62\16\62\u0545")
        buf.write("\13\62\3\62\7\62\u0548\n\62\f\62\16\62\u054b\13\62\3\63")
        buf.write("\3\63\7\63\u054f\n\63\f\63\16\63\u0552\13\63\3\63\5\63")
        buf.write("\u0555\n\63\3\64\3\64\3\64\5\64\u055a\n\64\3\64\3\64\3")
        buf.write("\64\5\64\u055f\n\64\7\64\u0561\n\64\f\64\16\64\u0564\13")
        buf.write("\64\3\64\3\64\3\65\3\65\7\65\u056a\n\65\f\65\16\65\u056d")
        buf.write("\13\65\3\65\3\65\7\65\u0571\n\65\f\65\16\65\u0574\13\65")
        buf.write("\3\65\3\65\7\65\u0578\n\65\f\65\16\65\u057b\13\65\3\65")
        buf.write("\7\65\u057e\n\65\f\65\16\65\u0581\13\65\3\66\7\66\u0584")
        buf.write("\n\66\f\66\16\66\u0587\13\66\3\66\3\66\7\66\u058b\n\66")
        buf.write("\f\66\16\66\u058e\13\66\3\66\3\66\7\66\u0592\n\66\f\66")
        buf.write("\16\66\u0595\13\66\3\66\3\66\3\67\3\67\3\67\3\67\38\7")
        buf.write("8\u059e\n8\f8\168\u05a1\138\38\38\68\u05a5\n8\r8\168\u05a6")
        buf.write("\38\58\u05aa\n8\78\u05ac\n8\f8\168\u05af\138\58\u05b1")
        buf.write("\n8\39\39\59\u05b5\n9\3:\7:\u05b8\n:\f:\16:\u05bb\13:")
        buf.write("\3:\7:\u05be\n:\f:\16:\u05c1\13:\3:\3:\3;\7;\u05c6\n;")
        buf.write("\f;\16;\u05c9\13;\3;\3;\3;\3;\5;\u05cf\n;\3<\3<\3<\3<")
        buf.write("\7<\u05d5\n<\f<\16<\u05d8\13<\3=\3=\7=\u05dc\n=\f=\16")
        buf.write("=\u05df\13=\3=\3=\7=\u05e3\n=\f=\16=\u05e6\13=\3=\7=\u05e9")
        buf.write("\n=\f=\16=\u05ec\13=\3>\3>\7>\u05f0\n>\f>\16>\u05f3\13")
        buf.write(">\3>\3>\7>\u05f7\n>\f>\16>\u05fa\13>\3>\7>\u05fd\n>\f")
        buf.write(">\16>\u0600\13>\3?\3?\3?\7?\u0605\n?\f?\16?\u0608\13?")
        buf.write("\3?\3?\7?\u060c\n?\f?\16?\u060f\13?\3@\3@\3@\7@\u0614")
        buf.write("\n@\f@\16@\u0617\13@\3@\3@\5@\u061b\n@\3A\3A\3A\7A\u0620")
        buf.write("\nA\fA\16A\u0623\13A\3A\3A\6A\u0627\nA\rA\16A\u0628\3")
        buf.write("A\3A\7A\u062d\nA\fA\16A\u0630\13A\3A\3A\5A\u0634\nA\3")
        buf.write("B\3B\7B\u0638\nB\fB\16B\u063b\13B\3B\3B\7B\u063f\nB\f")
        buf.write("B\16B\u0642\13B\3B\7B\u0645\nB\fB\16B\u0648\13B\3C\3C")
        buf.write("\3C\7C\u064d\nC\fC\16C\u0650\13C\3C\3C\7C\u0654\nC\fC")
        buf.write("\16C\u0657\13C\3D\3D\3D\7D\u065c\nD\fD\16D\u065f\13D\3")
        buf.write("D\7D\u0662\nD\fD\16D\u0665\13D\3E\3E\3E\7E\u066a\nE\f")
        buf.write("E\16E\u066d\13E\3E\3E\7E\u0671\nE\fE\16E\u0674\13E\3F")
        buf.write("\3F\3F\7F\u0679\nF\fF\16F\u067c\13F\3F\3F\7F\u0680\nF")
        buf.write("\fF\16F\u0683\13F\3G\3G\7G\u0687\nG\fG\16G\u068a\13G\3")
        buf.write("G\3G\3G\7G\u068f\nG\fG\16G\u0692\13G\3H\7H\u0695\nH\f")
        buf.write("H\16H\u0698\13H\3H\3H\3I\3I\5I\u069e\nI\3I\7I\u06a1\n")
        buf.write("I\fI\16I\u06a4\13I\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3")
        buf.write("J\5J\u06b2\nJ\3K\3K\3K\3K\3L\3L\5L\u06ba\nL\3L\7L\u06bd")
        buf.write("\nL\fL\16L\u06c0\13L\3L\3L\7L\u06c4\nL\fL\16L\u06c7\13")
        buf.write("L\3L\6L\u06ca\nL\rL\16L\u06cb\5L\u06ce\nL\3M\7M\u06d1")
        buf.write("\nM\fM\16M\u06d4\13M\3M\5M\u06d7\nM\3M\7M\u06da\nM\fM")
        buf.write("\16M\u06dd\13M\3M\3M\3N\3N\3N\3N\7N\u06e5\nN\fN\16N\u06e8")
        buf.write("\13N\5N\u06ea\nN\3N\3N\3O\3O\3O\3O\7O\u06f2\nO\fO\16O")
        buf.write("\u06f5\13O\5O\u06f7\nO\3O\3O\3P\3P\7P\u06fd\nP\fP\16P")
        buf.write("\u0700\13P\3P\3P\7P\u0704\nP\fP\16P\u0707\13P\3P\3P\7")
        buf.write("P\u070b\nP\fP\16P\u070e\13P\3P\7P\u0711\nP\fP\16P\u0714")
        buf.write("\13P\3P\3P\3Q\5Q\u0719\nQ\3Q\3Q\5Q\u071d\nQ\3R\6R\u0720")
        buf.write("\nR\rR\16R\u0721\3S\3S\7S\u0726\nS\fS\16S\u0729\13S\3")
        buf.write("S\3S\7S\u072d\nS\fS\16S\u0730\13S\5S\u0732\nS\3S\5S\u0735")
        buf.write("\nS\3S\7S\u0738\nS\fS\16S\u073b\13S\3S\3S\3T\3T\3T\3T")
        buf.write("\3T\3T\3T\3T\3T\5T\u0748\nT\3U\3U\5U\u074c\nU\3V\3V\3")
        buf.write("V\7V\u0751\nV\fV\16V\u0754\13V\3V\3V\3W\3W\3W\3W\3W\7")
        buf.write("W\u075d\nW\fW\16W\u0760\13W\3W\3W\3X\3X\3Y\3Y\3Y\3Y\3")
        buf.write("Z\3Z\3[\3[\3[\3[\3\\\7\\\u0771\n\\\f\\\16\\\u0774\13\\")
        buf.write("\3\\\3\\\7\\\u0778\n\\\f\\\16\\\u077b\13\\\3\\\3\\\7\\")
        buf.write("\u077f\n\\\f\\\16\\\u0782\13\\\3\\\3\\\3\\\3\\\7\\\u0788")
        buf.write("\n\\\f\\\16\\\u078b\13\\\3\\\3\\\7\\\u078f\n\\\f\\\16")
        buf.write("\\\u0792\13\\\3\\\3\\\7\\\u0796\n\\\f\\\16\\\u0799\13")
        buf.write("\\\3\\\3\\\7\\\u079d\n\\\f\\\16\\\u07a0\13\\\3\\\3\\\5")
        buf.write("\\\u07a4\n\\\3]\5]\u07a7\n]\3]\7]\u07aa\n]\f]\16]\u07ad")
        buf.write("\13]\3]\3]\7]\u07b1\n]\f]\16]\u07b4\13]\3]\7]\u07b7\n")
        buf.write("]\f]\16]\u07ba\13]\3^\3^\3^\7^\u07bf\n^\f^\16^\u07c2\13")
        buf.write("^\3^\3^\7^\u07c6\n^\f^\16^\u07c9\13^\3^\5^\u07cc\n^\5")
        buf.write("^\u07ce\n^\3_\3_\7_\u07d2\n_\f_\16_\u07d5\13_\3_\3_\7")
        buf.write("_\u07d9\n_\f_\16_\u07dc\13_\3_\5_\u07df\n_\3_\7_\u07e2")
        buf.write("\n_\f_\16_\u07e5\13_\3_\3_\3`\3`\5`\u07eb\n`\3`\3`\7`")
        buf.write("\u07ef\n`\f`\16`\u07f2\13`\3`\3`\3a\3a\5a\u07f8\na\3b")
        buf.write("\3b\3b\7b\u07fd\nb\fb\16b\u0800\13b\3b\3b\7b\u0804\nb")
        buf.write("\fb\16b\u0807\13b\3b\3b\5b\u080b\nb\3b\5b\u080e\nb\3c")
        buf.write("\3c\5c\u0812\nc\3d\3d\7d\u0816\nd\fd\16d\u0819\13d\3d")
        buf.write("\3d\3d\3d\7d\u081f\nd\fd\16d\u0822\13d\3d\5d\u0825\nd")
        buf.write("\3d\5d\u0828\nd\3d\7d\u082b\nd\fd\16d\u082e\13d\3d\3d")
        buf.write("\7d\u0832\nd\fd\16d\u0835\13d\3d\5d\u0838\nd\5d\u083a")
        buf.write("\nd\3e\3e\5e\u083e\ne\3f\3f\7f\u0842\nf\ff\16f\u0845\13")
        buf.write("f\3f\3f\3f\3f\5f\u084b\nf\3f\7f\u084e\nf\ff\16f\u0851")
        buf.write("\13f\3f\3f\7f\u0855\nf\ff\16f\u0858\13f\3f\3f\7f\u085c")
        buf.write("\nf\ff\16f\u085f\13f\7f\u0861\nf\ff\16f\u0864\13f\3f\7")
        buf.write("f\u0867\nf\ff\16f\u086a\13f\3f\3f\3g\3g\7g\u0870\ng\f")
        buf.write("g\16g\u0873\13g\3g\3g\7g\u0877\ng\fg\16g\u087a\13g\3g")
        buf.write("\7g\u087d\ng\fg\16g\u0880\13g\3g\7g\u0883\ng\fg\16g\u0886")
        buf.write("\13g\3g\3g\7g\u088a\ng\fg\16g\u088d\13g\3g\3g\5g\u0891")
        buf.write("\ng\3g\3g\7g\u0895\ng\fg\16g\u0898\13g\3g\3g\7g\u089c")
        buf.write("\ng\fg\16g\u089f\13g\3g\5g\u08a2\ng\3h\3h\3h\5h\u08a7")
        buf.write("\nh\3i\3i\7i\u08ab\ni\fi\16i\u08ae\13i\3i\3i\3j\3j\7j")
        buf.write("\u08b4\nj\fj\16j\u08b7\13j\3j\3j\3k\3k\7k\u08bd\nk\fk")
        buf.write("\16k\u08c0\13k\3k\3k\7k\u08c4\nk\fk\16k\u08c7\13k\3k\7")
        buf.write("k\u08ca\nk\fk\16k\u08cd\13k\3k\7k\u08d0\nk\fk\16k\u08d3")
        buf.write("\13k\3k\5k\u08d6\nk\3l\3l\7l\u08da\nl\fl\16l\u08dd\13")
        buf.write("l\3l\3l\7l\u08e1\nl\fl\16l\u08e4\13l\3l\3l\3l\3l\3l\7")
        buf.write("l\u08eb\nl\fl\16l\u08ee\13l\3l\3l\3m\3m\7m\u08f4\nm\f")
        buf.write("m\16m\u08f7\13m\3m\3m\3n\3n\3n\5n\u08fe\nn\3o\3o\7o\u0902")
        buf.write("\no\fo\16o\u0905\13o\3o\3o\7o\u0909\no\fo\16o\u090c\13")
        buf.write("o\3o\3o\5o\u0910\no\3o\3o\3o\3o\7o\u0916\no\fo\16o\u0919")
        buf.write("\13o\3o\5o\u091c\no\3p\3p\7p\u0920\np\fp\16p\u0923\13")
        buf.write("p\3p\3p\3p\3p\7p\u0929\np\fp\16p\u092c\13p\3p\5p\u092f")
        buf.write("\np\3q\3q\7q\u0933\nq\fq\16q\u0936\13q\3q\5q\u0939\nq")
        buf.write("\3q\7q\u093c\nq\fq\16q\u093f\13q\3q\3q\7q\u0943\nq\fq")
        buf.write("\16q\u0946\13q\3q\3q\3q\3q\3r\3r\7r\u094e\nr\fr\16r\u0951")
        buf.write("\13r\3r\3r\3r\5r\u0956\nr\3r\3r\3r\3r\5r\u095c\nr\3s\3")
        buf.write("s\3s\7s\u0961\ns\fs\16s\u0964\13s\7s\u0966\ns\fs\16s\u0969")
        buf.write("\13s\5s\u096b\ns\3s\7s\u096e\ns\fs\16s\u0971\13s\3s\3")
        buf.write("s\7s\u0975\ns\fs\16s\u0978\13s\3s\3s\5s\u097c\ns\3t\3")
        buf.write("t\3u\3u\3v\3v\3w\3w\3x\3x\3y\3y\3z\3z\3{\3{\3|\3|\3|\3")
        buf.write("|\3|\3|\3|\5|\u0995\n|\3}\3}\3}\3}\3}\3}\3}\7}\u099e\n")
        buf.write("}\f}\16}\u09a1\13}\3}\3}\3}\5}\u09a6\n}\3~\3~\3~\5~\u09ab")
        buf.write("\n~\3\177\3\177\6\177\u09af\n\177\r\177\16\177\u09b0\3")
        buf.write("\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080\3\u0080")
        buf.write("\3\u0080\3\u0080\5\u0080\u09bc\n\u0080\3\u0080\7\u0080")
        buf.write("\u09bf\n\u0080\f\u0080\16\u0080\u09c2\13\u0080\3\u0081")
        buf.write("\3\u0081\3\u0082\3\u0082\3\u0083\3\u0083\3\u0084\3\u0084")
        buf.write("\3\u0085\3\u0085\3\u0086\3\u0086\3\u0087\3\u0087\3\u0088")
        buf.write("\3\u0088\3\u0089\3\u0089\3\u008a\3\u008a\7\u008a\u09d8")
        buf.write("\n\u008a\f\u008a\16\u008a\u09db\13\u008a\3\u008b\3\u008b")
        buf.write("\5\u008b\u09df\n\u008b\3\u008b\7\u008b\u09e2\n\u008b\f")
        buf.write("\u008b\16\u008b\u09e5\13\u008b\3\u008c\3\u008c\7\u008c")
        buf.write("\u09e9\n\u008c\f\u008c\16\u008c\u09ec\13\u008c\3\u008c")
        buf.write("\3\u008c\7\u008c\u09f0\n\u008c\f\u008c\16\u008c\u09f3")
        buf.write("\13\u008c\3\u008c\3\u008c\3\u008c\3\u008c\7\u008c\u09f9")
        buf.write("\n\u008c\f\u008c\16\u008c\u09fc\13\u008c\3\u008c\5\u008c")
        buf.write("\u09ff\n\u008c\3\u008c\7\u008c\u0a02\n\u008c\f\u008c\16")
        buf.write("\u008c\u0a05\13\u008c\3\u008c\5\u008c\u0a08\n\u008c\5")
        buf.write("\u008c\u0a0a\n\u008c\3\u008d\3\u008d\3\u008d\3\u008d\6")
        buf.write("\u008d\u0a10\n\u008d\r\u008d\16\u008d\u0a11\3\u008d\3")
        buf.write("\u008d\3\u008d\3\u008d\3\u008d\6\u008d\u0a19\n\u008d\r")
        buf.write("\u008d\16\u008d\u0a1a\3\u008d\3\u008d\5\u008d\u0a1f\n")
        buf.write("\u008d\3\u008e\3\u008e\3\u008f\3\u008f\5\u008f\u0a25\n")
        buf.write("\u008f\3\u008f\5\u008f\u0a28\n\u008f\3\u0090\3\u0090\7")
        buf.write("\u0090\u0a2c\n\u0090\f\u0090\16\u0090\u0a2f\13\u0090\3")
        buf.write("\u0090\3\u0090\7\u0090\u0a33\n\u0090\f\u0090\16\u0090")
        buf.write("\u0a36\13\u0090\3\u0091\3\u0091\3\u0092\6\u0092\u0a3b")
        buf.write("\n\u0092\r\u0092\16\u0092\u0a3c\3\u0092\7\u0092\u0a40")
        buf.write("\n\u0092\f\u0092\16\u0092\u0a43\13\u0092\3\u0092\3\u0092")
        buf.write("\7\u0092\u0a47\n\u0092\f\u0092\16\u0092\u0a4a\13\u0092")
        buf.write("\5\u0092\u0a4c\n\u0092\3\u0093\3\u0093\3\u0093\2\2\u0094")
        buf.write("\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write("\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc")
        buf.write("\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee")
        buf.write("\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100")
        buf.write("\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110\u0112")
        buf.write("\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124")
        buf.write("\2\33\3\2=>\3\2AB\4\2\35\35EE\3\2\u009e\u00a0\3\2\u00a4")
        buf.write("\u00a6\4\2\67\67VV\3\2&\'\3\2\35\"\4\2\61\62\64\65\3\2")
        buf.write("-\60\4\2[[]]\4\2ZZ\\\\\3\2\24\25\3\2\21\23\5\2\33\33\63")
        buf.write("\63YY\3\2nr\4\2yy~~\3\2jm\4\2[[^^\3\2sx\3\2z|\3\2\177")
        buf.write("\u0081\5\2::_beh\n\2<<DGKKPQ^^cdi\u0082\u008e\u008e\4")
        buf.write("\2\7\7\34\34\2\u0b88\2\u0129\3\2\2\2\4\u0148\3\2\2\2\6")
        buf.write("\u0165\3\2\2\2\b\u016b\3\2\2\2\n\u017f\3\2\2\2\f\u018b")
        buf.write("\3\2\2\2\16\u0190\3\2\2\2\20\u0193\3\2\2\2\22\u019d\3")
        buf.write("\2\2\2\24\u01a5\3\2\2\2\26\u01a8\3\2\2\2\30\u01ee\3\2")
        buf.write("\2\2\32\u01fb\3\2\2\2\34\u0209\3\2\2\2\36\u0218\3\2\2")
        buf.write("\2 \u0232\3\2\2\2\"\u0234\3\2\2\2$\u0237\3\2\2\2&\u0247")
        buf.write("\3\2\2\2(\u0264\3\2\2\2*\u026c\3\2\2\2,\u0276\3\2\2\2")
        buf.write(".\u02a8\3\2\2\2\60\u02aa\3\2\2\2\62\u02d8\3\2\2\2\64\u02df")
        buf.write("\3\2\2\2\66\u02fc\3\2\2\28\u034b\3\2\2\2:\u0359\3\2\2")
        buf.write("\2<\u0360\3\2\2\2>\u036d\3\2\2\2@\u0370\3\2\2\2B\u039d")
        buf.write("\3\2\2\2D\u03cd\3\2\2\2F\u041b\3\2\2\2H\u0426\3\2\2\2")
        buf.write("J\u045c\3\2\2\2L\u0481\3\2\2\2N\u0484\3\2\2\2P\u04a6\3")
        buf.write("\2\2\2R\u04ca\3\2\2\2T\u04e4\3\2\2\2V\u04f4\3\2\2\2X\u04f8")
        buf.write("\3\2\2\2Z\u04fe\3\2\2\2\\\u0511\3\2\2\2^\u0521\3\2\2\2")
        buf.write("`\u0536\3\2\2\2b\u0538\3\2\2\2d\u054c\3\2\2\2f\u0556\3")
        buf.write("\2\2\2h\u0567\3\2\2\2j\u0585\3\2\2\2l\u0598\3\2\2\2n\u059f")
        buf.write("\3\2\2\2p\u05b4\3\2\2\2r\u05b9\3\2\2\2t\u05c7\3\2\2\2")
        buf.write("v\u05d0\3\2\2\2x\u05d9\3\2\2\2z\u05ed\3\2\2\2|\u0601\3")
        buf.write("\2\2\2~\u0610\3\2\2\2\u0080\u061c\3\2\2\2\u0082\u0635")
        buf.write("\3\2\2\2\u0084\u0649\3\2\2\2\u0086\u0658\3\2\2\2\u0088")
        buf.write("\u0666\3\2\2\2\u008a\u0675\3\2\2\2\u008c\u0684\3\2\2\2")
        buf.write("\u008e\u0696\3\2\2\2\u0090\u069d\3\2\2\2\u0092\u06b1\3")
        buf.write("\2\2\2\u0094\u06b3\3\2\2\2\u0096\u06cd\3\2\2\2\u0098\u06d2")
        buf.write("\3\2\2\2\u009a\u06e0\3\2\2\2\u009c\u06ed\3\2\2\2\u009e")
        buf.write("\u06fa\3\2\2\2\u00a0\u071c\3\2\2\2\u00a2\u071f\3\2\2\2")
        buf.write("\u00a4\u0731\3\2\2\2\u00a6\u0747\3\2\2\2\u00a8\u074b\3")
        buf.write("\2\2\2\u00aa\u074d\3\2\2\2\u00ac\u0757\3\2\2\2\u00ae\u0763")
        buf.write("\3\2\2\2\u00b0\u0765\3\2\2\2\u00b2\u0769\3\2\2\2\u00b4")
        buf.write("\u076b\3\2\2\2\u00b6\u0772\3\2\2\2\u00b8\u07a6\3\2\2\2")
        buf.write("\u00ba\u07cd\3\2\2\2\u00bc\u07cf\3\2\2\2\u00be\u07e8\3")
        buf.write("\2\2\2\u00c0\u07f5\3\2\2\2\u00c2\u07f9\3\2\2\2\u00c4\u0811")
        buf.write("\3\2\2\2\u00c6\u0813\3\2\2\2\u00c8\u083d\3\2\2\2\u00ca")
        buf.write("\u083f\3\2\2\2\u00cc\u08a1\3\2\2\2\u00ce\u08a6\3\2\2\2")
        buf.write("\u00d0\u08a8\3\2\2\2\u00d2\u08b1\3\2\2\2\u00d4\u08ba\3")
        buf.write("\2\2\2\u00d6\u08d7\3\2\2\2\u00d8\u08f1\3\2\2\2\u00da\u08fd")
        buf.write("\3\2\2\2\u00dc\u08ff\3\2\2\2\u00de\u091d\3\2\2\2\u00e0")
        buf.write("\u0930\3\2\2\2\u00e2\u095b\3\2\2\2\u00e4\u096a\3\2\2\2")
        buf.write("\u00e6\u097d\3\2\2\2\u00e8\u097f\3\2\2\2\u00ea\u0981\3")
        buf.write("\2\2\2\u00ec\u0983\3\2\2\2\u00ee\u0985\3\2\2\2\u00f0\u0987")
        buf.write("\3\2\2\2\u00f2\u0989\3\2\2\2\u00f4\u098b\3\2\2\2\u00f6")
        buf.write("\u0994\3\2\2\2\u00f8\u09a5\3\2\2\2\u00fa\u09aa\3\2\2\2")
        buf.write("\u00fc\u09ae\3\2\2\2\u00fe\u09bb\3\2\2\2\u0100\u09c3\3")
        buf.write("\2\2\2\u0102\u09c5\3\2\2\2\u0104\u09c7\3\2\2\2\u0106\u09c9")
        buf.write("\3\2\2\2\u0108\u09cb\3\2\2\2\u010a\u09cd\3\2\2\2\u010c")
        buf.write("\u09cf\3\2\2\2\u010e\u09d1\3\2\2\2\u0110\u09d3\3\2\2\2")
        buf.write("\u0112\u09d5\3\2\2\2\u0114\u09de\3\2\2\2\u0116\u0a09\3")
        buf.write("\2\2\2\u0118\u0a1e\3\2\2\2\u011a\u0a20\3\2\2\2\u011c\u0a22")
        buf.write("\3\2\2\2\u011e\u0a29\3\2\2\2\u0120\u0a37\3\2\2\2\u0122")
        buf.write("\u0a4b\3\2\2\2\u0124\u0a4d\3\2\2\2\u0126\u0128\7\7\2\2")
        buf.write("\u0127\u0126\3\2\2\2\u0128\u012b\3\2\2\2\u0129\u0127\3")
        buf.write("\2\2\2\u0129\u012a\3\2\2\2\u012a\u012c\3\2\2\2\u012b\u0129")
        buf.write("\3\2\2\2\u012c\u0130\5\6\4\2\u012d\u012f\5\u0124\u0093")
        buf.write("\2\u012e\u012d\3\2\2\2\u012f\u0132\3\2\2\2\u0130\u012e")
        buf.write("\3\2\2\2\u0130\u0131\3\2\2\2\u0131\u0141\3\2\2\2\u0132")
        buf.write("\u0130\3\2\2\2\u0133\u013e\5\24\13\2\u0134\u0136\5\u0124")
        buf.write("\u0093\2\u0135\u0134\3\2\2\2\u0136\u0137\3\2\2\2\u0137")
        buf.write("\u0135\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u013a\3\2\2\2")
        buf.write("\u0139\u013b\5\24\13\2\u013a\u0139\3\2\2\2\u013a\u013b")
        buf.write("\3\2\2\2\u013b\u013d\3\2\2\2\u013c\u0135\3\2\2\2\u013d")
        buf.write("\u0140\3\2\2\2\u013e\u013c\3\2\2\2\u013e\u013f\3\2\2\2")
        buf.write("\u013f\u0142\3\2\2\2\u0140\u013e\3\2\2\2\u0141\u0133\3")
        buf.write("\2\2\2\u0141\u0142\3\2\2\2\u0142\u0143\3\2\2\2\u0143\u0144")
        buf.write("\7\2\2\3\u0144\3\3\2\2\2\u0145\u0147\7\7\2\2\u0146\u0145")
        buf.write("\3\2\2\2\u0147\u014a\3\2\2\2\u0148\u0146\3\2\2\2\u0148")
        buf.write("\u0149\3\2\2\2\u0149\u014b\3\2\2\2\u014a\u0148\3\2\2\2")
        buf.write("\u014b\u014f\5\6\4\2\u014c\u014e\5\u0124\u0093\2\u014d")
        buf.write("\u014c\3\2\2\2\u014e\u0151\3\2\2\2\u014f\u014d\3\2\2\2")
        buf.write("\u014f\u0150\3\2\2\2\u0150\u0160\3\2\2\2\u0151\u014f\3")
        buf.write("\2\2\2\u0152\u015d\5v<\2\u0153\u0155\5\u0124\u0093\2\u0154")
        buf.write("\u0153\3\2\2\2\u0155\u0156\3\2\2\2\u0156\u0154\3\2\2\2")
        buf.write("\u0156\u0157\3\2\2\2\u0157\u0159\3\2\2\2\u0158\u015a\5")
        buf.write("v<\2\u0159\u0158\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015c")
        buf.write("\3\2\2\2\u015b\u0154\3\2\2\2\u015c\u015f\3\2\2\2\u015d")
        buf.write("\u015b\3\2\2\2\u015d\u015e\3\2\2\2\u015e\u0161\3\2\2\2")
        buf.write("\u015f\u015d\3\2\2\2\u0160\u0152\3\2\2\2\u0160\u0161\3")
        buf.write("\2\2\2\u0161\u0162\3\2\2\2\u0162\u0163\7\2\2\3\u0163\5")
        buf.write("\3\2\2\2\u0164\u0166\5\b\5\2\u0165\u0164\3\2\2\2\u0165")
        buf.write("\u0166\3\2\2\2\u0166\u0167\3\2\2\2\u0167\u0168\5\f\7\2")
        buf.write("\u0168\u0169\5\16\b\2\u0169\7\3\2\2\2\u016a\u016c\5\n")
        buf.write("\6\2\u016b\u016a\3\2\2\2\u016c\u016d\3\2\2\2\u016d\u016b")
        buf.write("\3\2\2\2\u016d\u016e\3\2\2\2\u016e\t\3\2\2\2\u016f\u0170")
        buf.write("\7:\2\2\u0170\u017a\7\33\2\2\u0171\u0173\7\r\2\2\u0172")
        buf.write("\u0174\5\u011c\u008f\2\u0173\u0172\3\2\2\2\u0174\u0175")
        buf.write("\3\2\2\2\u0175\u0173\3\2\2\2\u0175\u0176\3\2\2\2\u0176")
        buf.write("\u0177\3\2\2\2\u0177\u0178\7\16\2\2\u0178\u017b\3\2\2")
        buf.write("\2\u0179\u017b\5\u011c\u008f\2\u017a\u0171\3\2\2\2\u017a")
        buf.write("\u0179\3\2\2\2\u017b\u017d\3\2\2\2\u017c\u017e\5\u0122")
        buf.write("\u0092\2\u017d\u017c\3\2\2\2\u017d\u017e\3\2\2\2\u017e")
        buf.write("\u0180\3\2\2\2\u017f\u016f\3\2\2\2\u0180\u0181\3\2\2\2")
        buf.write("\u0181\u017f\3\2\2\2\u0181\u0182\3\2\2\2\u0182\13\3\2")
        buf.write("\2\2\u0183\u0185\5\u00fc\177\2\u0184\u0183\3\2\2\2\u0184")
        buf.write("\u0185\3\2\2\2\u0185\u0186\3\2\2\2\u0186\u0187\7;\2\2")
        buf.write("\u0187\u0189\5\u011e\u0090\2\u0188\u018a\5\u0122\u0092")
        buf.write("\2\u0189\u0188\3\2\2\2\u0189\u018a\3\2\2\2\u018a\u018c")
        buf.write("\3\2\2\2\u018b\u0184\3\2\2\2\u018b\u018c\3\2\2\2\u018c")
        buf.write("\r\3\2\2\2\u018d\u018f\5\20\t\2\u018e\u018d\3\2\2\2\u018f")
        buf.write("\u0192\3\2\2\2\u0190\u018e\3\2\2\2\u0190\u0191\3\2\2\2")
        buf.write("\u0191\17\3\2\2\2\u0192\u0190\3\2\2\2\u0193\u0194\7<\2")
        buf.write("\2\u0194\u0198\5\u011e\u0090\2\u0195\u0196\7\t\2\2\u0196")
        buf.write("\u0199\7\21\2\2\u0197\u0199\5\22\n\2\u0198\u0195\3\2\2")
        buf.write("\2\u0198\u0197\3\2\2\2\u0198\u0199\3\2\2\2\u0199\u019b")
        buf.write("\3\2\2\2\u019a\u019c\5\u0122\u0092\2\u019b\u019a\3\2\2")
        buf.write("\2\u019b\u019c\3\2\2\2\u019c\21\3\2\2\2\u019d\u019e\7")
        buf.write("Y\2\2\u019e\u019f\5\u0120\u0091\2\u019f\23\3\2\2\2\u01a0")
        buf.write("\u01a6\5\26\f\2\u01a1\u01a6\5@!\2\u01a2\u01a6\5\66\34")
        buf.write("\2\u01a3\u01a6\5D#\2\u01a4\u01a6\5N(\2\u01a5\u01a0\3\2")
        buf.write("\2\2\u01a5\u01a1\3\2\2\2\u01a5\u01a2\3\2\2\2\u01a5\u01a3")
        buf.write("\3\2\2\2\u01a5\u01a4\3\2\2\2\u01a6\25\3\2\2\2\u01a7\u01a9")
        buf.write("\5\u00fc\177\2\u01a8\u01a7\3\2\2\2\u01a8\u01a9\3\2\2\2")
        buf.write("\u01a9\u01aa\3\2\2\2\u01aa\u01ae\t\2\2\2\u01ab\u01ad\7")
        buf.write("\7\2\2\u01ac\u01ab\3\2\2\2\u01ad\u01b0\3\2\2\2\u01ae\u01ac")
        buf.write("\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b1\3\2\2\2\u01b0")
        buf.write("\u01ae\3\2\2\2\u01b1\u01b9\5\u0120\u0091\2\u01b2\u01b4")
        buf.write("\7\7\2\2\u01b3\u01b2\3\2\2\2\u01b4\u01b7\3\2\2\2\u01b5")
        buf.write("\u01b3\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01b8\3\2\2\2")
        buf.write("\u01b7\u01b5\3\2\2\2\u01b8\u01ba\5P)\2\u01b9\u01b5\3\2")
        buf.write("\2\2\u01b9\u01ba\3\2\2\2\u01ba\u01c2\3\2\2\2\u01bb\u01bd")
        buf.write("\7\7\2\2\u01bc\u01bb\3\2\2\2\u01bd\u01c0\3\2\2\2\u01be")
        buf.write("\u01bc\3\2\2\2\u01be\u01bf\3\2\2\2\u01bf\u01c1\3\2\2\2")
        buf.write("\u01c0\u01be\3\2\2\2\u01c1\u01c3\5\30\r\2\u01c2\u01be")
        buf.write("\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3\u01d2\3\2\2\2\u01c4")
        buf.write("\u01c6\7\7\2\2\u01c5\u01c4\3\2\2\2\u01c6\u01c9\3\2\2\2")
        buf.write("\u01c7\u01c5\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01ca\3")
        buf.write("\2\2\2\u01c9\u01c7\3\2\2\2\u01ca\u01ce\7\33\2\2\u01cb")
        buf.write("\u01cd\7\7\2\2\u01cc\u01cb\3\2\2\2\u01cd\u01d0\3\2\2\2")
        buf.write("\u01ce\u01cc\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf\u01d1\3")
        buf.write("\2\2\2\u01d0\u01ce\3\2\2\2\u01d1\u01d3\5\36\20\2\u01d2")
        buf.write("\u01c7\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3\u01db\3\2\2\2")
        buf.write("\u01d4\u01d6\7\7\2\2\u01d5\u01d4\3\2\2\2\u01d6\u01d9\3")
        buf.write("\2\2\2\u01d7\u01d5\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8\u01da")
        buf.write("\3\2\2\2\u01d9\u01d7\3\2\2\2\u01da\u01dc\5h\65\2\u01db")
        buf.write("\u01d7\3\2\2\2\u01db\u01dc\3\2\2\2\u01dc\u01eb\3\2\2\2")
        buf.write("\u01dd\u01df\7\7\2\2\u01de\u01dd\3\2\2\2\u01df\u01e2\3")
        buf.write("\2\2\2\u01e0\u01de\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1\u01e3")
        buf.write("\3\2\2\2\u01e2\u01e0\3\2\2\2\u01e3\u01ec\5&\24\2\u01e4")
        buf.write("\u01e6\7\7\2\2\u01e5\u01e4\3\2\2\2\u01e6\u01e9\3\2\2\2")
        buf.write("\u01e7\u01e5\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\u01ea\3")
        buf.write("\2\2\2\u01e9\u01e7\3\2\2\2\u01ea\u01ec\5\60\31\2\u01eb")
        buf.write("\u01e0\3\2\2\2\u01eb\u01e7\3\2\2\2\u01eb\u01ec\3\2\2\2")
        buf.write("\u01ec\27\3\2\2\2\u01ed\u01ef\5\u00fc\177\2\u01ee\u01ed")
        buf.write("\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f7\3\2\2\2\u01f0")
        buf.write("\u01f4\7D\2\2\u01f1\u01f3\7\7\2\2\u01f2\u01f1\3\2\2\2")
        buf.write("\u01f3\u01f6\3\2\2\2\u01f4\u01f2\3\2\2\2\u01f4\u01f5\3")
        buf.write("\2\2\2\u01f5\u01f8\3\2\2\2\u01f6\u01f4\3\2\2\2\u01f7\u01f0")
        buf.write("\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9")
        buf.write("\u01fa\5\32\16\2\u01fa\31\3\2\2\2\u01fb\u0204\7\13\2\2")
        buf.write("\u01fc\u0201\5\34\17\2\u01fd\u01fe\7\n\2\2\u01fe\u0200")
        buf.write("\5\34\17\2\u01ff\u01fd\3\2\2\2\u0200\u0203\3\2\2\2\u0201")
        buf.write("\u01ff\3\2\2\2\u0201\u0202\3\2\2\2\u0202\u0205\3\2\2\2")
        buf.write("\u0203\u0201\3\2\2\2\u0204\u01fc\3\2\2\2\u0204\u0205\3")
        buf.write("\2\2\2\u0205\u0206\3\2\2\2\u0206\u0207\7\f\2\2\u0207\33")
        buf.write("\3\2\2\2\u0208\u020a\5\u00fc\177\2\u0209\u0208\3\2\2\2")
        buf.write("\u0209\u020a\3\2\2\2\u020a\u020c\3\2\2\2\u020b\u020d\t")
        buf.write("\3\2\2\u020c\u020b\3\2\2\2\u020c\u020d\3\2\2\2\u020d\u020e")
        buf.write("\3\2\2\2\u020e\u020f\5\u0120\u0091\2\u020f\u0210\7\33")
        buf.write("\2\2\u0210\u0213\5T+\2\u0211\u0212\7\35\2\2\u0212\u0214")
        buf.write("\5v<\2\u0213\u0211\3\2\2\2\u0213\u0214\3\2\2\2\u0214\35")
        buf.write("\3\2\2\2\u0215\u0217\5\u0114\u008b\2\u0216\u0215\3\2\2")
        buf.write("\2\u0217\u021a\3\2\2\2\u0218\u0216\3\2\2\2\u0218\u0219")
        buf.write("\3\2\2\2\u0219\u021b\3\2\2\2\u021a\u0218\3\2\2\2\u021b")
        buf.write("\u022c\5 \21\2\u021c\u021e\7\7\2\2\u021d\u021c\3\2\2\2")
        buf.write("\u021e\u0221\3\2\2\2\u021f\u021d\3\2\2\2\u021f\u0220\3")
        buf.write("\2\2\2\u0220\u0222\3\2\2\2\u0221\u021f\3\2\2\2\u0222\u0226")
        buf.write("\7\n\2\2\u0223\u0225\7\7\2\2\u0224\u0223\3\2\2\2\u0225")
        buf.write("\u0228\3\2\2\2\u0226\u0224\3\2\2\2\u0226\u0227\3\2\2\2")
        buf.write("\u0227\u0229\3\2\2\2\u0228\u0226\3\2\2\2\u0229\u022b\5")
        buf.write(" \21\2\u022a\u021f\3\2\2\2\u022b\u022e\3\2\2\2\u022c\u022a")
        buf.write("\3\2\2\2\u022c\u022d\3\2\2\2\u022d\37\3\2\2\2\u022e\u022c")
        buf.write("\3\2\2\2\u022f\u0233\5\"\22\2\u0230\u0233\5b\62\2\u0231")
        buf.write("\u0233\5$\23\2\u0232\u022f\3\2\2\2\u0232\u0230\3\2\2\2")
        buf.write("\u0232\u0231\3\2\2\2\u0233!\3\2\2\2\u0234\u0235\5b\62")
        buf.write("\2\u0235\u0236\5\u0096L\2\u0236#\3\2\2\2\u0237\u023b\5")
        buf.write("b\62\2\u0238\u023a\7\7\2\2\u0239\u0238\3\2\2\2\u023a\u023d")
        buf.write("\3\2\2\2\u023b\u0239\3\2\2\2\u023b\u023c\3\2\2\2\u023c")
        buf.write("\u023e\3\2\2\2\u023d\u023b\3\2\2\2\u023e\u0242\7E\2\2")
        buf.write("\u023f\u0241\7\7\2\2\u0240\u023f\3\2\2\2\u0241\u0244\3")
        buf.write("\2\2\2\u0242\u0240\3\2\2\2\u0242\u0243\3\2\2\2\u0243\u0245")
        buf.write("\3\2\2\2\u0244\u0242\3\2\2\2\u0245\u0246\5v<\2\u0246%")
        buf.write("\3\2\2\2\u0247\u024b\7\17\2\2\u0248\u024a\7\7\2\2\u0249")
        buf.write("\u0248\3\2\2\2\u024a\u024d\3\2\2\2\u024b\u0249\3\2\2\2")
        buf.write("\u024b\u024c\3\2\2\2\u024c\u0251\3\2\2\2\u024d\u024b\3")
        buf.write("\2\2\2\u024e\u0250\5(\25\2\u024f\u024e\3\2\2\2\u0250\u0253")
        buf.write("\3\2\2\2\u0251\u024f\3\2\2\2\u0251\u0252\3\2\2\2\u0252")
        buf.write("\u0257\3\2\2\2\u0253\u0251\3\2\2\2\u0254\u0256\7\7\2\2")
        buf.write("\u0255\u0254\3\2\2\2\u0256\u0259\3\2\2\2\u0257\u0255\3")
        buf.write("\2\2\2\u0257\u0258\3\2\2\2\u0258\u025a\3\2\2\2\u0259\u0257")
        buf.write("\3\2\2\2\u025a\u025b\7\20\2\2\u025b\'\3\2\2\2\u025c\u0265")
        buf.write("\5\26\f\2\u025d\u0265\5\66\34\2\u025e\u0265\5@!\2\u025f")
        buf.write("\u0265\5B\"\2\u0260\u0265\5D#\2\u0261\u0265\5*\26\2\u0262")
        buf.write("\u0265\5,\27\2\u0263\u0265\5N(\2\u0264\u025c\3\2\2\2\u0264")
        buf.write("\u025d\3\2\2\2\u0264\u025e\3\2\2\2\u0264\u025f\3\2\2\2")
        buf.write("\u0264\u0260\3\2\2\2\u0264\u0261\3\2\2\2\u0264\u0262\3")
        buf.write("\2\2\2\u0264\u0263\3\2\2\2\u0265\u0269\3\2\2\2\u0266\u0268")
        buf.write("\5\u0124\u0093\2\u0267\u0266\3\2\2\2\u0268\u026b\3\2\2")
        buf.write("\2\u0269\u0267\3\2\2\2\u0269\u026a\3\2\2\2\u026a)\3\2")
        buf.write("\2\2\u026b\u0269\3\2\2\2\u026c\u0270\7G\2\2\u026d\u026f")
        buf.write("\7\7\2\2\u026e\u026d\3\2\2\2\u026f\u0272\3\2\2\2\u0270")
        buf.write("\u026e\3\2\2\2\u0270\u0271\3\2\2\2\u0271\u0273\3\2\2\2")
        buf.write("\u0272\u0270\3\2\2\2\u0273\u0274\5l\67\2\u0274+\3\2\2")
        buf.write("\2\u0275\u0277\5\u00fc\177\2\u0276\u0275\3\2\2\2\u0276")
        buf.write("\u0277\3\2\2\2\u0277\u0278\3\2\2\2\u0278\u027c\7D\2\2")
        buf.write("\u0279\u027b\7\7\2\2\u027a\u0279\3\2\2\2\u027b\u027e\3")
        buf.write("\2\2\2\u027c\u027a\3\2\2\2\u027c\u027d\3\2\2\2\u027d\u027f")
        buf.write("\3\2\2\2\u027e\u027c\3\2\2\2\u027f\u028e\58\35\2\u0280")
        buf.write("\u0282\7\7\2\2\u0281\u0280\3\2\2\2\u0282\u0285\3\2\2\2")
        buf.write("\u0283\u0281\3\2\2\2\u0283\u0284\3\2\2\2\u0284\u0286\3")
        buf.write("\2\2\2\u0285\u0283\3\2\2\2\u0286\u028a\7\33\2\2\u0287")
        buf.write("\u0289\7\7\2\2\u0288\u0287\3\2\2\2\u0289\u028c\3\2\2\2")
        buf.write("\u028a\u0288\3\2\2\2\u028a\u028b\3\2\2\2\u028b\u028d\3")
        buf.write("\2\2\2\u028c\u028a\3\2\2\2\u028d\u028f\5.\30\2\u028e\u0283")
        buf.write("\3\2\2\2\u028e\u028f\3\2\2\2\u028f\u0293\3\2\2\2\u0290")
        buf.write("\u0292\7\7\2\2\u0291\u0290\3\2\2\2\u0292\u0295\3\2\2\2")
        buf.write("\u0293\u0291\3\2\2\2\u0293\u0294\3\2\2\2\u0294\u0296\3")
        buf.write("\2\2\2\u0295\u0293\3\2\2\2\u0296\u0297\5l\67\2\u0297-")
        buf.write("\3\2\2\2\u0298\u029c\7H\2\2\u0299\u029b\7\7\2\2\u029a")
        buf.write("\u0299\3\2\2\2\u029b\u029e\3\2\2\2\u029c\u029a\3\2\2\2")
        buf.write("\u029c\u029d\3\2\2\2\u029d\u029f\3\2\2\2\u029e\u029c\3")
        buf.write("\2\2\2\u029f\u02a9\5\u009cO\2\u02a0\u02a4\7I\2\2\u02a1")
        buf.write("\u02a3\7\7\2\2\u02a2\u02a1\3\2\2\2\u02a3\u02a6\3\2\2\2")
        buf.write("\u02a4\u02a2\3\2\2\2\u02a4\u02a5\3\2\2\2\u02a5\u02a7\3")
        buf.write("\2\2\2\u02a6\u02a4\3\2\2\2\u02a7\u02a9\5\u009cO\2\u02a8")
        buf.write("\u0298\3\2\2\2\u02a8\u02a0\3\2\2\2\u02a9/\3\2\2\2\u02aa")
        buf.write("\u02ae\7\17\2\2\u02ab\u02ad\7\7\2\2\u02ac\u02ab\3\2\2")
        buf.write("\2\u02ad\u02b0\3\2\2\2\u02ae\u02ac\3\2\2\2\u02ae\u02af")
        buf.write("\3\2\2\2\u02af\u02b2\3\2\2\2\u02b0\u02ae\3\2\2\2\u02b1")
        buf.write("\u02b3\5\62\32\2\u02b2\u02b1\3\2\2\2\u02b2\u02b3\3\2\2")
        buf.write("\2\u02b3\u02c7\3\2\2\2\u02b4\u02b6\7\7\2\2\u02b5\u02b4")
        buf.write("\3\2\2\2\u02b6\u02b9\3\2\2\2\u02b7\u02b5\3\2\2\2\u02b7")
        buf.write("\u02b8\3\2\2\2\u02b8\u02ba\3\2\2\2\u02b9\u02b7\3\2\2\2")
        buf.write("\u02ba\u02be\7\34\2\2\u02bb\u02bd\7\7\2\2\u02bc\u02bb")
        buf.write("\3\2\2\2\u02bd\u02c0\3\2\2\2\u02be\u02bc\3\2\2\2\u02be")
        buf.write("\u02bf\3\2\2\2\u02bf\u02c4\3\2\2\2\u02c0\u02be\3\2\2\2")
        buf.write("\u02c1\u02c3\5(\25\2\u02c2\u02c1\3\2\2\2\u02c3\u02c6\3")
        buf.write("\2\2\2\u02c4\u02c2\3\2\2\2\u02c4\u02c5\3\2\2\2\u02c5\u02c8")
        buf.write("\3\2\2\2\u02c6\u02c4\3\2\2\2\u02c7\u02b7\3\2\2\2\u02c7")
        buf.write("\u02c8\3\2\2\2\u02c8\u02cc\3\2\2\2\u02c9\u02cb\7\7\2\2")
        buf.write("\u02ca\u02c9\3\2\2\2\u02cb\u02ce\3\2\2\2\u02cc\u02ca\3")
        buf.write("\2\2\2\u02cc\u02cd\3\2\2\2\u02cd\u02cf\3\2\2\2\u02ce\u02cc")
        buf.write("\3\2\2\2\u02cf\u02d0\7\20\2\2\u02d0\61\3\2\2\2\u02d1\u02d5")
        buf.write("\5\64\33\2\u02d2\u02d4\7\7\2\2\u02d3\u02d2\3\2\2\2\u02d4")
        buf.write("\u02d7\3\2\2\2\u02d5\u02d3\3\2\2\2\u02d5\u02d6\3\2\2\2")
        buf.write("\u02d6\u02d9\3\2\2\2\u02d7\u02d5\3\2\2\2\u02d8\u02d1\3")
        buf.write("\2\2\2\u02d9\u02da\3\2\2\2\u02da\u02d8\3\2\2\2\u02da\u02db")
        buf.write("\3\2\2\2\u02db\u02dd\3\2\2\2\u02dc\u02de\7\34\2\2\u02dd")
        buf.write("\u02dc\3\2\2\2\u02dd\u02de\3\2\2\2\u02de\63\3\2\2\2\u02df")
        buf.write("\u02e7\5\u0120\u0091\2\u02e0\u02e2\7\7\2\2\u02e1\u02e0")
        buf.write("\3\2\2\2\u02e2\u02e5\3\2\2\2\u02e3\u02e1\3\2\2\2\u02e3")
        buf.write("\u02e4\3\2\2\2\u02e4\u02e6\3\2\2\2\u02e5\u02e3\3\2\2\2")
        buf.write("\u02e6\u02e8\5\u009cO\2\u02e7\u02e3\3\2\2\2\u02e7\u02e8")
        buf.write("\3\2\2\2\u02e8\u02f0\3\2\2\2\u02e9\u02eb\7\7\2\2\u02ea")
        buf.write("\u02e9\3\2\2\2\u02eb\u02ee\3\2\2\2\u02ec\u02ea\3\2\2\2")
        buf.write("\u02ec\u02ed\3\2\2\2\u02ed\u02ef\3\2\2\2\u02ee\u02ec\3")
        buf.write("\2\2\2\u02ef\u02f1\5&\24\2\u02f0\u02ec\3\2\2\2\u02f0\u02f1")
        buf.write("\3\2\2\2\u02f1\u02f9\3\2\2\2\u02f2\u02f4\7\7\2\2\u02f3")
        buf.write("\u02f2\3\2\2\2\u02f4\u02f7\3\2\2\2\u02f5\u02f3\3\2\2\2")
        buf.write("\u02f5\u02f6\3\2\2\2\u02f6\u02f8\3\2\2\2\u02f7\u02f5\3")
        buf.write("\2\2\2\u02f8\u02fa\7\n\2\2\u02f9\u02f5\3\2\2\2\u02f9\u02fa")
        buf.write("\3\2\2\2\u02fa\65\3\2\2\2\u02fb\u02fd\5\u00fc\177\2\u02fc")
        buf.write("\u02fb\3\2\2\2\u02fc\u02fd\3\2\2\2\u02fd\u02fe\3\2\2\2")
        buf.write("\u02fe\u030e\7?\2\2\u02ff\u0301\7\7\2\2\u0300\u02ff\3")
        buf.write("\2\2\2\u0301\u0304\3\2\2\2\u0302\u0300\3\2\2\2\u0302\u0303")
        buf.write("\3\2\2\2\u0303\u0305\3\2\2\2\u0304\u0302\3\2\2\2\u0305")
        buf.write("\u0309\5T+\2\u0306\u0308\7\7\2\2\u0307\u0306\3\2\2\2\u0308")
        buf.write("\u030b\3\2\2\2\u0309\u0307\3\2\2\2\u0309\u030a\3\2\2\2")
        buf.write("\u030a\u030c\3\2\2\2\u030b\u0309\3\2\2\2\u030c\u030d\7")
        buf.write("\t\2\2\u030d\u030f\3\2\2\2\u030e\u0302\3\2\2\2\u030e\u030f")
        buf.write("\3\2\2\2\u030f\u0317\3\2\2\2\u0310\u0312\7\7\2\2\u0311")
        buf.write("\u0310\3\2\2\2\u0312\u0315\3\2\2\2\u0313\u0311\3\2\2\2")
        buf.write("\u0313\u0314\3\2\2\2\u0314\u0316\3\2\2\2\u0315\u0313\3")
        buf.write("\2\2\2\u0316\u0318\5P)\2\u0317\u0313\3\2\2\2\u0317\u0318")
        buf.write("\3\2\2\2\u0318\u0320\3\2\2\2\u0319\u031b\7\7\2\2\u031a")
        buf.write("\u0319\3\2\2\2\u031b\u031e\3\2\2\2\u031c\u031a\3\2\2\2")
        buf.write("\u031c\u031d\3\2\2\2\u031d\u031f\3\2\2\2\u031e\u031c\3")
        buf.write("\2\2\2\u031f\u0321\5\u011e\u0090\2\u0320\u031c\3\2\2\2")
        buf.write("\u0320\u0321\3\2\2\2\u0321\u0325\3\2\2\2\u0322\u0324\7")
        buf.write("\7\2\2\u0323\u0322\3\2\2\2\u0324\u0327\3\2\2\2\u0325\u0323")
        buf.write("\3\2\2\2\u0325\u0326\3\2\2\2\u0326\u0328\3\2\2\2\u0327")
        buf.write("\u0325\3\2\2\2\u0328\u0337\58\35\2\u0329\u032b\7\7\2\2")
        buf.write("\u032a\u0329\3\2\2\2\u032b\u032e\3\2\2\2\u032c\u032a\3")
        buf.write("\2\2\2\u032c\u032d\3\2\2\2\u032d\u032f\3\2\2\2\u032e\u032c")
        buf.write("\3\2\2\2\u032f\u0333\7\33\2\2\u0330\u0332\7\7\2\2\u0331")
        buf.write("\u0330\3\2\2\2\u0332\u0335\3\2\2\2\u0333\u0331\3\2\2\2")
        buf.write("\u0333\u0334\3\2\2\2\u0334\u0336\3\2\2\2\u0335\u0333\3")
        buf.write("\2\2\2\u0336\u0338\5T+\2\u0337\u032c\3\2\2\2\u0337\u0338")
        buf.write("\3\2\2\2\u0338\u0340\3\2\2\2\u0339\u033b\7\7\2\2\u033a")
        buf.write("\u0339\3\2\2\2\u033b\u033e\3\2\2\2\u033c\u033a\3\2\2\2")
        buf.write("\u033c\u033d\3\2\2\2\u033d\u033f\3\2\2\2\u033e\u033c\3")
        buf.write("\2\2\2\u033f\u0341\5h\65\2\u0340\u033c\3\2\2\2\u0340\u0341")
        buf.write("\3\2\2\2\u0341\u0349\3\2\2\2\u0342\u0344\7\7\2\2\u0343")
        buf.write("\u0342\3\2\2\2\u0344\u0347\3\2\2\2\u0345\u0343\3\2\2\2")
        buf.write("\u0345\u0346\3\2\2\2\u0346\u0348\3\2\2\2\u0347\u0345\3")
        buf.write("\2\2\2\u0348\u034a\5> \2\u0349\u0345\3\2\2\2\u0349\u034a")
        buf.write("\3\2\2\2\u034a\67\3\2\2\2\u034b\u0354\7\13\2\2\u034c\u0351")
        buf.write("\5:\36\2\u034d\u034e\7\n\2\2\u034e\u0350\5:\36\2\u034f")
        buf.write("\u034d\3\2\2\2\u0350\u0353\3\2\2\2\u0351\u034f\3\2\2\2")
        buf.write("\u0351\u0352\3\2\2\2\u0352\u0355\3\2\2\2\u0353\u0351\3")
        buf.write("\2\2\2\u0354\u034c\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u0356")
        buf.write("\3\2\2\2\u0356\u0357\7\f\2\2\u03579\3\2\2\2\u0358\u035a")
        buf.write("\5\u00fc\177\2\u0359\u0358\3\2\2\2\u0359\u035a\3\2\2\2")
        buf.write("\u035a\u035b\3\2\2\2\u035b\u035e\5<\37\2\u035c\u035d\7")
        buf.write("\35\2\2\u035d\u035f\5v<\2\u035e\u035c\3\2\2\2\u035e\u035f")
        buf.write("\3\2\2\2\u035f;\3\2\2\2\u0360\u0361\5\u0120\u0091\2\u0361")
        buf.write("\u0362\7\33\2\2\u0362\u0363\5T+\2\u0363=\3\2\2\2\u0364")
        buf.write("\u036e\5l\67\2\u0365\u0369\7\35\2\2\u0366\u0368\7\7\2")
        buf.write("\2\u0367\u0366\3\2\2\2\u0368\u036b\3\2\2\2\u0369\u0367")
        buf.write("\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u036c\3\2\2\2\u036b")
        buf.write("\u0369\3\2\2\2\u036c\u036e\5v<\2\u036d\u0364\3\2\2\2\u036d")
        buf.write("\u0365\3\2\2\2\u036e?\3\2\2\2\u036f\u0371\5\u00fc\177")
        buf.write("\2\u0370\u036f\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u0372")
        buf.write("\3\2\2\2\u0372\u0376\7@\2\2\u0373\u0375\7\7\2\2\u0374")
        buf.write("\u0373\3\2\2\2\u0375\u0378\3\2\2\2\u0376\u0374\3\2\2\2")
        buf.write("\u0376\u0377\3\2\2\2\u0377\u0379\3\2\2\2\u0378\u0376\3")
        buf.write("\2\2\2\u0379\u0381\5\u0120\u0091\2\u037a\u037c\7\7\2\2")
        buf.write("\u037b\u037a\3\2\2\2\u037c\u037f\3\2\2\2\u037d\u037b\3")
        buf.write("\2\2\2\u037d\u037e\3\2\2\2\u037e\u0380\3\2\2\2\u037f\u037d")
        buf.write("\3\2\2\2\u0380\u0382\5\30\r\2\u0381\u037d\3\2\2\2\u0381")
        buf.write("\u0382\3\2\2\2\u0382\u0391\3\2\2\2\u0383\u0385\7\7\2\2")
        buf.write("\u0384\u0383\3\2\2\2\u0385\u0388\3\2\2\2\u0386\u0384\3")
        buf.write("\2\2\2\u0386\u0387\3\2\2\2\u0387\u0389\3\2\2\2\u0388\u0386")
        buf.write("\3\2\2\2\u0389\u038d\7\33\2\2\u038a\u038c\7\7\2\2\u038b")
        buf.write("\u038a\3\2\2\2\u038c\u038f\3\2\2\2\u038d\u038b\3\2\2\2")
        buf.write("\u038d\u038e\3\2\2\2\u038e\u0390\3\2\2\2\u038f\u038d\3")
        buf.write("\2\2\2\u0390\u0392\5\36\20\2\u0391\u0386\3\2\2\2\u0391")
        buf.write("\u0392\3\2\2\2\u0392\u039a\3\2\2\2\u0393\u0395\7\7\2\2")
        buf.write("\u0394\u0393\3\2\2\2\u0395\u0398\3\2\2\2\u0396\u0394\3")
        buf.write("\2\2\2\u0396\u0397\3\2\2\2\u0397\u0399\3\2\2\2\u0398\u0396")
        buf.write("\3\2\2\2\u0399\u039b\5&\24\2\u039a\u0396\3\2\2\2\u039a")
        buf.write("\u039b\3\2\2\2\u039bA\3\2\2\2\u039c\u039e\5\u00fc\177")
        buf.write("\2\u039d\u039c\3\2\2\2\u039d\u039e\3\2\2\2\u039e\u039f")
        buf.write("\3\2\2\2\u039f\u03a3\7F\2\2\u03a0\u03a2\7\7\2\2\u03a1")
        buf.write("\u03a0\3\2\2\2\u03a2\u03a5\3\2\2\2\u03a3\u03a1\3\2\2\2")
        buf.write("\u03a3\u03a4\3\2\2\2\u03a4\u03a7\3\2\2\2\u03a5\u03a3\3")
        buf.write("\2\2\2\u03a6\u03a8\5\u00fc\177\2\u03a7\u03a6\3\2\2\2\u03a7")
        buf.write("\u03a8\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9\u03b1\7@\2\2")
        buf.write("\u03aa\u03ac\7\7\2\2\u03ab\u03aa\3\2\2\2\u03ac\u03af\3")
        buf.write("\2\2\2\u03ad\u03ab\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03b0")
        buf.write("\3\2\2\2\u03af\u03ad\3\2\2\2\u03b0\u03b2\5\u0120\u0091")
        buf.write("\2\u03b1\u03ad\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03c1")
        buf.write("\3\2\2\2\u03b3\u03b5\7\7\2\2\u03b4\u03b3\3\2\2\2\u03b5")
        buf.write("\u03b8\3\2\2\2\u03b6\u03b4\3\2\2\2\u03b6\u03b7\3\2\2\2")
        buf.write("\u03b7\u03b9\3\2\2\2\u03b8\u03b6\3\2\2\2\u03b9\u03bd\7")
        buf.write("\33\2\2\u03ba\u03bc\7\7\2\2\u03bb\u03ba\3\2\2\2\u03bc")
        buf.write("\u03bf\3\2\2\2\u03bd\u03bb\3\2\2\2\u03bd\u03be\3\2\2\2")
        buf.write("\u03be\u03c0\3\2\2\2\u03bf\u03bd\3\2\2\2\u03c0\u03c2\5")
        buf.write("\36\20\2\u03c1\u03b6\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2")
        buf.write("\u03ca\3\2\2\2\u03c3\u03c5\7\7\2\2\u03c4\u03c3\3\2\2\2")
        buf.write("\u03c5\u03c8\3\2\2\2\u03c6\u03c4\3\2\2\2\u03c6\u03c7\3")
        buf.write("\2\2\2\u03c7\u03c9\3\2\2\2\u03c8\u03c6\3\2\2\2\u03c9\u03cb")
        buf.write("\5&\24\2\u03ca\u03c6\3\2\2\2\u03ca\u03cb\3\2\2\2\u03cb")
        buf.write("C\3\2\2\2\u03cc\u03ce\5\u00fc\177\2\u03cd\u03cc\3\2\2")
        buf.write("\2\u03cd\u03ce\3\2\2\2\u03ce\u03cf\3\2\2\2\u03cf\u03d7")
        buf.write("\t\3\2\2\u03d0\u03d2\7\7\2\2\u03d1\u03d0\3\2\2\2\u03d2")
        buf.write("\u03d5\3\2\2\2\u03d3\u03d1\3\2\2\2\u03d3\u03d4\3\2\2\2")
        buf.write("\u03d4\u03d6\3\2\2\2\u03d5\u03d3\3\2\2\2\u03d6\u03d8\5")
        buf.write("P)\2\u03d7\u03d3\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u03e8")
        buf.write("\3\2\2\2\u03d9\u03db\7\7\2\2\u03da\u03d9\3\2\2\2\u03db")
        buf.write("\u03de\3\2\2\2\u03dc\u03da\3\2\2\2\u03dc\u03dd\3\2\2\2")
        buf.write("\u03dd\u03df\3\2\2\2\u03de\u03dc\3\2\2\2\u03df\u03e3\5")
        buf.write("T+\2\u03e0\u03e2\7\7\2\2\u03e1\u03e0\3\2\2\2\u03e2\u03e5")
        buf.write("\3\2\2\2\u03e3\u03e1\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4")
        buf.write("\u03e6\3\2\2\2\u03e5\u03e3\3\2\2\2\u03e6\u03e7\7\t\2\2")
        buf.write("\u03e7\u03e9\3\2\2\2\u03e8\u03dc\3\2\2\2\u03e8\u03e9\3")
        buf.write("\2\2\2\u03e9\u03ed\3\2\2\2\u03ea\u03ec\7\7\2\2\u03eb\u03ea")
        buf.write("\3\2\2\2\u03ec\u03ef\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ed")
        buf.write("\u03ee\3\2\2\2\u03ee\u03f2\3\2\2\2\u03ef\u03ed\3\2\2\2")
        buf.write("\u03f0\u03f3\5F$\2\u03f1\u03f3\5H%\2\u03f2\u03f0\3\2\2")
        buf.write("\2\u03f2\u03f1\3\2\2\2\u03f3\u03fb\3\2\2\2\u03f4\u03f6")
        buf.write("\7\7\2\2\u03f5\u03f4\3\2\2\2\u03f6\u03f9\3\2\2\2\u03f7")
        buf.write("\u03f5\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03fa\3\2\2\2")
        buf.write("\u03f9\u03f7\3\2\2\2\u03fa\u03fc\5h\65\2\u03fb\u03f7\3")
        buf.write("\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u040b\3\2\2\2\u03fd\u03ff")
        buf.write("\7\7\2\2\u03fe\u03fd\3\2\2\2\u03ff\u0402\3\2\2\2\u0400")
        buf.write("\u03fe\3\2\2\2\u0400\u0401\3\2\2\2\u0401\u0403\3\2\2\2")
        buf.write("\u0402\u0400\3\2\2\2\u0403\u0407\t\4\2\2\u0404\u0406\7")
        buf.write("\7\2\2\u0405\u0404\3\2\2\2\u0406\u0409\3\2\2\2\u0407\u0405")
        buf.write("\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u040a\3\2\2\2\u0409")
        buf.write("\u0407\3\2\2\2\u040a\u040c\5v<\2\u040b\u0400\3\2\2\2\u040b")
        buf.write("\u040c\3\2\2\2\u040c\u0419\3\2\2\2\u040d\u0411\5J&\2\u040e")
        buf.write("\u040f\5\u0122\u0092\2\u040f\u0410\5L\'\2\u0410\u0412")
        buf.write("\3\2\2\2\u0411\u040e\3\2\2\2\u0411\u0412\3\2\2\2\u0412")
        buf.write("\u041a\3\2\2\2\u0413\u0417\5L\'\2\u0414\u0415\5\u0122")
        buf.write("\u0092\2\u0415\u0416\5J&\2\u0416\u0418\3\2\2\2\u0417\u0414")
        buf.write("\3\2\2\2\u0417\u0418\3\2\2\2\u0418\u041a\3\2\2\2\u0419")
        buf.write("\u040d\3\2\2\2\u0419\u0413\3\2\2\2\u0419\u041a\3\2\2\2")
        buf.write("\u041aE\3\2\2\2\u041b\u041c\7\13\2\2\u041c\u0421\5H%\2")
        buf.write("\u041d\u041e\7\n\2\2\u041e\u0420\5H%\2\u041f\u041d\3\2")
        buf.write("\2\2\u0420\u0423\3\2\2\2\u0421\u041f\3\2\2\2\u0421\u0422")
        buf.write("\3\2\2\2\u0422\u0424\3\2\2\2\u0423\u0421\3\2\2\2\u0424")
        buf.write("\u0425\7\f\2\2\u0425G\3\2\2\2\u0426\u0429\5\u0120\u0091")
        buf.write("\2\u0427\u0428\7\33\2\2\u0428\u042a\5T+\2\u0429\u0427")
        buf.write("\3\2\2\2\u0429\u042a\3\2\2\2\u042aI\3\2\2\2\u042b\u042d")
        buf.write("\5\u00fc\177\2\u042c\u042b\3\2\2\2\u042c\u042d\3\2\2\2")
        buf.write("\u042d\u042e\3\2\2\2\u042e\u045d\7c\2\2\u042f\u0431\5")
        buf.write("\u00fc\177\2\u0430\u042f\3\2\2\2\u0430\u0431\3\2\2\2\u0431")
        buf.write("\u0432\3\2\2\2\u0432\u0436\7c\2\2\u0433\u0435\7\7\2\2")
        buf.write("\u0434\u0433\3\2\2\2\u0435\u0438\3\2\2\2\u0436\u0434\3")
        buf.write("\2\2\2\u0436\u0437\3\2\2\2\u0437\u0439\3\2\2\2\u0438\u0436")
        buf.write("\3\2\2\2\u0439\u043a\7\13\2\2\u043a\u0449\7\f\2\2\u043b")
        buf.write("\u043d\7\7\2\2\u043c\u043b\3\2\2\2\u043d\u0440\3\2\2\2")
        buf.write("\u043e\u043c\3\2\2\2\u043e\u043f\3\2\2\2\u043f\u0441\3")
        buf.write("\2\2\2\u0440\u043e\3\2\2\2\u0441\u0445\7\33\2\2\u0442")
        buf.write("\u0444\7\7\2\2\u0443\u0442\3\2\2\2\u0444\u0447\3\2\2\2")
        buf.write("\u0445\u0443\3\2\2\2\u0445\u0446\3\2\2\2\u0446\u0448\3")
        buf.write("\2\2\2\u0447\u0445\3\2\2\2\u0448\u044a\5T+\2\u0449\u043e")
        buf.write("\3\2\2\2\u0449\u044a\3\2\2\2\u044a\u044e\3\2\2\2\u044b")
        buf.write("\u044d\7\7\2\2\u044c\u044b\3\2\2\2\u044d\u0450\3\2\2\2")
        buf.write("\u044e\u044c\3\2\2\2\u044e\u044f\3\2\2\2\u044f\u045a\3")
        buf.write("\2\2\2\u0450\u044e\3\2\2\2\u0451\u045b\5l\67\2\u0452\u0456")
        buf.write("\7\35\2\2\u0453\u0455\7\7\2\2\u0454\u0453\3\2\2\2\u0455")
        buf.write("\u0458\3\2\2\2\u0456\u0454\3\2\2\2\u0456\u0457\3\2\2\2")
        buf.write("\u0457\u0459\3\2\2\2\u0458\u0456\3\2\2\2\u0459\u045b\5")
        buf.write("v<\2\u045a\u0451\3\2\2\2\u045a\u0452\3\2\2\2\u045b\u045d")
        buf.write("\3\2\2\2\u045c\u042c\3\2\2\2\u045c\u0430\3\2\2\2\u045d")
        buf.write("K\3\2\2\2\u045e\u0460\5\u00fc\177\2\u045f\u045e\3\2\2")
        buf.write("\2\u045f\u0460\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0482")
        buf.write("\7d\2\2\u0462\u0464\5\u00fc\177\2\u0463\u0462\3\2\2\2")
        buf.write("\u0463\u0464\3\2\2\2\u0464\u0465\3\2\2\2\u0465\u0469\7")
        buf.write("d\2\2\u0466\u0468\7\7\2\2\u0467\u0466\3\2\2\2\u0468\u046b")
        buf.write("\3\2\2\2\u0469\u0467\3\2\2\2\u0469\u046a\3\2\2\2\u046a")
        buf.write("\u046c\3\2\2\2\u046b\u0469\3\2\2\2\u046c\u0471\7\13\2")
        buf.write("\2\u046d\u0470\5\u0114\u008b\2\u046e\u0470\5\u010e\u0088")
        buf.write("\2\u046f\u046d\3\2\2\2\u046f\u046e\3\2\2\2\u0470\u0473")
        buf.write("\3\2\2\2\u0471\u046f\3\2\2\2\u0471\u0472\3\2\2\2\u0472")
        buf.write("\u0476\3\2\2\2\u0473\u0471\3\2\2\2\u0474\u0477\5\u0120")
        buf.write("\u0091\2\u0475\u0477\5<\37\2\u0476\u0474\3\2\2\2\u0476")
        buf.write("\u0475\3\2\2\2\u0477\u0478\3\2\2\2\u0478\u047c\7\f\2\2")
        buf.write("\u0479\u047b\7\7\2\2\u047a\u0479\3\2\2\2\u047b\u047e\3")
        buf.write("\2\2\2\u047c\u047a\3\2\2\2\u047c\u047d\3\2\2\2\u047d\u047f")
        buf.write("\3\2\2\2\u047e\u047c\3\2\2\2\u047f\u0480\5> \2\u0480\u0482")
        buf.write("\3\2\2\2\u0481\u045f\3\2\2\2\u0481\u0463\3\2\2\2\u0482")
        buf.write("M\3\2\2\2\u0483\u0485\5\u00fc\177\2\u0484\u0483\3\2\2")
        buf.write("\2\u0484\u0485\3\2\2\2\u0485\u0486\3\2\2\2\u0486\u048a")
        buf.write("\7C\2\2\u0487\u0489\7\7\2\2\u0488\u0487\3\2\2\2\u0489")
        buf.write("\u048c\3\2\2\2\u048a\u0488\3\2\2\2\u048a\u048b\3\2\2\2")
        buf.write("\u048b\u048d\3\2\2\2\u048c\u048a\3\2\2\2\u048d\u0495\5")
        buf.write("\u0120\u0091\2\u048e\u0490\7\7\2\2\u048f\u048e\3\2\2\2")
        buf.write("\u0490\u0493\3\2\2\2\u0491\u048f\3\2\2\2\u0491\u0492\3")
        buf.write("\2\2\2\u0492\u0494\3\2\2\2\u0493\u0491\3\2\2\2\u0494\u0496")
        buf.write("\5P)\2\u0495\u0491\3\2\2\2\u0495\u0496\3\2\2\2\u0496\u049a")
        buf.write("\3\2\2\2\u0497\u0499\7\7\2\2\u0498\u0497\3\2\2\2\u0499")
        buf.write("\u049c\3\2\2\2\u049a\u0498\3\2\2\2\u049a\u049b\3\2\2\2")
        buf.write("\u049b\u049d\3\2\2\2\u049c\u049a\3\2\2\2\u049d\u04a1\7")
        buf.write("\35\2\2\u049e\u04a0\7\7\2\2\u049f\u049e\3\2\2\2\u04a0")
        buf.write("\u04a3\3\2\2\2\u04a1\u049f\3\2\2\2\u04a1\u04a2\3\2\2\2")
        buf.write("\u04a2\u04a4\3\2\2\2\u04a3\u04a1\3\2\2\2\u04a4\u04a5\5")
        buf.write("T+\2\u04a5O\3\2\2\2\u04a6\u04aa\7-\2\2\u04a7\u04a9\7\7")
        buf.write("\2\2\u04a8\u04a7\3\2\2\2\u04a9\u04ac\3\2\2\2\u04aa\u04a8")
        buf.write("\3\2\2\2\u04aa\u04ab\3\2\2\2\u04ab\u04ad\3\2\2\2\u04ac")
        buf.write("\u04aa\3\2\2\2\u04ad\u04be\5R*\2\u04ae\u04b0\7\7\2\2\u04af")
        buf.write("\u04ae\3\2\2\2\u04b0\u04b3\3\2\2\2\u04b1\u04af\3\2\2\2")
        buf.write("\u04b1\u04b2\3\2\2\2\u04b2\u04b4\3\2\2\2\u04b3\u04b1\3")
        buf.write("\2\2\2\u04b4\u04b8\7\n\2\2\u04b5\u04b7\7\7\2\2\u04b6\u04b5")
        buf.write("\3\2\2\2\u04b7\u04ba\3\2\2\2\u04b8\u04b6\3\2\2\2\u04b8")
        buf.write("\u04b9\3\2\2\2\u04b9\u04bb\3\2\2\2\u04ba\u04b8\3\2\2\2")
        buf.write("\u04bb\u04bd\5R*\2\u04bc\u04b1\3\2\2\2\u04bd\u04c0\3\2")
        buf.write("\2\2\u04be\u04bc\3\2\2\2\u04be\u04bf\3\2\2\2\u04bf\u04c4")
        buf.write("\3\2\2\2\u04c0\u04be\3\2\2\2\u04c1\u04c3\7\7\2\2\u04c2")
        buf.write("\u04c1\3\2\2\2\u04c3\u04c6\3\2\2\2\u04c4\u04c2\3\2\2\2")
        buf.write("\u04c4\u04c5\3\2\2\2\u04c5\u04c7\3\2\2\2\u04c6\u04c4\3")
        buf.write("\2\2\2\u04c7\u04c8\7.\2\2\u04c8Q\3\2\2\2\u04c9\u04cb\5")
        buf.write("\u00fc\177\2\u04ca\u04c9\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb")
        buf.write("\u04cf\3\2\2\2\u04cc\u04ce\7\7\2\2\u04cd\u04cc\3\2\2\2")
        buf.write("\u04ce\u04d1\3\2\2\2\u04cf\u04cd\3\2\2\2\u04cf\u04d0\3")
        buf.write("\2\2\2\u04d0\u04d2\3\2\2\2\u04d1\u04cf\3\2\2\2\u04d2\u04e1")
        buf.write("\5\u0120\u0091\2\u04d3\u04d5\7\7\2\2\u04d4\u04d3\3\2\2")
        buf.write("\2\u04d5\u04d8\3\2\2\2\u04d6\u04d4\3\2\2\2\u04d6\u04d7")
        buf.write("\3\2\2\2\u04d7\u04d9\3\2\2\2\u04d8\u04d6\3\2\2\2\u04d9")
        buf.write("\u04dd\7\33\2\2\u04da\u04dc\7\7\2\2\u04db\u04da\3\2\2")
        buf.write("\2\u04dc\u04df\3\2\2\2\u04dd\u04db\3\2\2\2\u04dd\u04de")
        buf.write("\3\2\2\2\u04de\u04e0\3\2\2\2\u04df\u04dd\3\2\2\2\u04e0")
        buf.write("\u04e2\5T+\2\u04e1\u04d6\3\2\2\2\u04e1\u04e2\3\2\2\2\u04e2")
        buf.write("S\3\2\2\2\u04e3\u04e5\5V,\2\u04e4\u04e3\3\2\2\2\u04e4")
        buf.write("\u04e5\3\2\2\2\u04e5\u04ea\3\2\2\2\u04e6\u04eb\5^\60\2")
        buf.write("\u04e7\u04eb\5X-\2\u04e8\u04eb\5Z.\2\u04e9\u04eb\5\\/")
        buf.write("\2\u04ea\u04e6\3\2\2\2\u04ea\u04e7\3\2\2\2\u04ea\u04e8")
        buf.write("\3\2\2\2\u04ea\u04e9\3\2\2\2\u04ebU\3\2\2\2\u04ec\u04f5")
        buf.write("\5\u0114\u008b\2\u04ed\u04f1\7x\2\2\u04ee\u04f0\7\7\2")
        buf.write("\2\u04ef\u04ee\3\2\2\2\u04f0\u04f3\3\2\2\2\u04f1\u04ef")
        buf.write("\3\2\2\2\u04f1\u04f2\3\2\2\2\u04f2\u04f5\3\2\2\2\u04f3")
        buf.write("\u04f1\3\2\2\2\u04f4\u04ec\3\2\2\2\u04f4\u04ed\3\2\2\2")
        buf.write("\u04f5\u04f6\3\2\2\2\u04f6\u04f4\3\2\2\2\u04f6\u04f7\3")
        buf.write("\2\2\2\u04f7W\3\2\2\2\u04f8\u04f9\7\13\2\2\u04f9\u04fa")
        buf.write("\5T+\2\u04fa\u04fb\7\f\2\2\u04fbY\3\2\2\2\u04fc\u04ff")
        buf.write("\5\\/\2\u04fd\u04ff\5X-\2\u04fe\u04fc\3\2\2\2\u04fe\u04fd")
        buf.write("\3\2\2\2\u04ff\u0503\3\2\2\2\u0500\u0502\7\7\2\2\u0501")
        buf.write("\u0500\3\2\2\2\u0502\u0505\3\2\2\2\u0503\u0501\3\2\2\2")
        buf.write("\u0503\u0504\3\2\2\2\u0504\u0507\3\2\2\2\u0505\u0503\3")
        buf.write("\2\2\2\u0506\u0508\7+\2\2\u0507\u0506\3\2\2\2\u0508\u0509")
        buf.write("\3\2\2\2\u0509\u0507\3\2\2\2\u0509\u050a\3\2\2\2\u050a")
        buf.write("[\3\2\2\2\u050b\u050c\7\13\2\2\u050c\u050d\5\\/\2\u050d")
        buf.write("\u050e\7\f\2\2\u050e\u0512\3\2\2\2\u050f\u0512\5b\62\2")
        buf.write("\u0510\u0512\7i\2\2\u0511\u050b\3\2\2\2\u0511\u050f\3")
        buf.write("\2\2\2\u0511\u0510\3\2\2\2\u0512]\3\2\2\2\u0513\u0517")
        buf.write("\5`\61\2\u0514\u0516\7\7\2\2\u0515\u0514\3\2\2\2\u0516")
        buf.write("\u0519\3\2\2\2\u0517\u0515\3\2\2\2\u0517\u0518\3\2\2\2")
        buf.write("\u0518\u051a\3\2\2\2\u0519\u0517\3\2\2\2\u051a\u051e\7")
        buf.write("\t\2\2\u051b\u051d\7\7\2\2\u051c\u051b\3\2\2\2\u051d\u0520")
        buf.write("\3\2\2\2\u051e\u051c\3\2\2\2\u051e\u051f\3\2\2\2\u051f")
        buf.write("\u0522\3\2\2\2\u0520\u051e\3\2\2\2\u0521\u0513\3\2\2\2")
        buf.write("\u0521\u0522\3\2\2\2\u0522\u0523\3\2\2\2\u0523\u0527\5")
        buf.write("f\64\2\u0524\u0526\7\7\2\2\u0525\u0524\3\2\2\2\u0526\u0529")
        buf.write("\3\2\2\2\u0527\u0525\3\2\2\2\u0527\u0528\3\2\2\2\u0528")
        buf.write("\u052a\3\2\2\2\u0529\u0527\3\2\2\2\u052a\u052e\7#\2\2")
        buf.write("\u052b\u052d\7\7\2\2\u052c\u052b\3\2\2\2\u052d\u0530\3")
        buf.write("\2\2\2\u052e\u052c\3\2\2\2\u052e\u052f\3\2\2\2\u052f\u0531")
        buf.write("\3\2\2\2\u0530\u052e\3\2\2\2\u0531\u0532\5T+\2\u0532_")
        buf.write("\3\2\2\2\u0533\u0537\5X-\2\u0534\u0537\5Z.\2\u0535\u0537")
        buf.write("\5\\/\2\u0536\u0533\3\2\2\2\u0536\u0534\3\2\2\2\u0536")
        buf.write("\u0535\3\2\2\2\u0537a\3\2\2\2\u0538\u0549\5d\63\2\u0539")
        buf.write("\u053b\7\7\2\2\u053a\u0539\3\2\2\2\u053b\u053e\3\2\2\2")
        buf.write("\u053c\u053a\3\2\2\2\u053c\u053d\3\2\2\2\u053d\u053f\3")
        buf.write("\2\2\2\u053e\u053c\3\2\2\2\u053f\u0543\7\t\2\2\u0540\u0542")
        buf.write("\7\7\2\2\u0541\u0540\3\2\2\2\u0542\u0545\3\2\2\2\u0543")
        buf.write("\u0541\3\2\2\2\u0543\u0544\3\2\2\2\u0544\u0546\3\2\2\2")
        buf.write("\u0545\u0543\3\2\2\2\u0546\u0548\5d\63\2\u0547\u053c\3")
        buf.write("\2\2\2\u0548\u054b\3\2\2\2\u0549\u0547\3\2\2\2\u0549\u054a")
        buf.write("\3\2\2\2\u054ac\3\2\2\2\u054b\u0549\3\2\2\2\u054c\u0554")
        buf.write("\5\u0120\u0091\2\u054d\u054f\7\7\2\2\u054e\u054d\3\2\2")
        buf.write("\2\u054f\u0552\3\2\2\2\u0550\u054e\3\2\2\2\u0550\u0551")
        buf.write("\3\2\2\2\u0551\u0553\3\2\2\2\u0552\u0550\3\2\2\2\u0553")
        buf.write("\u0555\5\u009eP\2\u0554\u0550\3\2\2\2\u0554\u0555\3\2")
        buf.write("\2\2\u0555e\3\2\2\2\u0556\u0559\7\13\2\2\u0557\u055a\5")
        buf.write("<\37\2\u0558\u055a\5T+\2\u0559\u0557\3\2\2\2\u0559\u0558")
        buf.write("\3\2\2\2\u0559\u055a\3\2\2\2\u055a\u0562\3\2\2\2\u055b")
        buf.write("\u055e\7\n\2\2\u055c\u055f\5<\37\2\u055d\u055f\5T+\2\u055e")
        buf.write("\u055c\3\2\2\2\u055e\u055d\3\2\2\2\u055f\u0561\3\2\2\2")
        buf.write("\u0560\u055b\3\2\2\2\u0561\u0564\3\2\2\2\u0562\u0560\3")
        buf.write("\2\2\2\u0562\u0563\3\2\2\2\u0563\u0565\3\2\2\2\u0564\u0562")
        buf.write("\3\2\2\2\u0565\u0566\7\f\2\2\u0566g\3\2\2\2\u0567\u056b")
        buf.write("\7K\2\2\u0568\u056a\7\7\2\2\u0569\u0568\3\2\2\2\u056a")
        buf.write("\u056d\3\2\2\2\u056b\u0569\3\2\2\2\u056b\u056c\3\2\2\2")
        buf.write("\u056c\u056e\3\2\2\2\u056d\u056b\3\2\2\2\u056e\u057f\5")
        buf.write("j\66\2\u056f\u0571\7\7\2\2\u0570\u056f\3\2\2\2\u0571\u0574")
        buf.write("\3\2\2\2\u0572\u0570\3\2\2\2\u0572\u0573\3\2\2\2\u0573")
        buf.write("\u0575\3\2\2\2\u0574\u0572\3\2\2\2\u0575\u0579\7\n\2\2")
        buf.write("\u0576\u0578\7\7\2\2\u0577\u0576\3\2\2\2\u0578\u057b\3")
        buf.write("\2\2\2\u0579\u0577\3\2\2\2\u0579\u057a\3\2\2\2\u057a\u057c")
        buf.write("\3\2\2\2\u057b\u0579\3\2\2\2\u057c\u057e\5j\66\2\u057d")
        buf.write("\u0572\3\2\2\2\u057e\u0581\3\2\2\2\u057f\u057d\3\2\2\2")
        buf.write("\u057f\u0580\3\2\2\2\u0580i\3\2\2\2\u0581\u057f\3\2\2")
        buf.write("\2\u0582\u0584\5\u0114\u008b\2\u0583\u0582\3\2\2\2\u0584")
        buf.write("\u0587\3\2\2\2\u0585\u0583\3\2\2\2\u0585\u0586\3\2\2\2")
        buf.write("\u0586\u0588\3\2\2\2\u0587\u0585\3\2\2\2\u0588\u058c\5")
        buf.write("\u0120\u0091\2\u0589\u058b\7\7\2\2\u058a\u0589\3\2\2\2")
        buf.write("\u058b\u058e\3\2\2\2\u058c\u058a\3\2\2\2\u058c\u058d\3")
        buf.write("\2\2\2\u058d\u058f\3\2\2\2\u058e\u058c\3\2\2\2\u058f\u0593")
        buf.write("\7\33\2\2\u0590\u0592\7\7\2\2\u0591\u0590\3\2\2\2\u0592")
        buf.write("\u0595\3\2\2\2\u0593\u0591\3\2\2\2\u0593\u0594\3\2\2\2")
        buf.write("\u0594\u0596\3\2\2\2\u0595\u0593\3\2\2\2\u0596\u0597\5")
        buf.write("T+\2\u0597k\3\2\2\2\u0598\u0599\7\17\2\2\u0599\u059a\5")
        buf.write("n8\2\u059a\u059b\7\20\2\2\u059bm\3\2\2\2\u059c\u059e\5")
        buf.write("\u0124\u0093\2\u059d\u059c\3\2\2\2\u059e\u05a1\3\2\2\2")
        buf.write("\u059f\u059d\3\2\2\2\u059f\u05a0\3\2\2\2\u05a0\u05b0\3")
        buf.write("\2\2\2\u05a1\u059f\3\2\2\2\u05a2\u05ad\5p9\2\u05a3\u05a5")
        buf.write("\5\u0124\u0093\2\u05a4\u05a3\3\2\2\2\u05a5\u05a6\3\2\2")
        buf.write("\2\u05a6\u05a4\3\2\2\2\u05a6\u05a7\3\2\2\2\u05a7\u05a9")
        buf.write("\3\2\2\2\u05a8\u05aa\5p9\2\u05a9\u05a8\3\2\2\2\u05a9\u05aa")
        buf.write("\3\2\2\2\u05aa\u05ac\3\2\2\2\u05ab\u05a4\3\2\2\2\u05ac")
        buf.write("\u05af\3\2\2\2\u05ad\u05ab\3\2\2\2\u05ad\u05ae\3\2\2\2")
        buf.write("\u05ae\u05b1\3\2\2\2\u05af\u05ad\3\2\2\2\u05b0\u05a2\3")
        buf.write("\2\2\2\u05b0\u05b1\3\2\2\2\u05b1o\3\2\2\2\u05b2\u05b5")
        buf.write("\5t;\2\u05b3\u05b5\5r:\2\u05b4\u05b2\3\2\2\2\u05b4\u05b3")
        buf.write("\3\2\2\2\u05b5q\3\2\2\2\u05b6\u05b8\5\u0114\u008b\2\u05b7")
        buf.write("\u05b6\3\2\2\2\u05b8\u05bb\3\2\2\2\u05b9\u05b7\3\2\2\2")
        buf.write("\u05b9\u05ba\3\2\2\2\u05ba\u05bf\3\2\2\2\u05bb\u05b9\3")
        buf.write("\2\2\2\u05bc\u05be\7\7\2\2\u05bd\u05bc\3\2\2\2\u05be\u05c1")
        buf.write("\3\2\2\2\u05bf\u05bd\3\2\2\2\u05bf\u05c0\3\2\2\2\u05c0")
        buf.write("\u05c2\3\2\2\2\u05c1\u05bf\3\2\2\2\u05c2\u05c3\5v<\2\u05c3")
        buf.write("s\3\2\2\2\u05c4\u05c6\5\u0112\u008a\2\u05c5\u05c4\3\2")
        buf.write("\2\2\u05c6\u05c9\3\2\2\2\u05c7\u05c5\3\2\2\2\u05c7\u05c8")
        buf.write("\3\2\2\2\u05c8\u05ce\3\2\2\2\u05c9\u05c7\3\2\2\2\u05ca")
        buf.write("\u05cf\5\26\f\2\u05cb\u05cf\5\66\34\2\u05cc\u05cf\5D#")
        buf.write("\2\u05cd\u05cf\5N(\2\u05ce\u05ca\3\2\2\2\u05ce\u05cb\3")
        buf.write("\2\2\2\u05ce\u05cc\3\2\2\2\u05ce\u05cd\3\2\2\2\u05cfu")
        buf.write("\3\2\2\2\u05d0\u05d6\5x=\2\u05d1\u05d2\5\u00e6t\2\u05d2")
        buf.write("\u05d3\5x=\2\u05d3\u05d5\3\2\2\2\u05d4\u05d1\3\2\2\2\u05d5")
        buf.write("\u05d8\3\2\2\2\u05d6\u05d4\3\2\2\2\u05d6\u05d7\3\2\2\2")
        buf.write("\u05d7w\3\2\2\2\u05d8\u05d6\3\2\2\2\u05d9\u05ea\5z>\2")
        buf.write("\u05da\u05dc\7\7\2\2\u05db\u05da\3\2\2\2\u05dc\u05df\3")
        buf.write("\2\2\2\u05dd\u05db\3\2\2\2\u05dd\u05de\3\2\2\2\u05de\u05e0")
        buf.write("\3\2\2\2\u05df\u05dd\3\2\2\2\u05e0\u05e4\7\31\2\2\u05e1")
        buf.write("\u05e3\7\7\2\2\u05e2\u05e1\3\2\2\2\u05e3\u05e6\3\2\2\2")
        buf.write("\u05e4\u05e2\3\2\2\2\u05e4\u05e5\3\2\2\2\u05e5\u05e7\3")
        buf.write("\2\2\2\u05e6\u05e4\3\2\2\2\u05e7\u05e9\5z>\2\u05e8\u05dd")
        buf.write("\3\2\2\2\u05e9\u05ec\3\2\2\2\u05ea\u05e8\3\2\2\2\u05ea")
        buf.write("\u05eb\3\2\2\2\u05eby\3\2\2\2\u05ec\u05ea\3\2\2\2\u05ed")
        buf.write("\u05fe\5|?\2\u05ee\u05f0\7\7\2\2\u05ef\u05ee\3\2\2\2\u05f0")
        buf.write("\u05f3\3\2\2\2\u05f1\u05ef\3\2\2\2\u05f1\u05f2\3\2\2\2")
        buf.write("\u05f2\u05f4\3\2\2\2\u05f3\u05f1\3\2\2\2\u05f4\u05f8\7")
        buf.write("\30\2\2\u05f5\u05f7\7\7\2\2\u05f6\u05f5\3\2\2\2\u05f7")
        buf.write("\u05fa\3\2\2\2\u05f8\u05f6\3\2\2\2\u05f8\u05f9\3\2\2\2")
        buf.write("\u05f9\u05fb\3\2\2\2\u05fa\u05f8\3\2\2\2\u05fb\u05fd\5")
        buf.write("|?\2\u05fc\u05f1\3\2\2\2\u05fd\u0600\3\2\2\2\u05fe\u05fc")
        buf.write("\3\2\2\2\u05fe\u05ff\3\2\2\2\u05ff{\3\2\2\2\u0600\u05fe")
        buf.write("\3\2\2\2\u0601\u060d\5~@\2\u0602\u0606\5\u00e8u\2\u0603")
        buf.write("\u0605\7\7\2\2\u0604\u0603\3\2\2\2\u0605\u0608\3\2\2\2")
        buf.write("\u0606\u0604\3\2\2\2\u0606\u0607\3\2\2\2\u0607\u0609\3")
        buf.write("\2\2\2\u0608\u0606\3\2\2\2\u0609\u060a\5~@\2\u060a\u060c")
        buf.write("\3\2\2\2\u060b\u0602\3\2\2\2\u060c\u060f\3\2\2\2\u060d")
        buf.write("\u060b\3\2\2\2\u060d\u060e\3\2\2\2\u060e}\3\2\2\2\u060f")
        buf.write("\u060d\3\2\2\2\u0610\u061a\5\u0080A\2\u0611\u0615\5\u00ea")
        buf.write("v\2\u0612\u0614\7\7\2\2\u0613\u0612\3\2\2\2\u0614\u0617")
        buf.write("\3\2\2\2\u0615\u0613\3\2\2\2\u0615\u0616\3\2\2\2\u0616")
        buf.write("\u0618\3\2\2\2\u0617\u0615\3\2\2\2\u0618\u0619\5\u0080")
        buf.write("A\2\u0619\u061b\3\2\2\2\u061a\u0611\3\2\2\2\u061a\u061b")
        buf.write("\3\2\2\2\u061b\177\3\2\2\2\u061c\u0633\5\u0082B\2\u061d")
        buf.write("\u0621\5\u00ecw\2\u061e\u0620\7\7\2\2\u061f\u061e\3\2")
        buf.write("\2\2\u0620\u0623\3\2\2\2\u0621\u061f\3\2\2\2\u0621\u0622")
        buf.write("\3\2\2\2\u0622\u0624\3\2\2\2\u0623\u0621\3\2\2\2\u0624")
        buf.write("\u0625\5\u0082B\2\u0625\u0627\3\2\2\2\u0626\u061d\3\2")
        buf.write("\2\2\u0627\u0628\3\2\2\2\u0628\u0626\3\2\2\2\u0628\u0629")
        buf.write("\3\2\2\2\u0629\u0634\3\2\2\2\u062a\u062e\5\u00eex\2\u062b")
        buf.write("\u062d\7\7\2\2\u062c\u062b\3\2\2\2\u062d\u0630\3\2\2\2")
        buf.write("\u062e\u062c\3\2\2\2\u062e\u062f\3\2\2\2\u062f\u0631\3")
        buf.write("\2\2\2\u0630\u062e\3\2\2\2\u0631\u0632\5T+\2\u0632\u0634")
        buf.write("\3\2\2\2\u0633\u0626\3\2\2\2\u0633\u062a\3\2\2\2\u0633")
        buf.write("\u0634\3\2\2\2\u0634\u0081\3\2\2\2\u0635\u0646\5\u0084")
        buf.write("C\2\u0636\u0638\7\7\2\2\u0637\u0636\3\2\2\2\u0638\u063b")
        buf.write("\3\2\2\2\u0639\u0637\3\2\2\2\u0639\u063a\3\2\2\2\u063a")
        buf.write("\u063c\3\2\2\2\u063b\u0639\3\2\2\2\u063c\u0640\7,\2\2")
        buf.write("\u063d\u063f\7\7\2\2\u063e\u063d\3\2\2\2\u063f\u0642\3")
        buf.write("\2\2\2\u0640\u063e\3\2\2\2\u0640\u0641\3\2\2\2\u0641\u0643")
        buf.write("\3\2\2\2\u0642\u0640\3\2\2\2\u0643\u0645\5\u0084C\2\u0644")
        buf.write("\u0639\3\2\2\2\u0645\u0648\3\2\2\2\u0646\u0644\3\2\2\2")
        buf.write("\u0646\u0647\3\2\2\2\u0647\u0083\3\2\2\2\u0648\u0646\3")
        buf.write("\2\2\2\u0649\u0655\5\u0086D\2\u064a\u064e\5\u0120\u0091")
        buf.write("\2\u064b\u064d\7\7\2\2\u064c\u064b\3\2\2\2\u064d\u0650")
        buf.write("\3\2\2\2\u064e\u064c\3\2\2\2\u064e\u064f\3\2\2\2\u064f")
        buf.write("\u0651\3\2\2\2\u0650\u064e\3\2\2\2\u0651\u0652\5\u0086")
        buf.write("D\2\u0652\u0654\3\2\2\2\u0653\u064a\3\2\2\2\u0654\u0657")
        buf.write("\3\2\2\2\u0655\u0653\3\2\2\2\u0655\u0656\3\2\2\2\u0656")
        buf.write("\u0085\3\2\2\2\u0657\u0655\3\2\2\2\u0658\u0663\5\u0088")
        buf.write("E\2\u0659\u065d\7%\2\2\u065a\u065c\7\7\2\2\u065b\u065a")
        buf.write("\3\2\2\2\u065c\u065f\3\2\2\2\u065d\u065b\3\2\2\2\u065d")
        buf.write("\u065e\3\2\2\2\u065e\u0660\3\2\2\2\u065f\u065d\3\2\2\2")
        buf.write("\u0660\u0662\5\u0088E\2\u0661\u0659\3\2\2\2\u0662\u0665")
        buf.write("\3\2\2\2\u0663\u0661\3\2\2\2\u0663\u0664\3\2\2\2\u0664")
        buf.write("\u0087\3\2\2\2\u0665\u0663\3\2\2\2\u0666\u0672\5\u008a")
        buf.write("F\2\u0667\u066b\5\u00f0y\2\u0668\u066a\7\7\2\2\u0669\u0668")
        buf.write("\3\2\2\2\u066a\u066d\3\2\2\2\u066b\u0669\3\2\2\2\u066b")
        buf.write("\u066c\3\2\2\2\u066c\u066e\3\2\2\2\u066d\u066b\3\2\2\2")
        buf.write("\u066e\u066f\5\u008aF\2\u066f\u0671\3\2\2\2\u0670\u0667")
        buf.write("\3\2\2\2\u0671\u0674\3\2\2\2\u0672\u0670\3\2\2\2\u0672")
        buf.write("\u0673\3\2\2\2\u0673\u0089\3\2\2\2\u0674\u0672\3\2\2\2")
        buf.write("\u0675\u0681\5\u008cG\2\u0676\u067a\5\u00f2z\2\u0677\u0679")
        buf.write("\7\7\2\2\u0678\u0677\3\2\2\2\u0679\u067c\3\2\2\2\u067a")
        buf.write("\u0678\3\2\2\2\u067a\u067b\3\2\2\2\u067b\u067d\3\2\2\2")
        buf.write("\u067c\u067a\3\2\2\2\u067d\u067e\5\u008cG\2\u067e\u0680")
        buf.write("\3\2\2\2\u067f\u0676\3\2\2\2\u0680\u0683\3\2\2\2\u0681")
        buf.write("\u067f\3\2\2\2\u0681\u0682\3\2\2\2\u0682\u008b\3\2\2\2")
        buf.write("\u0683\u0681\3\2\2\2\u0684\u0690\5\u008eH\2\u0685\u0687")
        buf.write("\7\7\2\2\u0686\u0685\3\2\2\2\u0687\u068a\3\2\2\2\u0688")
        buf.write("\u0686\3\2\2\2\u0688\u0689\3\2\2\2\u0689\u068b\3\2\2\2")
        buf.write("\u068a\u0688\3\2\2\2\u068b\u068c\5\u00f4{\2\u068c\u068d")
        buf.write("\5\u008eH\2\u068d\u068f\3\2\2\2\u068e\u0688\3\2\2\2\u068f")
        buf.write("\u0692\3\2\2\2\u0690\u068e\3\2\2\2\u0690\u0691\3\2\2\2")
        buf.write("\u0691\u008d\3\2\2\2\u0692\u0690\3\2\2\2\u0693\u0695\5")
        buf.write("\u00f6|\2\u0694\u0693\3\2\2\2\u0695\u0698\3\2\2\2\u0696")
        buf.write("\u0694\3\2\2\2\u0696\u0697\3\2\2\2\u0697\u0699\3\2\2\2")
        buf.write("\u0698\u0696\3\2\2\2\u0699\u069a\5\u0090I\2\u069a\u008f")
        buf.write("\3\2\2\2\u069b\u069e\5\u0092J\2\u069c\u069e\5\u00e4s\2")
        buf.write("\u069d\u069b\3\2\2\2\u069d\u069c\3\2\2\2\u069e\u06a2\3")
        buf.write("\2\2\2\u069f\u06a1\5\u00f8}\2\u06a0\u069f\3\2\2\2\u06a1")
        buf.write("\u06a4\3\2\2\2\u06a2\u06a0\3\2\2\2\u06a2\u06a3\3\2\2\2")
        buf.write("\u06a3\u0091\3\2\2\2\u06a4\u06a2\3\2\2\2\u06a5\u06b2\5")
        buf.write("\u0094K\2\u06a6\u06b2\5\u00a6T\2\u06a7\u06b2\5\u00b6\\")
        buf.write("\2\u06a8\u06b2\5\u00c0a\2\u06a9\u06b2\5\u00c2b\2\u06aa")
        buf.write("\u06b2\5\u00c4c\2\u06ab\u06b2\5\u00d4k\2\u06ac\u06b2\5")
        buf.write("\u00bc_\2\u06ad\u06b2\5\u00e2r\2\u06ae\u06b2\5\u00dan")
        buf.write("\2\u06af\u06b2\5\u00be`\2\u06b0\u06b2\5\u0120\u0091\2")
        buf.write("\u06b1\u06a5\3\2\2\2\u06b1\u06a6\3\2\2\2\u06b1\u06a7\3")
        buf.write("\2\2\2\u06b1\u06a8\3\2\2\2\u06b1\u06a9\3\2\2\2\u06b1\u06aa")
        buf.write("\3\2\2\2\u06b1\u06ab\3\2\2\2\u06b1\u06ac\3\2\2\2\u06b1")
        buf.write("\u06ad\3\2\2\2\u06b1\u06ae\3\2\2\2\u06b1\u06af\3\2\2\2")
        buf.write("\u06b1\u06b0\3\2\2\2\u06b2\u0093\3\2\2\2\u06b3\u06b4\7")
        buf.write("\13\2\2\u06b4\u06b5\5v<\2\u06b5\u06b6\7\f\2\2\u06b6\u0095")
        buf.write("\3\2\2\2\u06b7\u06b9\5\u009eP\2\u06b8\u06ba\5\u009cO\2")
        buf.write("\u06b9\u06b8\3\2\2\2\u06b9\u06ba\3\2\2\2\u06ba\u06be\3")
        buf.write("\2\2\2\u06bb\u06bd\5\u0098M\2\u06bc\u06bb\3\2\2\2\u06bd")
        buf.write("\u06c0\3\2\2\2\u06be\u06bc\3\2\2\2\u06be\u06bf\3\2\2\2")
        buf.write("\u06bf\u06ce\3\2\2\2\u06c0\u06be\3\2\2\2\u06c1\u06c5\5")
        buf.write("\u009cO\2\u06c2\u06c4\5\u0098M\2\u06c3\u06c2\3\2\2\2\u06c4")
        buf.write("\u06c7\3\2\2\2\u06c5\u06c3\3\2\2\2\u06c5\u06c6\3\2\2\2")
        buf.write("\u06c6\u06ce\3\2\2\2\u06c7\u06c5\3\2\2\2\u06c8\u06ca\5")
        buf.write("\u0098M\2\u06c9\u06c8\3\2\2\2\u06ca\u06cb\3\2\2\2\u06cb")
        buf.write("\u06c9\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc\u06ce\3\2\2\2")
        buf.write("\u06cd\u06b7\3\2\2\2\u06cd\u06c1\3\2\2\2\u06cd\u06c9\3")
        buf.write("\2\2\2\u06ce\u0097\3\2\2\2\u06cf\u06d1\5\u011c\u008f\2")
        buf.write("\u06d0\u06cf\3\2\2\2\u06d1\u06d4\3\2\2\2\u06d2\u06d0\3")
        buf.write("\2\2\2\u06d2\u06d3\3\2\2\2\u06d3\u06d6\3\2\2\2\u06d4\u06d2")
        buf.write("\3\2\2\2\u06d5\u06d7\7\u0090\2\2\u06d6\u06d5\3\2\2\2\u06d6")
        buf.write("\u06d7\3\2\2\2\u06d7\u06db\3\2\2\2\u06d8\u06da\7\7\2\2")
        buf.write("\u06d9\u06d8\3\2\2\2\u06da\u06dd\3\2\2\2\u06db\u06d9\3")
        buf.write("\2\2\2\u06db\u06dc\3\2\2\2\u06dc\u06de\3\2\2\2\u06dd\u06db")
        buf.write("\3\2\2\2\u06de\u06df\5\u00b6\\\2\u06df\u0099\3\2\2\2\u06e0")
        buf.write("\u06e9\7\r\2\2\u06e1\u06e6\5v<\2\u06e2\u06e3\7\n\2\2\u06e3")
        buf.write("\u06e5\5v<\2\u06e4\u06e2\3\2\2\2\u06e5\u06e8\3\2\2\2\u06e6")
        buf.write("\u06e4\3\2\2\2\u06e6\u06e7\3\2\2\2\u06e7\u06ea\3\2\2\2")
        buf.write("\u06e8\u06e6\3\2\2\2\u06e9\u06e1\3\2\2\2\u06e9\u06ea\3")
        buf.write("\2\2\2\u06ea\u06eb\3\2\2\2\u06eb\u06ec\7\16\2\2\u06ec")
        buf.write("\u009b\3\2\2\2\u06ed\u06f6\7\13\2\2\u06ee\u06f3\5\u00a4")
        buf.write("S\2\u06ef\u06f0\7\n\2\2\u06f0\u06f2\5\u00a4S\2\u06f1\u06ef")
        buf.write("\3\2\2\2\u06f2\u06f5\3\2\2\2\u06f3\u06f1\3\2\2\2\u06f3")
        buf.write("\u06f4\3\2\2\2\u06f4\u06f7\3\2\2\2\u06f5\u06f3\3\2\2\2")
        buf.write("\u06f6\u06ee\3\2\2\2\u06f6\u06f7\3\2\2\2\u06f7\u06f8\3")
        buf.write("\2\2\2\u06f8\u06f9\7\f\2\2\u06f9\u009d\3\2\2\2\u06fa\u06fe")
        buf.write("\7-\2\2\u06fb\u06fd\7\7\2\2\u06fc\u06fb\3\2\2\2\u06fd")
        buf.write("\u0700\3\2\2\2\u06fe\u06fc\3\2\2\2\u06fe\u06ff\3\2\2\2")
        buf.write("\u06ff\u0701\3\2\2\2\u0700\u06fe\3\2\2\2\u0701\u070c\5")
        buf.write("\u00a0Q\2\u0702\u0704\7\7\2\2\u0703\u0702\3\2\2\2\u0704")
        buf.write("\u0707\3\2\2\2\u0705\u0703\3\2\2\2\u0705\u0706\3\2\2\2")
        buf.write("\u0706\u0708\3\2\2\2\u0707\u0705\3\2\2\2\u0708\u0709\7")
        buf.write("\n\2\2\u0709\u070b\5\u00a0Q\2\u070a\u0705\3\2\2\2\u070b")
        buf.write("\u070e\3\2\2\2\u070c\u070a\3\2\2\2\u070c\u070d\3\2\2\2")
        buf.write("\u070d\u0712\3\2\2\2\u070e\u070c\3\2\2\2\u070f\u0711\7")
        buf.write("\7\2\2\u0710\u070f\3\2\2\2\u0711\u0714\3\2\2\2\u0712\u0710")
        buf.write("\3\2\2\2\u0712\u0713\3\2\2\2\u0713\u0715\3\2\2\2\u0714")
        buf.write("\u0712\3\2\2\2\u0715\u0716\7.\2\2\u0716\u009f\3\2\2\2")
        buf.write("\u0717\u0719\5\u00a2R\2\u0718\u0717\3\2\2\2\u0718\u0719")
        buf.write("\3\2\2\2\u0719\u071a\3\2\2\2\u071a\u071d\5T+\2\u071b\u071d")
        buf.write("\7\21\2\2\u071c\u0718\3\2\2\2\u071c\u071b\3\2\2\2\u071d")
        buf.write("\u00a1\3\2\2\2\u071e\u0720\5\u0106\u0084\2\u071f\u071e")
        buf.write("\3\2\2\2\u0720\u0721\3\2\2\2\u0721\u071f\3\2\2\2\u0721")
        buf.write("\u0722\3\2\2\2\u0722\u00a3\3\2\2\2\u0723\u0727\5\u0120")
        buf.write("\u0091\2\u0724\u0726\7\7\2\2\u0725\u0724\3\2\2\2\u0726")
        buf.write("\u0729\3\2\2\2\u0727\u0725\3\2\2\2\u0727\u0728\3\2\2\2")
        buf.write("\u0728\u072a\3\2\2\2\u0729\u0727\3\2\2\2\u072a\u072e\7")
        buf.write("\35\2\2\u072b\u072d\7\7\2\2\u072c\u072b\3\2\2\2\u072d")
        buf.write("\u0730\3\2\2\2\u072e\u072c\3\2\2\2\u072e\u072f\3\2\2\2")
        buf.write("\u072f\u0732\3\2\2\2\u0730\u072e\3\2\2\2\u0731\u0723\3")
        buf.write("\2\2\2\u0731\u0732\3\2\2\2\u0732\u0734\3\2\2\2\u0733\u0735")
        buf.write("\7\21\2\2\u0734\u0733\3\2\2\2\u0734\u0735\3\2\2\2\u0735")
        buf.write("\u0739\3\2\2\2\u0736\u0738\7\7\2\2\u0737\u0736\3\2\2\2")
        buf.write("\u0738\u073b\3\2\2\2\u0739\u0737\3\2\2\2\u0739\u073a\3")
        buf.write("\2\2\2\u073a\u073c\3\2\2\2\u073b\u0739\3\2\2\2\u073c\u073d")
        buf.write("\5v<\2\u073d\u00a5\3\2\2\2\u073e\u0748\7\u008c\2\2\u073f")
        buf.write("\u0748\7\u0089\2\2\u0740\u0748\5\u00a8U\2\u0741\u0748")
        buf.write("\7\u008a\2\2\u0742\u0748\7\u008b\2\2\u0743\u0748\7\u0092")
        buf.write("\2\2\u0744\u0748\7\u0085\2\2\u0745\u0748\7\u008d\2\2\u0746")
        buf.write("\u0748\7\u0088\2\2\u0747\u073e\3\2\2\2\u0747\u073f\3\2")
        buf.write("\2\2\u0747\u0740\3\2\2\2\u0747\u0741\3\2\2\2\u0747\u0742")
        buf.write("\3\2\2\2\u0747\u0743\3\2\2\2\u0747\u0744\3\2\2\2\u0747")
        buf.write("\u0745\3\2\2\2\u0747\u0746\3\2\2\2\u0748\u00a7\3\2\2\2")
        buf.write("\u0749\u074c\5\u00aaV\2\u074a\u074c\5\u00acW\2\u074b\u0749")
        buf.write("\3\2\2\2\u074b\u074a\3\2\2\2\u074c\u00a9\3\2\2\2\u074d")
        buf.write("\u0752\7\u0083\2\2\u074e\u0751\5\u00aeX\2\u074f\u0751")
        buf.write("\5\u00b0Y\2\u0750\u074e\3\2\2\2\u0750\u074f\3\2\2\2\u0751")
        buf.write("\u0754\3\2\2\2\u0752\u0750\3\2\2\2\u0752\u0753\3\2\2\2")
        buf.write("\u0753\u0755\3\2\2\2\u0754\u0752\3\2\2\2\u0755\u0756\7")
        buf.write("\u009d\2\2\u0756\u00ab\3\2\2\2\u0757\u075e\7\u0084\2\2")
        buf.write("\u0758\u075d\5\u00b2Z\2\u0759\u075d\5\u00b4[\2\u075a\u075d")
        buf.write("\5\u00aaV\2\u075b\u075d\7\u00a3\2\2\u075c\u0758\3\2\2")
        buf.write("\2\u075c\u0759\3\2\2\2\u075c\u075a\3\2\2\2\u075c\u075b")
        buf.write("\3\2\2\2\u075d\u0760\3\2\2\2\u075e\u075c\3\2\2\2\u075e")
        buf.write("\u075f\3\2\2\2\u075f\u0761\3\2\2\2\u0760\u075e\3\2\2\2")
        buf.write("\u0761\u0762\7\u00a2\2\2\u0762\u00ad\3\2\2\2\u0763\u0764")
        buf.write("\t\5\2\2\u0764\u00af\3\2\2\2\u0765\u0766\7\u00a1\2\2\u0766")
        buf.write("\u0767\5v<\2\u0767\u0768\7\20\2\2\u0768\u00b1\3\2\2\2")
        buf.write("\u0769\u076a\t\6\2\2\u076a\u00b3\3\2\2\2\u076b\u076c\7")
        buf.write("\u00a7\2\2\u076c\u076d\5v<\2\u076d\u076e\7\20\2\2\u076e")
        buf.write("\u00b5\3\2\2\2\u076f\u0771\5\u0114\u008b\2\u0770\u076f")
        buf.write("\3\2\2\2\u0771\u0774\3\2\2\2\u0772\u0770\3\2\2\2\u0772")
        buf.write("\u0773\3\2\2\2\u0773\u07a3\3\2\2\2\u0774\u0772\3\2\2\2")
        buf.write("\u0775\u0779\7\17\2\2\u0776\u0778\7\7\2\2\u0777\u0776")
        buf.write("\3\2\2\2\u0778\u077b\3\2\2\2\u0779\u0777\3\2\2\2\u0779")
        buf.write("\u077a\3\2\2\2\u077a\u077c\3\2\2\2\u077b\u0779\3\2\2\2")
        buf.write("\u077c\u0780\5n8\2\u077d\u077f\7\7\2\2\u077e\u077d\3\2")
        buf.write("\2\2\u077f\u0782\3\2\2\2\u0780\u077e\3\2\2\2\u0780\u0781")
        buf.write("\3\2\2\2\u0781\u0783\3\2\2\2\u0782\u0780\3\2\2\2\u0783")
        buf.write("\u0784\7\20\2\2\u0784\u07a4\3\2\2\2\u0785\u0789\7\17\2")
        buf.write("\2\u0786\u0788\7\7\2\2\u0787\u0786\3\2\2\2\u0788\u078b")
        buf.write("\3\2\2\2\u0789\u0787\3\2\2\2\u0789\u078a\3\2\2\2\u078a")
        buf.write("\u078c\3\2\2\2\u078b\u0789\3\2\2\2\u078c\u0790\5\u00b8")
        buf.write("]\2\u078d\u078f\7\7\2\2\u078e\u078d\3\2\2\2\u078f\u0792")
        buf.write("\3\2\2\2\u0790\u078e\3\2\2\2\u0790\u0791\3\2\2\2\u0791")
        buf.write("\u0793\3\2\2\2\u0792\u0790\3\2\2\2\u0793\u0797\7#\2\2")
        buf.write("\u0794\u0796\7\7\2\2\u0795\u0794\3\2\2\2\u0796\u0799\3")
        buf.write("\2\2\2\u0797\u0795\3\2\2\2\u0797\u0798\3\2\2\2\u0798\u079a")
        buf.write("\3\2\2\2\u0799\u0797\3\2\2\2\u079a\u079e\5n8\2\u079b\u079d")
        buf.write("\7\7\2\2\u079c\u079b\3\2\2\2\u079d\u07a0\3\2\2\2\u079e")
        buf.write("\u079c\3\2\2\2\u079e\u079f\3\2\2\2\u079f\u07a1\3\2\2\2")
        buf.write("\u07a0\u079e\3\2\2\2\u07a1\u07a2\7\20\2\2\u07a2\u07a4")
        buf.write("\3\2\2\2\u07a3\u0775\3\2\2\2\u07a3\u0785\3\2\2\2\u07a4")
        buf.write("\u00b7\3\2\2\2\u07a5\u07a7\5\u00ba^\2\u07a6\u07a5\3\2")
        buf.write("\2\2\u07a6\u07a7\3\2\2\2\u07a7\u07b8\3\2\2\2\u07a8\u07aa")
        buf.write("\7\7\2\2\u07a9\u07a8\3\2\2\2\u07aa\u07ad\3\2\2\2\u07ab")
        buf.write("\u07a9\3\2\2\2\u07ab\u07ac\3\2\2\2\u07ac\u07ae\3\2\2\2")
        buf.write("\u07ad\u07ab\3\2\2\2\u07ae\u07b2\7\n\2\2\u07af\u07b1\7")
        buf.write("\7\2\2\u07b0\u07af\3\2\2\2\u07b1\u07b4\3\2\2\2\u07b2\u07b0")
        buf.write("\3\2\2\2\u07b2\u07b3\3\2\2\2\u07b3\u07b5\3\2\2\2\u07b4")
        buf.write("\u07b2\3\2\2\2\u07b5\u07b7\5\u00ba^\2\u07b6\u07ab\3\2")
        buf.write("\2\2\u07b7\u07ba\3\2\2\2\u07b8\u07b6\3\2\2\2\u07b8\u07b9")
        buf.write("\3\2\2\2\u07b9\u00b9\3\2\2\2\u07ba\u07b8\3\2\2\2\u07bb")
        buf.write("\u07ce\5H%\2\u07bc\u07cb\5F$\2\u07bd\u07bf\7\7\2\2\u07be")
        buf.write("\u07bd\3\2\2\2\u07bf\u07c2\3\2\2\2\u07c0\u07be\3\2\2\2")
        buf.write("\u07c0\u07c1\3\2\2\2\u07c1\u07c3\3\2\2\2\u07c2\u07c0\3")
        buf.write("\2\2\2\u07c3\u07c7\7\33\2\2\u07c4\u07c6\7\7\2\2\u07c5")
        buf.write("\u07c4\3\2\2\2\u07c6\u07c9\3\2\2\2\u07c7\u07c5\3\2\2\2")
        buf.write("\u07c7\u07c8\3\2\2\2\u07c8\u07ca\3\2\2\2\u07c9\u07c7\3")
        buf.write("\2\2\2\u07ca\u07cc\5T+\2\u07cb\u07c0\3\2\2\2\u07cb\u07cc")
        buf.write("\3\2\2\2\u07cc\u07ce\3\2\2\2\u07cd\u07bb\3\2\2\2\u07cd")
        buf.write("\u07bc\3\2\2\2\u07ce\u00bb\3\2\2\2\u07cf\u07de\7@\2\2")
        buf.write("\u07d0\u07d2\7\7\2\2\u07d1\u07d0\3\2\2\2\u07d2\u07d5\3")
        buf.write("\2\2\2\u07d3\u07d1\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4\u07d6")
        buf.write("\3\2\2\2\u07d5\u07d3\3\2\2\2\u07d6\u07da\7\33\2\2\u07d7")
        buf.write("\u07d9\7\7\2\2\u07d8\u07d7\3\2\2\2\u07d9\u07dc\3\2\2\2")
        buf.write("\u07da\u07d8\3\2\2\2\u07da\u07db\3\2\2\2\u07db\u07dd\3")
        buf.write("\2\2\2\u07dc\u07da\3\2\2\2\u07dd\u07df\5\36\20\2\u07de")
        buf.write("\u07d3\3\2\2\2\u07de\u07df\3\2\2\2\u07df\u07e3\3\2\2\2")
        buf.write("\u07e0\u07e2\7\7\2\2\u07e1\u07e0\3\2\2\2\u07e2\u07e5\3")
        buf.write("\2\2\2\u07e3\u07e1\3\2\2\2\u07e3\u07e4\3\2\2\2\u07e4\u07e6")
        buf.write("\3\2\2\2\u07e5\u07e3\3\2\2\2\u07e6\u07e7\5&\24\2\u07e7")
        buf.write("\u00bd\3\2\2\2\u07e8\u07ea\7\r\2\2\u07e9\u07eb\5v<\2\u07ea")
        buf.write("\u07e9\3\2\2\2\u07ea\u07eb\3\2\2\2\u07eb\u07f0\3\2\2\2")
        buf.write("\u07ec\u07ed\7\n\2\2\u07ed\u07ef\5v<\2\u07ee\u07ec\3\2")
        buf.write("\2\2\u07ef\u07f2\3\2\2\2\u07f0\u07ee\3\2\2\2\u07f0\u07f1")
        buf.write("\3\2\2\2\u07f1\u07f3\3\2\2\2\u07f2\u07f0\3\2\2\2\u07f3")
        buf.write("\u07f4\7\16\2\2\u07f4\u00bf\3\2\2\2\u07f5\u07f7\7H\2\2")
        buf.write("\u07f6\u07f8\7\u008f\2\2\u07f7\u07f6\3\2\2\2\u07f7\u07f8")
        buf.write("\3\2\2\2\u07f8\u00c1\3\2\2\2\u07f9\u080a\7I\2\2\u07fa")
        buf.write("\u07fe\7-\2\2\u07fb\u07fd\7\7\2\2\u07fc\u07fb\3\2\2\2")
        buf.write("\u07fd\u0800\3\2\2\2\u07fe\u07fc\3\2\2\2\u07fe\u07ff\3")
        buf.write("\2\2\2\u07ff\u0801\3\2\2\2\u0800\u07fe\3\2\2\2\u0801\u0805")
        buf.write("\5T+\2\u0802\u0804\7\7\2\2\u0803\u0802\3\2\2\2\u0804\u0807")
        buf.write("\3\2\2\2\u0805\u0803\3\2\2\2\u0805\u0806\3\2\2\2\u0806")
        buf.write("\u0808\3\2\2\2\u0807\u0805\3\2\2\2\u0808\u0809\7.\2\2")
        buf.write("\u0809\u080b\3\2\2\2\u080a\u07fa\3\2\2\2\u080a\u080b\3")
        buf.write("\2\2\2\u080b\u080d\3\2\2\2\u080c\u080e\7\u008f\2\2\u080d")
        buf.write("\u080c\3\2\2\2\u080d\u080e\3\2\2\2\u080e\u00c3\3\2\2\2")
        buf.write("\u080f\u0812\5\u00c6d\2\u0810\u0812\5\u00caf\2\u0811\u080f")
        buf.write("\3\2\2\2\u0811\u0810\3\2\2\2\u0812\u00c5\3\2\2\2\u0813")
        buf.write("\u0817\7L\2\2\u0814\u0816\7\7\2\2\u0815\u0814\3\2\2\2")
        buf.write("\u0816\u0819\3\2\2\2\u0817\u0815\3\2\2\2\u0817\u0818\3")
        buf.write("\2\2\2\u0818\u081a\3\2\2\2\u0819\u0817\3\2\2\2\u081a\u081b")
        buf.write("\7\13\2\2\u081b\u081c\5v<\2\u081c\u0820\7\f\2\2\u081d")
        buf.write("\u081f\7\7\2\2\u081e\u081d\3\2\2\2\u081f\u0822\3\2\2\2")
        buf.write("\u0820\u081e\3\2\2\2\u0820\u0821\3\2\2\2\u0821\u0824\3")
        buf.write("\2\2\2\u0822\u0820\3\2\2\2\u0823\u0825\5\u00c8e\2\u0824")
        buf.write("\u0823\3\2\2\2\u0824\u0825\3\2\2\2\u0825\u0827\3\2\2\2")
        buf.write("\u0826\u0828\7\34\2\2\u0827\u0826\3\2\2\2\u0827\u0828")
        buf.write("\3\2\2\2\u0828\u0839\3\2\2\2\u0829\u082b\7\7\2\2\u082a")
        buf.write("\u0829\3\2\2\2\u082b\u082e\3\2\2\2\u082c\u082a\3\2\2\2")
        buf.write("\u082c\u082d\3\2\2\2\u082d\u082f\3\2\2\2\u082e\u082c\3")
        buf.write("\2\2\2\u082f\u0833\7M\2\2\u0830\u0832\7\7\2\2\u0831\u0830")
        buf.write("\3\2\2\2\u0832\u0835\3\2\2\2\u0833\u0831\3\2\2\2\u0833")
        buf.write("\u0834\3\2\2\2\u0834\u0837\3\2\2\2\u0835\u0833\3\2\2\2")
        buf.write("\u0836\u0838\5\u00c8e\2\u0837\u0836\3\2\2\2\u0837\u0838")
        buf.write("\3\2\2\2\u0838\u083a\3\2\2\2\u0839\u082c\3\2\2\2\u0839")
        buf.write("\u083a\3\2\2\2\u083a\u00c7\3\2\2\2\u083b\u083e\5l\67\2")
        buf.write("\u083c\u083e\5v<\2\u083d\u083b\3\2\2\2\u083d\u083c\3\2")
        buf.write("\2\2\u083e\u00c9\3\2\2\2\u083f\u0843\7N\2\2\u0840\u0842")
        buf.write("\7\7\2\2\u0841\u0840\3\2\2\2\u0842\u0845\3\2\2\2\u0843")
        buf.write("\u0841\3\2\2\2\u0843\u0844\3\2\2\2\u0844\u084a\3\2\2\2")
        buf.write("\u0845\u0843\3\2\2\2\u0846\u0847\7\13\2\2\u0847\u0848")
        buf.write("\5v<\2\u0848\u0849\7\f\2\2\u0849\u084b\3\2\2\2\u084a\u0846")
        buf.write("\3\2\2\2\u084a\u084b\3\2\2\2\u084b\u084f\3\2\2\2\u084c")
        buf.write("\u084e\7\7\2\2\u084d\u084c\3\2\2\2\u084e\u0851\3\2\2\2")
        buf.write("\u084f\u084d\3\2\2\2\u084f\u0850\3\2\2\2\u0850\u0852\3")
        buf.write("\2\2\2\u0851\u084f\3\2\2\2\u0852\u0856\7\17\2\2\u0853")
        buf.write("\u0855\7\7\2\2\u0854\u0853\3\2\2\2\u0855\u0858\3\2\2\2")
        buf.write("\u0856\u0854\3\2\2\2\u0856\u0857\3\2\2\2\u0857\u0862\3")
        buf.write("\2\2\2\u0858\u0856\3\2\2\2\u0859\u085d\5\u00ccg\2\u085a")
        buf.write("\u085c\7\7\2\2\u085b\u085a\3\2\2\2\u085c\u085f\3\2\2\2")
        buf.write("\u085d\u085b\3\2\2\2\u085d\u085e\3\2\2\2\u085e\u0861\3")
        buf.write("\2\2\2\u085f\u085d\3\2\2\2\u0860\u0859\3\2\2\2\u0861\u0864")
        buf.write("\3\2\2\2\u0862\u0860\3\2\2\2\u0862\u0863\3\2\2\2\u0863")
        buf.write("\u0868\3\2\2\2\u0864\u0862\3\2\2\2\u0865\u0867\7\7\2\2")
        buf.write("\u0866\u0865\3\2\2\2\u0867\u086a\3\2\2\2\u0868\u0866\3")
        buf.write("\2\2\2\u0868\u0869\3\2\2\2\u0869\u086b\3\2\2\2\u086a\u0868")
        buf.write("\3\2\2\2\u086b\u086c\7\20\2\2\u086c\u00cb\3\2\2\2\u086d")
        buf.write("\u087e\5\u00ceh\2\u086e\u0870\7\7\2\2\u086f\u086e\3\2")
        buf.write("\2\2\u0870\u0873\3\2\2\2\u0871\u086f\3\2\2\2\u0871\u0872")
        buf.write("\3\2\2\2\u0872\u0874\3\2\2\2\u0873\u0871\3\2\2\2\u0874")
        buf.write("\u0878\7\n\2\2\u0875\u0877\7\7\2\2\u0876\u0875\3\2\2\2")
        buf.write("\u0877\u087a\3\2\2\2\u0878\u0876\3\2\2\2\u0878\u0879\3")
        buf.write("\2\2\2\u0879\u087b\3\2\2\2\u087a\u0878\3\2\2\2\u087b\u087d")
        buf.write("\5\u00ceh\2\u087c\u0871\3\2\2\2\u087d\u0880\3\2\2\2\u087e")
        buf.write("\u087c\3\2\2\2\u087e\u087f\3\2\2\2\u087f\u0884\3\2\2\2")
        buf.write("\u0880\u087e\3\2\2\2\u0881\u0883\7\7\2\2\u0882\u0881\3")
        buf.write("\2\2\2\u0883\u0886\3\2\2\2\u0884\u0882\3\2\2\2\u0884\u0885")
        buf.write("\3\2\2\2\u0885\u0887\3\2\2\2\u0886\u0884\3\2\2\2\u0887")
        buf.write("\u088b\7#\2\2\u0888\u088a\7\7\2\2\u0889\u0888\3\2\2\2")
        buf.write("\u088a\u088d\3\2\2\2\u088b\u0889\3\2\2\2\u088b\u088c\3")
        buf.write("\2\2\2\u088c\u088e\3\2\2\2\u088d\u088b\3\2\2\2\u088e\u0890")
        buf.write("\5\u00c8e\2\u088f\u0891\5\u0122\u0092\2\u0890\u088f\3")
        buf.write("\2\2\2\u0890\u0891\3\2\2\2\u0891\u08a2\3\2\2\2\u0892\u0896")
        buf.write("\7M\2\2\u0893\u0895\7\7\2\2\u0894\u0893\3\2\2\2\u0895")
        buf.write("\u0898\3\2\2\2\u0896\u0894\3\2\2\2\u0896\u0897\3\2\2\2")
        buf.write("\u0897\u0899\3\2\2\2\u0898\u0896\3\2\2\2\u0899\u089d\7")
        buf.write("#\2\2\u089a\u089c\7\7\2\2\u089b\u089a\3\2\2\2\u089c\u089f")
        buf.write("\3\2\2\2\u089d\u089b\3\2\2\2\u089d\u089e\3\2\2\2\u089e")
        buf.write("\u08a0\3\2\2\2\u089f\u089d\3\2\2\2\u08a0\u08a2\5\u00c8")
        buf.write("e\2\u08a1\u086d\3\2\2\2\u08a1\u0892\3\2\2\2\u08a2\u00cd")
        buf.write("\3\2\2\2\u08a3\u08a7\5v<\2\u08a4\u08a7\5\u00d0i\2\u08a5")
        buf.write("\u08a7\5\u00d2j\2\u08a6\u08a3\3\2\2\2\u08a6\u08a4\3\2")
        buf.write("\2\2\u08a6\u08a5\3\2\2\2\u08a7\u00cf\3\2\2\2\u08a8\u08ac")
        buf.write("\5\u00ecw\2\u08a9\u08ab\7\7\2\2\u08aa\u08a9\3\2\2\2\u08ab")
        buf.write("\u08ae\3\2\2\2\u08ac\u08aa\3\2\2\2\u08ac\u08ad\3\2\2\2")
        buf.write("\u08ad\u08af\3\2\2\2\u08ae\u08ac\3\2\2\2\u08af\u08b0\5")
        buf.write("v<\2\u08b0\u00d1\3\2\2\2\u08b1\u08b5\5\u00eex\2\u08b2")
        buf.write("\u08b4\7\7\2\2\u08b3\u08b2\3\2\2\2\u08b4\u08b7\3\2\2\2")
        buf.write("\u08b5\u08b3\3\2\2\2\u08b5\u08b6\3\2\2\2\u08b6\u08b8\3")
        buf.write("\2\2\2\u08b7\u08b5\3\2\2\2\u08b8\u08b9\5T+\2\u08b9\u00d3")
        buf.write("\3\2\2\2\u08ba\u08be\7O\2\2\u08bb\u08bd\7\7\2\2\u08bc")
        buf.write("\u08bb\3\2\2\2\u08bd\u08c0\3\2\2\2\u08be\u08bc\3\2\2\2")
        buf.write("\u08be\u08bf\3\2\2\2\u08bf\u08c1\3\2\2\2\u08c0\u08be\3")
        buf.write("\2\2\2\u08c1\u08cb\5l\67\2\u08c2\u08c4\7\7\2\2\u08c3\u08c2")
        buf.write("\3\2\2\2\u08c4\u08c7\3\2\2\2\u08c5\u08c3\3\2\2\2\u08c5")
        buf.write("\u08c6\3\2\2\2\u08c6\u08c8\3\2\2\2\u08c7\u08c5\3\2\2\2")
        buf.write("\u08c8\u08ca\5\u00d6l\2\u08c9\u08c5\3\2\2\2\u08ca\u08cd")
        buf.write("\3\2\2\2\u08cb\u08c9\3\2\2\2\u08cb\u08cc\3\2\2\2\u08cc")
        buf.write("\u08d5\3\2\2\2\u08cd\u08cb\3\2\2\2\u08ce\u08d0\7\7\2\2")
        buf.write("\u08cf\u08ce\3\2\2\2\u08d0\u08d3\3\2\2\2\u08d1\u08cf\3")
        buf.write("\2\2\2\u08d1\u08d2\3\2\2\2\u08d2\u08d4\3\2\2\2\u08d3\u08d1")
        buf.write("\3\2\2\2\u08d4\u08d6\5\u00d8m\2\u08d5\u08d1\3\2\2\2\u08d5")
        buf.write("\u08d6\3\2\2\2\u08d6\u00d5\3\2\2\2\u08d7\u08db\7P\2\2")
        buf.write("\u08d8\u08da\7\7\2\2\u08d9\u08d8\3\2\2\2\u08da\u08dd\3")
        buf.write("\2\2\2\u08db\u08d9\3\2\2\2\u08db\u08dc\3\2\2\2\u08dc\u08de")
        buf.write("\3\2\2\2\u08dd\u08db\3\2\2\2\u08de\u08e2\7\13\2\2\u08df")
        buf.write("\u08e1\5\u0114\u008b\2\u08e0\u08df\3\2\2\2\u08e1\u08e4")
        buf.write("\3\2\2\2\u08e2\u08e0\3\2\2\2\u08e2\u08e3\3\2\2\2\u08e3")
        buf.write("\u08e5\3\2\2\2\u08e4\u08e2\3\2\2\2\u08e5\u08e6\5\u0120")
        buf.write("\u0091\2\u08e6\u08e7\7\33\2\2\u08e7\u08e8\5b\62\2\u08e8")
        buf.write("\u08ec\7\f\2\2\u08e9\u08eb\7\7\2\2\u08ea\u08e9\3\2\2\2")
        buf.write("\u08eb\u08ee\3\2\2\2\u08ec\u08ea\3\2\2\2\u08ec\u08ed\3")
        buf.write("\2\2\2\u08ed\u08ef\3\2\2\2\u08ee\u08ec\3\2\2\2\u08ef\u08f0")
        buf.write("\5l\67\2\u08f0\u00d7\3\2\2\2\u08f1\u08f5\7Q\2\2\u08f2")
        buf.write("\u08f4\7\7\2\2\u08f3\u08f2\3\2\2\2\u08f4\u08f7\3\2\2\2")
        buf.write("\u08f5\u08f3\3\2\2\2\u08f5\u08f6\3\2\2\2\u08f6\u08f8\3")
        buf.write("\2\2\2\u08f7\u08f5\3\2\2\2\u08f8\u08f9\5l\67\2\u08f9\u00d9")
        buf.write("\3\2\2\2\u08fa\u08fe\5\u00dco\2\u08fb\u08fe\5\u00dep\2")
        buf.write("\u08fc\u08fe\5\u00e0q\2\u08fd\u08fa\3\2\2\2\u08fd\u08fb")
        buf.write("\3\2\2\2\u08fd\u08fc\3\2\2\2\u08fe\u00db\3\2\2\2\u08ff")
        buf.write("\u0903\7R\2\2\u0900\u0902\7\7\2\2\u0901\u0900\3\2\2\2")
        buf.write("\u0902\u0905\3\2\2\2\u0903\u0901\3\2\2\2\u0903\u0904\3")
        buf.write("\2\2\2\u0904\u0906\3\2\2\2\u0905\u0903\3\2\2\2\u0906\u090a")
        buf.write("\7\13\2\2\u0907\u0909\5\u0114\u008b\2\u0908\u0907\3\2")
        buf.write("\2\2\u0909\u090c\3\2\2\2\u090a\u0908\3\2\2\2\u090a\u090b")
        buf.write("\3\2\2\2\u090b\u090f\3\2\2\2\u090c\u090a\3\2\2\2\u090d")
        buf.write("\u0910\5H%\2\u090e\u0910\5F$\2\u090f\u090d\3\2\2\2\u090f")
        buf.write("\u090e\3\2\2\2\u0910\u0911\3\2\2\2\u0911\u0912\7[\2\2")
        buf.write("\u0912\u0913\5v<\2\u0913\u0917\7\f\2\2\u0914\u0916\7\7")
        buf.write("\2\2\u0915\u0914\3\2\2\2\u0916\u0919\3\2\2\2\u0917\u0915")
        buf.write("\3\2\2\2\u0917\u0918\3\2\2\2\u0918\u091b\3\2\2\2\u0919")
        buf.write("\u0917\3\2\2\2\u091a\u091c\5\u00c8e\2\u091b\u091a\3\2")
        buf.write("\2\2\u091b\u091c\3\2\2\2\u091c\u00dd\3\2\2\2\u091d\u0921")
        buf.write("\7T\2\2\u091e\u0920\7\7\2\2\u091f\u091e\3\2\2\2\u0920")
        buf.write("\u0923\3\2\2\2\u0921\u091f\3\2\2\2\u0921\u0922\3\2\2\2")
        buf.write("\u0922\u0924\3\2\2\2\u0923\u0921\3\2\2\2\u0924\u0925\7")
        buf.write("\13\2\2\u0925\u0926\5v<\2\u0926\u092a\7\f\2\2\u0927\u0929")
        buf.write("\7\7\2\2\u0928\u0927\3\2\2\2\u0929\u092c\3\2\2\2\u092a")
        buf.write("\u0928\3\2\2\2\u092a\u092b\3\2\2\2\u092b\u092e\3\2\2\2")
        buf.write("\u092c\u092a\3\2\2\2\u092d\u092f\5\u00c8e\2\u092e\u092d")
        buf.write("\3\2\2\2\u092e\u092f\3\2\2\2\u092f\u00df\3\2\2\2\u0930")
        buf.write("\u0934\7S\2\2\u0931\u0933\7\7\2\2\u0932\u0931\3\2\2\2")
        buf.write("\u0933\u0936\3\2\2\2\u0934\u0932\3\2\2\2\u0934\u0935\3")
        buf.write("\2\2\2\u0935\u0938\3\2\2\2\u0936\u0934\3\2\2\2\u0937\u0939")
        buf.write("\5\u00c8e\2\u0938\u0937\3\2\2\2\u0938\u0939\3\2\2\2\u0939")
        buf.write("\u093d\3\2\2\2\u093a\u093c\7\7\2\2\u093b\u093a\3\2\2\2")
        buf.write("\u093c\u093f\3\2\2\2\u093d\u093b\3\2\2\2\u093d\u093e\3")
        buf.write("\2\2\2\u093e\u0940\3\2\2\2\u093f\u093d\3\2\2\2\u0940\u0944")
        buf.write("\7T\2\2\u0941\u0943\7\7\2\2\u0942\u0941\3\2\2\2\u0943")
        buf.write("\u0946\3\2\2\2\u0944\u0942\3\2\2\2\u0944\u0945\3\2\2\2")
        buf.write("\u0945\u0947\3\2\2\2\u0946\u0944\3\2\2\2\u0947\u0948\7")
        buf.write("\13\2\2\u0948\u0949\5v<\2\u0949\u094a\7\f\2\2\u094a\u00e1")
        buf.write("\3\2\2\2\u094b\u094f\7U\2\2\u094c\u094e\7\7\2\2\u094d")
        buf.write("\u094c\3\2\2\2\u094e\u0951\3\2\2\2\u094f\u094d\3\2\2\2")
        buf.write("\u094f\u0950\3\2\2\2\u0950\u0952\3\2\2\2\u0951\u094f\3")
        buf.write("\2\2\2\u0952\u095c\5v<\2\u0953\u0955\t\7\2\2\u0954\u0956")
        buf.write("\5v<\2\u0955\u0954\3\2\2\2\u0955\u0956\3\2\2\2\u0956\u095c")
        buf.write("\3\2\2\2\u0957\u095c\7W\2\2\u0958\u095c\78\2\2\u0959\u095c")
        buf.write("\7X\2\2\u095a\u095c\79\2\2\u095b\u094b\3\2\2\2\u095b\u0953")
        buf.write("\3\2\2\2\u095b\u0957\3\2\2\2\u095b\u0958\3\2\2\2\u095b")
        buf.write("\u0959\3\2\2\2\u095b\u095a\3\2\2\2\u095c\u00e3\3\2\2\2")
        buf.write("\u095d\u0967\5b\62\2\u095e\u0962\7+\2\2\u095f\u0961\7")
        buf.write("\7\2\2\u0960\u095f\3\2\2\2\u0961\u0964\3\2\2\2\u0962\u0960")
        buf.write("\3\2\2\2\u0962\u0963\3\2\2\2\u0963\u0966\3\2\2\2\u0964")
        buf.write("\u0962\3\2\2\2\u0965\u095e\3\2\2\2\u0966\u0969\3\2\2\2")
        buf.write("\u0967\u0965\3\2\2\2\u0967\u0968\3\2\2\2\u0968\u096b\3")
        buf.write("\2\2\2\u0969\u0967\3\2\2\2\u096a\u095d\3\2\2\2\u096a\u096b")
        buf.write("\3\2\2\2\u096b\u096f\3\2\2\2\u096c\u096e\7\7\2\2\u096d")
        buf.write("\u096c\3\2\2\2\u096e\u0971\3\2\2\2\u096f\u096d\3\2\2\2")
        buf.write("\u096f\u0970\3\2\2\2\u0970\u0972\3\2\2\2\u0971\u096f\3")
        buf.write("\2\2\2\u0972\u0976\t\b\2\2\u0973\u0975\7\7\2\2\u0974\u0973")
        buf.write("\3\2\2\2\u0975\u0978\3\2\2\2\u0976\u0974\3\2\2\2\u0976")
        buf.write("\u0977\3\2\2\2\u0977\u097b\3\2\2\2\u0978\u0976\3\2\2\2")
        buf.write("\u0979\u097c\5\u011e\u0090\2\u097a\u097c\7=\2\2\u097b")
        buf.write("\u0979\3\2\2\2\u097b\u097a\3\2\2\2\u097c\u00e5\3\2\2\2")
        buf.write("\u097d\u097e\t\t\2\2\u097e\u00e7\3\2\2\2\u097f\u0980\t")
        buf.write("\n\2\2\u0980\u00e9\3\2\2\2\u0981\u0982\t\13\2\2\u0982")
        buf.write("\u00eb\3\2\2\2\u0983\u0984\t\f\2\2\u0984\u00ed\3\2\2\2")
        buf.write("\u0985\u0986\t\r\2\2\u0986\u00ef\3\2\2\2\u0987\u0988\t")
        buf.write("\16\2\2\u0988\u00f1\3\2\2\2\u0989\u098a\t\17\2\2\u098a")
        buf.write("\u00f3\3\2\2\2\u098b\u098c\t\20\2\2\u098c\u00f5\3\2\2")
        buf.write("\2\u098d\u0995\7\26\2\2\u098e\u0995\7\27\2\2\u098f\u0995")
        buf.write("\7\24\2\2\u0990\u0995\7\25\2\2\u0991\u0995\7\32\2\2\u0992")
        buf.write("\u0995\5\u0114\u008b\2\u0993\u0995\5\u0112\u008a\2\u0994")
        buf.write("\u098d\3\2\2\2\u0994\u098e\3\2\2\2\u0994\u098f\3\2\2\2")
        buf.write("\u0994\u0990\3\2\2\2\u0994\u0991\3\2\2\2\u0994\u0992\3")
        buf.write("\2\2\2\u0994\u0993\3\2\2\2\u0995\u00f7\3\2\2\2\u0996\u09a6")
        buf.write("\7\26\2\2\u0997\u09a6\7\27\2\2\u0998\u0999\7\32\2\2\u0999")
        buf.write("\u09a6\7\32\2\2\u099a\u09a6\5\u0096L\2\u099b\u09a6\5\u009a")
        buf.write("N\2\u099c\u099e\7\7\2\2\u099d\u099c\3\2\2\2\u099e\u09a1")
        buf.write("\3\2\2\2\u099f\u099d\3\2\2\2\u099f\u09a0\3\2\2\2\u09a0")
        buf.write("\u09a2\3\2\2\2\u09a1\u099f\3\2\2\2\u09a2\u09a3\5\u00fa")
        buf.write("~\2\u09a3\u09a4\5\u0090I\2\u09a4\u09a6\3\2\2\2\u09a5\u0996")
        buf.write("\3\2\2\2\u09a5\u0997\3\2\2\2\u09a5\u0998\3\2\2\2\u09a5")
        buf.write("\u099a\3\2\2\2\u09a5\u099b\3\2\2\2\u09a5\u099f\3\2\2\2")
        buf.write("\u09a6\u00f9\3\2\2\2\u09a7\u09ab\7\t\2\2\u09a8\u09a9\7")
        buf.write("+\2\2\u09a9\u09ab\7\t\2\2\u09aa\u09a7\3\2\2\2\u09aa\u09a8")
        buf.write("\3\2\2\2\u09ab\u00fb\3\2\2\2\u09ac\u09af\5\u0114\u008b")
        buf.write("\2\u09ad\u09af\5\u00fe\u0080\2\u09ae\u09ac\3\2\2\2\u09ae")
        buf.write("\u09ad\3\2\2\2\u09af\u09b0\3\2\2\2\u09b0\u09ae\3\2\2\2")
        buf.write("\u09b0\u09b1\3\2\2\2\u09b1\u00fd\3\2\2\2\u09b2\u09bc\5")
        buf.write("\u0100\u0081\2\u09b3\u09bc\5\u0102\u0082\2\u09b4\u09bc")
        buf.write("\5\u0104\u0083\2\u09b5\u09bc\5\u0106\u0084\2\u09b6\u09bc")
        buf.write("\5\u0108\u0085\2\u09b7\u09bc\5\u010a\u0086\2\u09b8\u09bc")
        buf.write("\5\u010c\u0087\2\u09b9\u09bc\5\u010e\u0088\2\u09ba\u09bc")
        buf.write("\5\u0110\u0089\2\u09bb\u09b2\3\2\2\2\u09bb\u09b3\3\2\2")
        buf.write("\2\u09bb\u09b4\3\2\2\2\u09bb\u09b5\3\2\2\2\u09bb\u09b6")
        buf.write("\3\2\2\2\u09bb\u09b7\3\2\2\2\u09bb\u09b8\3\2\2\2\u09bb")
        buf.write("\u09b9\3\2\2\2\u09bb\u09ba\3\2\2\2\u09bc\u09c0\3\2\2\2")
        buf.write("\u09bd\u09bf\7\7\2\2\u09be\u09bd\3\2\2\2\u09bf\u09c2\3")
        buf.write("\2\2\2\u09c0\u09be\3\2\2\2\u09c0\u09c1\3\2\2\2\u09c1\u00ff")
        buf.write("\3\2\2\2\u09c2\u09c0\3\2\2\2\u09c3\u09c4\t\21\2\2\u09c4")
        buf.write("\u0101\3\2\2\2\u09c5\u09c6\t\22\2\2\u09c6\u0103\3\2\2")
        buf.write("\2\u09c7\u09c8\t\23\2\2\u09c8\u0105\3\2\2\2\u09c9\u09ca")
        buf.write("\t\24\2\2\u09ca\u0107\3\2\2\2\u09cb\u09cc\t\25\2\2\u09cc")
        buf.write("\u0109\3\2\2\2\u09cd\u09ce\7}\2\2\u09ce\u010b\3\2\2\2")
        buf.write("\u09cf\u09d0\t\26\2\2\u09d0\u010d\3\2\2\2\u09d1\u09d2")
        buf.write("\t\27\2\2\u09d2\u010f\3\2\2\2\u09d3\u09d4\7\u0082\2\2")
        buf.write("\u09d4\u0111\3\2\2\2\u09d5\u09d9\7\u0090\2\2\u09d6\u09d8")
        buf.write("\7\7\2\2\u09d7\u09d6\3\2\2\2\u09d8\u09db\3\2\2\2\u09d9")
        buf.write("\u09d7\3\2\2\2\u09d9\u09da\3\2\2\2\u09da\u0113\3\2\2\2")
        buf.write("\u09db\u09d9\3\2\2\2\u09dc\u09df\5\u0116\u008c\2\u09dd")
        buf.write("\u09df\5\u0118\u008d\2\u09de\u09dc\3\2\2\2\u09de\u09dd")
        buf.write("\3\2\2\2\u09df\u09e3\3\2\2\2\u09e0\u09e2\7\7\2\2\u09e1")
        buf.write("\u09e0\3\2\2\2\u09e2\u09e5\3\2\2\2\u09e3\u09e1\3\2\2\2")
        buf.write("\u09e3\u09e4\3\2\2\2\u09e4\u0115\3\2\2\2\u09e5\u09e3\3")
        buf.write("\2\2\2\u09e6\u09ea\5\u011a\u008e\2\u09e7\u09e9\7\7\2\2")
        buf.write("\u09e8\u09e7\3\2\2\2\u09e9\u09ec\3\2\2\2\u09ea\u09e8\3")
        buf.write("\2\2\2\u09ea\u09eb\3\2\2\2\u09eb\u09ed\3\2\2\2\u09ec\u09ea")
        buf.write("\3\2\2\2\u09ed\u09f1\7\33\2\2\u09ee\u09f0\7\7\2\2\u09ef")
        buf.write("\u09ee\3\2\2\2\u09f0\u09f3\3\2\2\2\u09f1\u09ef\3\2\2\2")
        buf.write("\u09f1\u09f2\3\2\2\2\u09f2\u09f4\3\2\2\2\u09f3\u09f1\3")
        buf.write("\2\2\2\u09f4\u09f5\5\u011c\u008f\2\u09f5\u0a0a\3\2\2\2")
        buf.write("\u09f6\u09fe\7\u008f\2\2\u09f7\u09f9\7\7\2\2\u09f8\u09f7")
        buf.write("\3\2\2\2\u09f9\u09fc\3\2\2\2\u09fa\u09f8\3\2\2\2\u09fa")
        buf.write("\u09fb\3\2\2\2\u09fb\u09fd\3\2\2\2\u09fc\u09fa\3\2\2\2")
        buf.write("\u09fd\u09ff\5\u009eP\2\u09fe\u09fa\3\2\2\2\u09fe\u09ff")
        buf.write("\3\2\2\2\u09ff\u0a07\3\2\2\2\u0a00\u0a02\7\7\2\2\u0a01")
        buf.write("\u0a00\3\2\2\2\u0a02\u0a05\3\2\2\2\u0a03\u0a01\3\2\2\2")
        buf.write("\u0a03\u0a04\3\2\2\2\u0a04\u0a06\3\2\2\2\u0a05\u0a03\3")
        buf.write("\2\2\2\u0a06\u0a08\5\u009cO\2\u0a07\u0a03\3\2\2\2\u0a07")
        buf.write("\u0a08\3\2\2\2\u0a08\u0a0a\3\2\2\2\u0a09\u09e6\3\2\2\2")
        buf.write("\u0a09\u09f6\3\2\2\2\u0a0a\u0117\3\2\2\2\u0a0b\u0a0c\5")
        buf.write("\u011a\u008e\2\u0a0c\u0a0d\7\33\2\2\u0a0d\u0a0f\7\r\2")
        buf.write("\2\u0a0e\u0a10\5\u011c\u008f\2\u0a0f\u0a0e\3\2\2\2\u0a10")
        buf.write("\u0a11\3\2\2\2\u0a11\u0a0f\3\2\2\2\u0a11\u0a12\3\2\2\2")
        buf.write("\u0a12\u0a13\3\2\2\2\u0a13\u0a14\7\16\2\2\u0a14\u0a1f")
        buf.write("\3\2\2\2\u0a15\u0a16\7*\2\2\u0a16\u0a18\7\r\2\2\u0a17")
        buf.write("\u0a19\5\u011c\u008f\2\u0a18\u0a17\3\2\2\2\u0a19\u0a1a")
        buf.write("\3\2\2\2\u0a1a\u0a18\3\2\2\2\u0a1a\u0a1b\3\2\2\2\u0a1b")
        buf.write("\u0a1c\3\2\2\2\u0a1c\u0a1d\7\16\2\2\u0a1d\u0a1f\3\2\2")
        buf.write("\2\u0a1e\u0a0b\3\2\2\2\u0a1e\u0a15\3\2\2\2\u0a1f\u0119")
        buf.write("\3\2\2\2\u0a20\u0a21\t\30\2\2\u0a21\u011b\3\2\2\2\u0a22")
        buf.write("\u0a24\5\u011e\u0090\2\u0a23\u0a25\5\u009eP\2\u0a24\u0a23")
        buf.write("\3\2\2\2\u0a24\u0a25\3\2\2\2\u0a25\u0a27\3\2\2\2\u0a26")
        buf.write("\u0a28\5\u009cO\2\u0a27\u0a26\3\2\2\2\u0a27\u0a28\3\2")
        buf.write("\2\2\u0a28\u011d\3\2\2\2\u0a29\u0a34\5\u0120\u0091\2\u0a2a")
        buf.write("\u0a2c\7\7\2\2\u0a2b\u0a2a\3\2\2\2\u0a2c\u0a2f\3\2\2\2")
        buf.write("\u0a2d\u0a2b\3\2\2\2\u0a2d\u0a2e\3\2\2\2\u0a2e\u0a30\3")
        buf.write("\2\2\2\u0a2f\u0a2d\3\2\2\2\u0a30\u0a31\7\t\2\2\u0a31\u0a33")
        buf.write("\5\u0120\u0091\2\u0a32\u0a2d\3\2\2\2\u0a33\u0a36\3\2\2")
        buf.write("\2\u0a34\u0a32\3\2\2\2\u0a34\u0a35\3\2\2\2\u0a35\u011f")
        buf.write("\3\2\2\2\u0a36\u0a34\3\2\2\2\u0a37\u0a38\t\31\2\2\u0a38")
        buf.write("\u0121\3\2\2\2\u0a39\u0a3b\7\7\2\2\u0a3a\u0a39\3\2\2\2")
        buf.write("\u0a3b\u0a3c\3\2\2\2\u0a3c\u0a3a\3\2\2\2\u0a3c\u0a3d\3")
        buf.write("\2\2\2\u0a3d\u0a4c\3\2\2\2\u0a3e\u0a40\7\7\2\2\u0a3f\u0a3e")
        buf.write("\3\2\2\2\u0a40\u0a43\3\2\2\2\u0a41\u0a3f\3\2\2\2\u0a41")
        buf.write("\u0a42\3\2\2\2\u0a42\u0a44\3\2\2\2\u0a43\u0a41\3\2\2\2")
        buf.write("\u0a44\u0a48\7\34\2\2\u0a45\u0a47\7\7\2\2\u0a46\u0a45")
        buf.write("\3\2\2\2\u0a47\u0a4a\3\2\2\2\u0a48\u0a46\3\2\2\2\u0a48")
        buf.write("\u0a49\3\2\2\2\u0a49\u0a4c\3\2\2\2\u0a4a\u0a48\3\2\2\2")
        buf.write("\u0a4b\u0a3a\3\2\2\2\u0a4b\u0a41\3\2\2\2\u0a4c\u0123\3")
        buf.write("\2\2\2\u0a4d\u0a4e\t\32\2\2\u0a4e\u0125\3\2\2\2\u018e")
        buf.write("\u0129\u0130\u0137\u013a\u013e\u0141\u0148\u014f\u0156")
        buf.write("\u0159\u015d\u0160\u0165\u016d\u0175\u017a\u017d\u0181")
        buf.write("\u0184\u0189\u018b\u0190\u0198\u019b\u01a5\u01a8\u01ae")
        buf.write("\u01b5\u01b9\u01be\u01c2\u01c7\u01ce\u01d2\u01d7\u01db")
        buf.write("\u01e0\u01e7\u01eb\u01ee\u01f4\u01f7\u0201\u0204\u0209")
        buf.write("\u020c\u0213\u0218\u021f\u0226\u022c\u0232\u023b\u0242")
        buf.write("\u024b\u0251\u0257\u0264\u0269\u0270\u0276\u027c\u0283")
        buf.write("\u028a\u028e\u0293\u029c\u02a4\u02a8\u02ae\u02b2\u02b7")
        buf.write("\u02be\u02c4\u02c7\u02cc\u02d5\u02da\u02dd\u02e3\u02e7")
        buf.write("\u02ec\u02f0\u02f5\u02f9\u02fc\u0302\u0309\u030e\u0313")
        buf.write("\u0317\u031c\u0320\u0325\u032c\u0333\u0337\u033c\u0340")
        buf.write("\u0345\u0349\u0351\u0354\u0359\u035e\u0369\u036d\u0370")
        buf.write("\u0376\u037d\u0381\u0386\u038d\u0391\u0396\u039a\u039d")
        buf.write("\u03a3\u03a7\u03ad\u03b1\u03b6\u03bd\u03c1\u03c6\u03ca")
        buf.write("\u03cd\u03d3\u03d7\u03dc\u03e3\u03e8\u03ed\u03f2\u03f7")
        buf.write("\u03fb\u0400\u0407\u040b\u0411\u0417\u0419\u0421\u0429")
        buf.write("\u042c\u0430\u0436\u043e\u0445\u0449\u044e\u0456\u045a")
        buf.write("\u045c\u045f\u0463\u0469\u046f\u0471\u0476\u047c\u0481")
        buf.write("\u0484\u048a\u0491\u0495\u049a\u04a1\u04aa\u04b1\u04b8")
        buf.write("\u04be\u04c4\u04ca\u04cf\u04d6\u04dd\u04e1\u04e4\u04ea")
        buf.write("\u04f1\u04f4\u04f6\u04fe\u0503\u0509\u0511\u0517\u051e")
        buf.write("\u0521\u0527\u052e\u0536\u053c\u0543\u0549\u0550\u0554")
        buf.write("\u0559\u055e\u0562\u056b\u0572\u0579\u057f\u0585\u058c")
        buf.write("\u0593\u059f\u05a6\u05a9\u05ad\u05b0\u05b4\u05b9\u05bf")
        buf.write("\u05c7\u05ce\u05d6\u05dd\u05e4\u05ea\u05f1\u05f8\u05fe")
        buf.write("\u0606\u060d\u0615\u061a\u0621\u0628\u062e\u0633\u0639")
        buf.write("\u0640\u0646\u064e\u0655\u065d\u0663\u066b\u0672\u067a")
        buf.write("\u0681\u0688\u0690\u0696\u069d\u06a2\u06b1\u06b9\u06be")
        buf.write("\u06c5\u06cb\u06cd\u06d2\u06d6\u06db\u06e6\u06e9\u06f3")
        buf.write("\u06f6\u06fe\u0705\u070c\u0712\u0718\u071c\u0721\u0727")
        buf.write("\u072e\u0731\u0734\u0739\u0747\u074b\u0750\u0752\u075c")
        buf.write("\u075e\u0772\u0779\u0780\u0789\u0790\u0797\u079e\u07a3")
        buf.write("\u07a6\u07ab\u07b2\u07b8\u07c0\u07c7\u07cb\u07cd\u07d3")
        buf.write("\u07da\u07de\u07e3\u07ea\u07f0\u07f7\u07fe\u0805\u080a")
        buf.write("\u080d\u0811\u0817\u0820\u0824\u0827\u082c\u0833\u0837")
        buf.write("\u0839\u083d\u0843\u084a\u084f\u0856\u085d\u0862\u0868")
        buf.write("\u0871\u0878\u087e\u0884\u088b\u0890\u0896\u089d\u08a1")
        buf.write("\u08a6\u08ac\u08b5\u08be\u08c5\u08cb\u08d1\u08d5\u08db")
        buf.write("\u08e2\u08ec\u08f5\u08fd\u0903\u090a\u090f\u0917\u091b")
        buf.write("\u0921\u092a\u092e\u0934\u0938\u093d\u0944\u094f\u0955")
        buf.write("\u095b\u0962\u0967\u096a\u096f\u0976\u097b\u0994\u099f")
        buf.write("\u09a5\u09aa\u09ae\u09b0\u09bb\u09c0\u09d9\u09de\u09e3")
        buf.write("\u09ea\u09f1\u09fa\u09fe\u0a03\u0a07\u0a09\u0a11\u0a1a")
        buf.write("\u0a1e\u0a24\u0a27\u0a2d\u0a34\u0a3c\u0a41\u0a48\u0a4b")
        return buf.getvalue()


class KotlinParser ( Parser ):

    grammarFileName = "KotlinParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'...'", "'.'", "','", "'('", 
                     "<INVALID>", "'['", "<INVALID>", "'{'", "'}'", "'*'", 
                     "'%'", "'/'", "'+'", "'-'", "'++'", "'--'", "'&&'", 
                     "'||'", "'!'", "':'", "';'", "'='", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'->'", "'=>'", "'..'", "'::'", 
                     "'?::'", "';;'", "'#'", "'@'", "'?'", "'?:'", "'<'", 
                     "'>'", "'<='", "'>='", "'!='", "'!=='", "'as?'", "'=='", 
                     "'==='", "'''", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'@file'", "'package'", "'import'", "'class'", "'interface'", 
                     "'fun'", "'object'", "'val'", "'var'", "'typealias'", 
                     "'constructor'", "'by'", "'companion'", "'init'", "'this'", 
                     "'super'", "'typeof'", "'where'", "'if'", "'else'", 
                     "'when'", "'try'", "'catch'", "'finally'", "'for'", 
                     "'do'", "'while'", "'throw'", "'return'", "'continue'", 
                     "'break'", "'as'", "'is'", "'in'", "<INVALID>", "<INVALID>", 
                     "'out'", "'@field'", "'@property'", "'@get'", "'@set'", 
                     "'get'", "'set'", "'@receiver'", "'@param'", "'@setparam'", 
                     "'@delegate'", "'dynamic'", "'public'", "'private'", 
                     "'protected'", "'internal'", "'enum'", "'sealed'", 
                     "'annotation'", "'data'", "'inner'", "'tailrec'", "'operator'", 
                     "'inline'", "'infix'", "'external'", "'suspend'", "'override'", 
                     "'abstract'", "'final'", "'open'", "'const'", "'lateinit'", 
                     "'vararg'", "'noinline'", "'crossinline'", "'reified'", 
                     "<INVALID>", "'\"\"\"'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'null'" ]

    symbolicNames = [ "<INVALID>", "ShebangLine", "DelimitedComment", "LineComment", 
                      "WS", "NL", "RESERVED", "DOT", "COMMA", "LPAREN", 
                      "RPAREN", "LSQUARE", "RSQUARE", "LCURL", "RCURL", 
                      "MULT", "MOD", "DIV", "ADD", "SUB", "INCR", "DECR", 
                      "CONJ", "DISJ", "EXCL", "COLON", "SEMICOLON", "ASSIGNMENT", 
                      "ADD_ASSIGNMENT", "SUB_ASSIGNMENT", "MULT_ASSIGNMENT", 
                      "DIV_ASSIGNMENT", "MOD_ASSIGNMENT", "ARROW", "DOUBLE_ARROW", 
                      "RANGE", "COLONCOLON", "Q_COLONCOLON", "DOUBLE_SEMICOLON", 
                      "HASH", "AT", "QUEST", "ELVIS", "LANGLE", "RANGLE", 
                      "LE", "GE", "EXCL_EQ", "EXCL_EQEQ", "AS_SAFE", "EQEQ", 
                      "EQEQEQ", "SINGLE_QUOTE", "RETURN_AT", "CONTINUE_AT", 
                      "BREAK_AT", "FILE", "PACKAGE", "IMPORT", "CLASS", 
                      "INTERFACE", "FUN", "OBJECT", "VAL", "VAR", "TYPE_ALIAS", 
                      "CONSTRUCTOR", "BY", "COMPANION", "INIT", "THIS", 
                      "SUPER", "TYPEOF", "WHERE", "IF", "ELSE", "WHEN", 
                      "TRY", "CATCH", "FINALLY", "FOR", "DO", "WHILE", "THROW", 
                      "RETURN", "CONTINUE", "BREAK", "AS", "IS", "IN", "NOT_IS", 
                      "NOT_IN", "OUT", "FIELD", "PROPERTY", "GET", "SET", 
                      "GETTER", "SETTER", "RECEIVER", "PARAM", "SETPARAM", 
                      "DELEGATE", "DYNAMIC", "PUBLIC", "PRIVATE", "PROTECTED", 
                      "INTERNAL", "ENUM", "SEALED", "ANNOTATION", "DATA", 
                      "INNER", "TAILREC", "OPERATOR", "INLINE", "INFIX", 
                      "EXTERNAL", "SUSPEND", "OVERRIDE", "ABSTRACT", "FINAL", 
                      "OPEN", "CONST", "LATEINIT", "VARARG", "NOINLINE", 
                      "CROSSINLINE", "REIFIED", "QUOTE_OPEN", "TRIPLE_QUOTE_OPEN", 
                      "RealLiteral", "FloatLiteral", "DoubleLiteral", "LongLiteral", 
                      "IntegerLiteral", "HexLiteral", "BinLiteral", "BooleanLiteral", 
                      "NullLiteral", "Identifier", "LabelReference", "LabelDefinition", 
                      "FieldIdentifier", "CharacterLiteral", "UNICODE_CLASS_LL", 
                      "UNICODE_CLASS_LM", "UNICODE_CLASS_LO", "UNICODE_CLASS_LT", 
                      "UNICODE_CLASS_LU", "UNICODE_CLASS_ND", "UNICODE_CLASS_NL", 
                      "Inside_Comment", "Inside_WS", "Inside_NL", "QUOTE_CLOSE", 
                      "LineStrRef", "LineStrText", "LineStrEscapedChar", 
                      "LineStrExprStart", "TRIPLE_QUOTE_CLOSE", "MultiLineStringQuote", 
                      "MultiLineStrRef", "MultiLineStrText", "MultiLineStrEscapedChar", 
                      "MultiLineStrExprStart", "MultiLineNL", "StrExpr_IN", 
                      "StrExpr_Comment", "StrExpr_WS", "StrExpr_NL" ]

    RULE_kotlinFile = 0
    RULE_script = 1
    RULE_preamble = 2
    RULE_fileAnnotations = 3
    RULE_fileAnnotation = 4
    RULE_packageHeader = 5
    RULE_importList = 6
    RULE_importHeader = 7
    RULE_importAlias = 8
    RULE_topLevelObject = 9
    RULE_classDeclaration = 10
    RULE_primaryConstructor = 11
    RULE_classParameters = 12
    RULE_classParameter = 13
    RULE_delegationSpecifiers = 14
    RULE_delegationSpecifier = 15
    RULE_constructorInvocation = 16
    RULE_explicitDelegation = 17
    RULE_classBody = 18
    RULE_classMemberDeclaration = 19
    RULE_anonymousInitializer = 20
    RULE_secondaryConstructor = 21
    RULE_constructorDelegationCall = 22
    RULE_enumClassBody = 23
    RULE_enumEntries = 24
    RULE_enumEntry = 25
    RULE_functionDeclaration = 26
    RULE_functionValueParameters = 27
    RULE_functionValueParameter = 28
    RULE_parameter = 29
    RULE_functionBody = 30
    RULE_objectDeclaration = 31
    RULE_companionObject = 32
    RULE_propertyDeclaration = 33
    RULE_multiVariableDeclaration = 34
    RULE_variableDeclaration = 35
    RULE_getter = 36
    RULE_setter = 37
    RULE_typeAlias = 38
    RULE_typeParameters = 39
    RULE_typeParameter = 40
    RULE_type = 41
    RULE_typeModifierList = 42
    RULE_parenthesizedType = 43
    RULE_nullableType = 44
    RULE_typeReference = 45
    RULE_functionType = 46
    RULE_functionTypeReceiver = 47
    RULE_userType = 48
    RULE_simpleUserType = 49
    RULE_functionTypeParameters = 50
    RULE_typeConstraints = 51
    RULE_typeConstraint = 52
    RULE_block = 53
    RULE_statements = 54
    RULE_statement = 55
    RULE_blockLevelExpression = 56
    RULE_declaration = 57
    RULE_expression = 58
    RULE_disjunction = 59
    RULE_conjunction = 60
    RULE_equalityComparison = 61
    RULE_comparison = 62
    RULE_namedInfix = 63
    RULE_elvisExpression = 64
    RULE_infixFunctionCall = 65
    RULE_rangeExpression = 66
    RULE_additiveExpression = 67
    RULE_multiplicativeExpression = 68
    RULE_typeRHS = 69
    RULE_prefixUnaryExpression = 70
    RULE_postfixUnaryExpression = 71
    RULE_atomicExpression = 72
    RULE_parenthesizedExpression = 73
    RULE_callSuffix = 74
    RULE_annotatedLambda = 75
    RULE_arrayAccess = 76
    RULE_valueArguments = 77
    RULE_typeArguments = 78
    RULE_typeProjection = 79
    RULE_typeProjectionModifierList = 80
    RULE_valueArgument = 81
    RULE_literalConstant = 82
    RULE_stringLiteral = 83
    RULE_lineStringLiteral = 84
    RULE_multiLineStringLiteral = 85
    RULE_lineStringContent = 86
    RULE_lineStringExpression = 87
    RULE_multiLineStringContent = 88
    RULE_multiLineStringExpression = 89
    RULE_functionLiteral = 90
    RULE_lambdaParameters = 91
    RULE_lambdaParameter = 92
    RULE_objectLiteral = 93
    RULE_collectionLiteral = 94
    RULE_thisExpression = 95
    RULE_superExpression = 96
    RULE_conditionalExpression = 97
    RULE_ifExpression = 98
    RULE_controlStructureBody = 99
    RULE_whenExpression = 100
    RULE_whenEntry = 101
    RULE_whenCondition = 102
    RULE_rangeTest = 103
    RULE_typeTest = 104
    RULE_tryExpression = 105
    RULE_catchBlock = 106
    RULE_finallyBlock = 107
    RULE_loopExpression = 108
    RULE_forExpression = 109
    RULE_whileExpression = 110
    RULE_doWhileExpression = 111
    RULE_jumpExpression = 112
    RULE_callableReference = 113
    RULE_assignmentOperator = 114
    RULE_equalityOperation = 115
    RULE_comparisonOperator = 116
    RULE_inOperator = 117
    RULE_isOperator = 118
    RULE_additiveOperator = 119
    RULE_multiplicativeOperation = 120
    RULE_typeOperation = 121
    RULE_prefixUnaryOperation = 122
    RULE_postfixUnaryOperation = 123
    RULE_memberAccessOperator = 124
    RULE_modifierList = 125
    RULE_modifier = 126
    RULE_classModifier = 127
    RULE_memberModifier = 128
    RULE_visibilityModifier = 129
    RULE_varianceAnnotation = 130
    RULE_functionModifier = 131
    RULE_propertyModifier = 132
    RULE_inheritanceModifier = 133
    RULE_parameterModifier = 134
    RULE_typeParameterModifier = 135
    RULE_labelDefinition = 136
    RULE_annotations = 137
    RULE_annotation = 138
    RULE_annotationList = 139
    RULE_annotationUseSiteTarget = 140
    RULE_unescapedAnnotation = 141
    RULE_identifier = 142
    RULE_simpleIdentifier = 143
    RULE_semi = 144
    RULE_anysemi = 145

    ruleNames =  [ "kotlinFile", "script", "preamble", "fileAnnotations", 
                   "fileAnnotation", "packageHeader", "importList", "importHeader", 
                   "importAlias", "topLevelObject", "classDeclaration", 
                   "primaryConstructor", "classParameters", "classParameter", 
                   "delegationSpecifiers", "delegationSpecifier", "constructorInvocation", 
                   "explicitDelegation", "classBody", "classMemberDeclaration", 
                   "anonymousInitializer", "secondaryConstructor", "constructorDelegationCall", 
                   "enumClassBody", "enumEntries", "enumEntry", "functionDeclaration", 
                   "functionValueParameters", "functionValueParameter", 
                   "parameter", "functionBody", "objectDeclaration", "companionObject", 
                   "propertyDeclaration", "multiVariableDeclaration", "variableDeclaration", 
                   "getter", "setter", "typeAlias", "typeParameters", "typeParameter", 
                   "type", "typeModifierList", "parenthesizedType", "nullableType", 
                   "typeReference", "functionType", "functionTypeReceiver", 
                   "userType", "simpleUserType", "functionTypeParameters", 
                   "typeConstraints", "typeConstraint", "block", "statements", 
                   "statement", "blockLevelExpression", "declaration", "expression", 
                   "disjunction", "conjunction", "equalityComparison", "comparison", 
                   "namedInfix", "elvisExpression", "infixFunctionCall", 
                   "rangeExpression", "additiveExpression", "multiplicativeExpression", 
                   "typeRHS", "prefixUnaryExpression", "postfixUnaryExpression", 
                   "atomicExpression", "parenthesizedExpression", "callSuffix", 
                   "annotatedLambda", "arrayAccess", "valueArguments", "typeArguments", 
                   "typeProjection", "typeProjectionModifierList", "valueArgument", 
                   "literalConstant", "stringLiteral", "lineStringLiteral", 
                   "multiLineStringLiteral", "lineStringContent", "lineStringExpression", 
                   "multiLineStringContent", "multiLineStringExpression", 
                   "functionLiteral", "lambdaParameters", "lambdaParameter", 
                   "objectLiteral", "collectionLiteral", "thisExpression", 
                   "superExpression", "conditionalExpression", "ifExpression", 
                   "controlStructureBody", "whenExpression", "whenEntry", 
                   "whenCondition", "rangeTest", "typeTest", "tryExpression", 
                   "catchBlock", "finallyBlock", "loopExpression", "forExpression", 
                   "whileExpression", "doWhileExpression", "jumpExpression", 
                   "callableReference", "assignmentOperator", "equalityOperation", 
                   "comparisonOperator", "inOperator", "isOperator", "additiveOperator", 
                   "multiplicativeOperation", "typeOperation", "prefixUnaryOperation", 
                   "postfixUnaryOperation", "memberAccessOperator", "modifierList", 
                   "modifier", "classModifier", "memberModifier", "visibilityModifier", 
                   "varianceAnnotation", "functionModifier", "propertyModifier", 
                   "inheritanceModifier", "parameterModifier", "typeParameterModifier", 
                   "labelDefinition", "annotations", "annotation", "annotationList", 
                   "annotationUseSiteTarget", "unescapedAnnotation", "identifier", 
                   "simpleIdentifier", "semi", "anysemi" ]

    EOF = Token.EOF
    ShebangLine=1
    DelimitedComment=2
    LineComment=3
    WS=4
    NL=5
    RESERVED=6
    DOT=7
    COMMA=8
    LPAREN=9
    RPAREN=10
    LSQUARE=11
    RSQUARE=12
    LCURL=13
    RCURL=14
    MULT=15
    MOD=16
    DIV=17
    ADD=18
    SUB=19
    INCR=20
    DECR=21
    CONJ=22
    DISJ=23
    EXCL=24
    COLON=25
    SEMICOLON=26
    ASSIGNMENT=27
    ADD_ASSIGNMENT=28
    SUB_ASSIGNMENT=29
    MULT_ASSIGNMENT=30
    DIV_ASSIGNMENT=31
    MOD_ASSIGNMENT=32
    ARROW=33
    DOUBLE_ARROW=34
    RANGE=35
    COLONCOLON=36
    Q_COLONCOLON=37
    DOUBLE_SEMICOLON=38
    HASH=39
    AT=40
    QUEST=41
    ELVIS=42
    LANGLE=43
    RANGLE=44
    LE=45
    GE=46
    EXCL_EQ=47
    EXCL_EQEQ=48
    AS_SAFE=49
    EQEQ=50
    EQEQEQ=51
    SINGLE_QUOTE=52
    RETURN_AT=53
    CONTINUE_AT=54
    BREAK_AT=55
    FILE=56
    PACKAGE=57
    IMPORT=58
    CLASS=59
    INTERFACE=60
    FUN=61
    OBJECT=62
    VAL=63
    VAR=64
    TYPE_ALIAS=65
    CONSTRUCTOR=66
    BY=67
    COMPANION=68
    INIT=69
    THIS=70
    SUPER=71
    TYPEOF=72
    WHERE=73
    IF=74
    ELSE=75
    WHEN=76
    TRY=77
    CATCH=78
    FINALLY=79
    FOR=80
    DO=81
    WHILE=82
    THROW=83
    RETURN=84
    CONTINUE=85
    BREAK=86
    AS=87
    IS=88
    IN=89
    NOT_IS=90
    NOT_IN=91
    OUT=92
    FIELD=93
    PROPERTY=94
    GET=95
    SET=96
    GETTER=97
    SETTER=98
    RECEIVER=99
    PARAM=100
    SETPARAM=101
    DELEGATE=102
    DYNAMIC=103
    PUBLIC=104
    PRIVATE=105
    PROTECTED=106
    INTERNAL=107
    ENUM=108
    SEALED=109
    ANNOTATION=110
    DATA=111
    INNER=112
    TAILREC=113
    OPERATOR=114
    INLINE=115
    INFIX=116
    EXTERNAL=117
    SUSPEND=118
    OVERRIDE=119
    ABSTRACT=120
    FINAL=121
    OPEN=122
    CONST=123
    LATEINIT=124
    VARARG=125
    NOINLINE=126
    CROSSINLINE=127
    REIFIED=128
    QUOTE_OPEN=129
    TRIPLE_QUOTE_OPEN=130
    RealLiteral=131
    FloatLiteral=132
    DoubleLiteral=133
    LongLiteral=134
    IntegerLiteral=135
    HexLiteral=136
    BinLiteral=137
    BooleanLiteral=138
    NullLiteral=139
    Identifier=140
    LabelReference=141
    LabelDefinition=142
    FieldIdentifier=143
    CharacterLiteral=144
    UNICODE_CLASS_LL=145
    UNICODE_CLASS_LM=146
    UNICODE_CLASS_LO=147
    UNICODE_CLASS_LT=148
    UNICODE_CLASS_LU=149
    UNICODE_CLASS_ND=150
    UNICODE_CLASS_NL=151
    Inside_Comment=152
    Inside_WS=153
    Inside_NL=154
    QUOTE_CLOSE=155
    LineStrRef=156
    LineStrText=157
    LineStrEscapedChar=158
    LineStrExprStart=159
    TRIPLE_QUOTE_CLOSE=160
    MultiLineStringQuote=161
    MultiLineStrRef=162
    MultiLineStrText=163
    MultiLineStrEscapedChar=164
    MultiLineStrExprStart=165
    MultiLineNL=166
    StrExpr_IN=167
    StrExpr_Comment=168
    StrExpr_WS=169
    StrExpr_NL=170

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class KotlinFileContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preamble(self):
            return self.getTypedRuleContext(KotlinParser.PreambleContext,0)


        def EOF(self):
            return self.getToken(KotlinParser.EOF, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def anysemi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnysemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnysemiContext,i)


        def topLevelObject(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TopLevelObjectContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TopLevelObjectContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_kotlinFile

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKotlinFile" ):
                listener.enterKotlinFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKotlinFile" ):
                listener.exitKotlinFile(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKotlinFile" ):
                return visitor.visitKotlinFile(self)
            else:
                return visitor.visitChildren(self)




    def kotlinFile(self):

        localctx = KotlinParser.KotlinFileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_kotlinFile)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 295
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,0,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 292
                    self.match(KotlinParser.NL) 
                self.state = 297
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

            self.state = 298
            self.preamble()
            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL or _la==KotlinParser.SEMICOLON:
                self.state = 299
                self.anysemi()
                self.state = 304
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.CLASS - 40)) | (1 << (KotlinParser.INTERFACE - 40)) | (1 << (KotlinParser.FUN - 40)) | (1 << (KotlinParser.OBJECT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.TYPE_ALIAS - 40)) | (1 << (KotlinParser.IN - 40)) | (1 << (KotlinParser.OUT - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)) | (1 << (KotlinParser.ENUM - 104)) | (1 << (KotlinParser.SEALED - 104)) | (1 << (KotlinParser.ANNOTATION - 104)) | (1 << (KotlinParser.DATA - 104)) | (1 << (KotlinParser.INNER - 104)) | (1 << (KotlinParser.TAILREC - 104)) | (1 << (KotlinParser.OPERATOR - 104)) | (1 << (KotlinParser.INLINE - 104)) | (1 << (KotlinParser.INFIX - 104)) | (1 << (KotlinParser.EXTERNAL - 104)) | (1 << (KotlinParser.SUSPEND - 104)) | (1 << (KotlinParser.OVERRIDE - 104)) | (1 << (KotlinParser.ABSTRACT - 104)) | (1 << (KotlinParser.FINAL - 104)) | (1 << (KotlinParser.OPEN - 104)) | (1 << (KotlinParser.CONST - 104)) | (1 << (KotlinParser.LATEINIT - 104)) | (1 << (KotlinParser.VARARG - 104)) | (1 << (KotlinParser.NOINLINE - 104)) | (1 << (KotlinParser.CROSSINLINE - 104)) | (1 << (KotlinParser.REIFIED - 104)) | (1 << (KotlinParser.LabelReference - 104)))) != 0):
                self.state = 305
                self.topLevelObject()
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL or _la==KotlinParser.SEMICOLON:
                    self.state = 307 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 306
                            self.anysemi()

                        else:
                            raise NoViableAltException(self)
                        self.state = 309 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

                    self.state = 312
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.CLASS - 40)) | (1 << (KotlinParser.INTERFACE - 40)) | (1 << (KotlinParser.FUN - 40)) | (1 << (KotlinParser.OBJECT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.TYPE_ALIAS - 40)) | (1 << (KotlinParser.IN - 40)) | (1 << (KotlinParser.OUT - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)) | (1 << (KotlinParser.ENUM - 104)) | (1 << (KotlinParser.SEALED - 104)) | (1 << (KotlinParser.ANNOTATION - 104)) | (1 << (KotlinParser.DATA - 104)) | (1 << (KotlinParser.INNER - 104)) | (1 << (KotlinParser.TAILREC - 104)) | (1 << (KotlinParser.OPERATOR - 104)) | (1 << (KotlinParser.INLINE - 104)) | (1 << (KotlinParser.INFIX - 104)) | (1 << (KotlinParser.EXTERNAL - 104)) | (1 << (KotlinParser.SUSPEND - 104)) | (1 << (KotlinParser.OVERRIDE - 104)) | (1 << (KotlinParser.ABSTRACT - 104)) | (1 << (KotlinParser.FINAL - 104)) | (1 << (KotlinParser.OPEN - 104)) | (1 << (KotlinParser.CONST - 104)) | (1 << (KotlinParser.LATEINIT - 104)) | (1 << (KotlinParser.VARARG - 104)) | (1 << (KotlinParser.NOINLINE - 104)) | (1 << (KotlinParser.CROSSINLINE - 104)) | (1 << (KotlinParser.REIFIED - 104)) | (1 << (KotlinParser.LabelReference - 104)))) != 0):
                        self.state = 311
                        self.topLevelObject()


                    self.state = 318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 321
            self.match(KotlinParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScriptContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def preamble(self):
            return self.getTypedRuleContext(KotlinParser.PreambleContext,0)


        def EOF(self):
            return self.getToken(KotlinParser.EOF, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def anysemi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnysemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnysemiContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ExpressionContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_script

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScript" ):
                listener.enterScript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScript" ):
                listener.exitScript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScript" ):
                return visitor.visitScript(self)
            else:
                return visitor.visitChildren(self)




    def script(self):

        localctx = KotlinParser.ScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 326
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,6,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 323
                    self.match(KotlinParser.NL) 
                self.state = 328
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,6,self._ctx)

            self.state = 329
            self.preamble()
            self.state = 333
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 330
                    self.anysemi() 
                self.state = 335
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

            self.state = 350
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.NL) | (1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL) | (1 << KotlinParser.COLONCOLON) | (1 << KotlinParser.Q_COLONCOLON) | (1 << KotlinParser.AT) | (1 << KotlinParser.RETURN_AT) | (1 << KotlinParser.CONTINUE_AT) | (1 << KotlinParser.BREAK_AT) | (1 << KotlinParser.FILE) | (1 << KotlinParser.IMPORT) | (1 << KotlinParser.OBJECT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KotlinParser.CONSTRUCTOR - 66)) | (1 << (KotlinParser.BY - 66)) | (1 << (KotlinParser.COMPANION - 66)) | (1 << (KotlinParser.INIT - 66)) | (1 << (KotlinParser.THIS - 66)) | (1 << (KotlinParser.SUPER - 66)) | (1 << (KotlinParser.WHERE - 66)) | (1 << (KotlinParser.IF - 66)) | (1 << (KotlinParser.WHEN - 66)) | (1 << (KotlinParser.TRY - 66)) | (1 << (KotlinParser.CATCH - 66)) | (1 << (KotlinParser.FINALLY - 66)) | (1 << (KotlinParser.FOR - 66)) | (1 << (KotlinParser.DO - 66)) | (1 << (KotlinParser.WHILE - 66)) | (1 << (KotlinParser.THROW - 66)) | (1 << (KotlinParser.RETURN - 66)) | (1 << (KotlinParser.CONTINUE - 66)) | (1 << (KotlinParser.BREAK - 66)) | (1 << (KotlinParser.OUT - 66)) | (1 << (KotlinParser.FIELD - 66)) | (1 << (KotlinParser.PROPERTY - 66)) | (1 << (KotlinParser.GET - 66)) | (1 << (KotlinParser.SET - 66)) | (1 << (KotlinParser.GETTER - 66)) | (1 << (KotlinParser.SETTER - 66)) | (1 << (KotlinParser.RECEIVER - 66)) | (1 << (KotlinParser.PARAM - 66)) | (1 << (KotlinParser.SETPARAM - 66)) | (1 << (KotlinParser.DELEGATE - 66)) | (1 << (KotlinParser.DYNAMIC - 66)) | (1 << (KotlinParser.PUBLIC - 66)) | (1 << (KotlinParser.PRIVATE - 66)) | (1 << (KotlinParser.PROTECTED - 66)) | (1 << (KotlinParser.INTERNAL - 66)) | (1 << (KotlinParser.ENUM - 66)) | (1 << (KotlinParser.SEALED - 66)) | (1 << (KotlinParser.ANNOTATION - 66)) | (1 << (KotlinParser.DATA - 66)) | (1 << (KotlinParser.INNER - 66)) | (1 << (KotlinParser.TAILREC - 66)) | (1 << (KotlinParser.OPERATOR - 66)) | (1 << (KotlinParser.INLINE - 66)) | (1 << (KotlinParser.INFIX - 66)) | (1 << (KotlinParser.EXTERNAL - 66)) | (1 << (KotlinParser.SUSPEND - 66)) | (1 << (KotlinParser.OVERRIDE - 66)) | (1 << (KotlinParser.ABSTRACT - 66)) | (1 << (KotlinParser.FINAL - 66)) | (1 << (KotlinParser.OPEN - 66)) | (1 << (KotlinParser.CONST - 66)) | (1 << (KotlinParser.LATEINIT - 66)) | (1 << (KotlinParser.VARARG - 66)) | (1 << (KotlinParser.NOINLINE - 66)) | (1 << (KotlinParser.CROSSINLINE - 66)) | (1 << (KotlinParser.REIFIED - 66)) | (1 << (KotlinParser.QUOTE_OPEN - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 130)) | (1 << (KotlinParser.RealLiteral - 130)) | (1 << (KotlinParser.LongLiteral - 130)) | (1 << (KotlinParser.IntegerLiteral - 130)) | (1 << (KotlinParser.HexLiteral - 130)) | (1 << (KotlinParser.BinLiteral - 130)) | (1 << (KotlinParser.BooleanLiteral - 130)) | (1 << (KotlinParser.NullLiteral - 130)) | (1 << (KotlinParser.Identifier - 130)) | (1 << (KotlinParser.LabelReference - 130)) | (1 << (KotlinParser.LabelDefinition - 130)) | (1 << (KotlinParser.CharacterLiteral - 130)))) != 0):
                self.state = 336
                self.expression()
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL or _la==KotlinParser.SEMICOLON:
                    self.state = 338 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 337
                            self.anysemi()

                        else:
                            raise NoViableAltException(self)
                        self.state = 340 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                    self.state = 343
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 342
                        self.expression()


                    self.state = 349
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 352
            self.match(KotlinParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreambleContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def packageHeader(self):
            return self.getTypedRuleContext(KotlinParser.PackageHeaderContext,0)


        def importList(self):
            return self.getTypedRuleContext(KotlinParser.ImportListContext,0)


        def fileAnnotations(self):
            return self.getTypedRuleContext(KotlinParser.FileAnnotationsContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_preamble

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreamble" ):
                listener.enterPreamble(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreamble" ):
                listener.exitPreamble(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPreamble" ):
                return visitor.visitPreamble(self)
            else:
                return visitor.visitChildren(self)




    def preamble(self):

        localctx = KotlinParser.PreambleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_preamble)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 355
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.state = 354
                self.fileAnnotations()


            self.state = 357
            self.packageHeader()
            self.state = 358
            self.importList()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileAnnotationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fileAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.FileAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.FileAnnotationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_fileAnnotations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileAnnotations" ):
                listener.enterFileAnnotations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileAnnotations" ):
                listener.exitFileAnnotations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileAnnotations" ):
                return visitor.visitFileAnnotations(self)
            else:
                return visitor.visitChildren(self)




    def fileAnnotations(self):

        localctx = KotlinParser.FileAnnotationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_fileAnnotations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 361 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 360
                    self.fileAnnotation()

                else:
                    raise NoViableAltException(self)
                self.state = 363 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileAnnotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILE(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.FILE)
            else:
                return self.getToken(KotlinParser.FILE, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COLON)
            else:
                return self.getToken(KotlinParser.COLON, i)

        def LSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.LSQUARE)
            else:
                return self.getToken(KotlinParser.LSQUARE, i)

        def RSQUARE(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.RSQUARE)
            else:
                return self.getToken(KotlinParser.RSQUARE, i)

        def unescapedAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.UnescapedAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,i)


        def semi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SemiContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_fileAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileAnnotation" ):
                listener.enterFileAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileAnnotation" ):
                listener.exitFileAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFileAnnotation" ):
                return visitor.visitFileAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def fileAnnotation(self):

        localctx = KotlinParser.FileAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_fileAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 365
                    self.match(KotlinParser.FILE)
                    self.state = 366
                    self.match(KotlinParser.COLON)
                    self.state = 376
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [KotlinParser.LSQUARE]:
                        self.state = 367
                        self.match(KotlinParser.LSQUARE)
                        self.state = 369 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 368
                            self.unescapedAnnotation()
                            self.state = 371 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0)):
                                break

                        self.state = 373
                        self.match(KotlinParser.RSQUARE)
                        pass
                    elif token in [KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier]:
                        self.state = 375
                        self.unescapedAnnotation()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 379
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
                    if la_ == 1:
                        self.state = 378
                        self.semi()



                else:
                    raise NoViableAltException(self)
                self.state = 383 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PackageHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PACKAGE(self):
            return self.getToken(KotlinParser.PACKAGE, 0)

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_packageHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPackageHeader" ):
                listener.enterPackageHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPackageHeader" ):
                listener.exitPackageHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPackageHeader" ):
                return visitor.visitPackageHeader(self)
            else:
                return visitor.visitChildren(self)




    def packageHeader(self):

        localctx = KotlinParser.PackageHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_packageHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.state = 386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                    self.state = 385
                    self.modifierList()


                self.state = 388
                self.match(KotlinParser.PACKAGE)
                self.state = 389
                self.identifier()
                self.state = 391
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                if la_ == 1:
                    self.state = 390
                    self.semi()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def importHeader(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ImportHeaderContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ImportHeaderContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_importList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportList" ):
                listener.enterImportList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportList" ):
                listener.exitImportList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportList" ):
                return visitor.visitImportList(self)
            else:
                return visitor.visitChildren(self)




    def importList(self):

        localctx = KotlinParser.ImportListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_importList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 398
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,21,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 395
                    self.importHeader() 
                self.state = 400
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,21,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportHeaderContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(KotlinParser.IMPORT, 0)

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def importAlias(self):
            return self.getTypedRuleContext(KotlinParser.ImportAliasContext,0)


        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_importHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportHeader" ):
                listener.enterImportHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportHeader" ):
                listener.exitImportHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportHeader" ):
                return visitor.visitImportHeader(self)
            else:
                return visitor.visitChildren(self)




    def importHeader(self):

        localctx = KotlinParser.ImportHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_importHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self.match(KotlinParser.IMPORT)
            self.state = 402
            self.identifier()
            self.state = 406
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.DOT]:
                self.state = 403
                self.match(KotlinParser.DOT)
                self.state = 404
                self.match(KotlinParser.MULT)
                pass
            elif token in [KotlinParser.AS]:
                self.state = 405
                self.importAlias()
                pass
            elif token in [KotlinParser.EOF, KotlinParser.NL, KotlinParser.LPAREN, KotlinParser.LSQUARE, KotlinParser.LCURL, KotlinParser.ADD, KotlinParser.SUB, KotlinParser.INCR, KotlinParser.DECR, KotlinParser.EXCL, KotlinParser.SEMICOLON, KotlinParser.COLONCOLON, KotlinParser.Q_COLONCOLON, KotlinParser.AT, KotlinParser.RETURN_AT, KotlinParser.CONTINUE_AT, KotlinParser.BREAK_AT, KotlinParser.FILE, KotlinParser.IMPORT, KotlinParser.CLASS, KotlinParser.INTERFACE, KotlinParser.FUN, KotlinParser.OBJECT, KotlinParser.VAL, KotlinParser.VAR, KotlinParser.TYPE_ALIAS, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.THIS, KotlinParser.SUPER, KotlinParser.WHERE, KotlinParser.IF, KotlinParser.WHEN, KotlinParser.TRY, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.FOR, KotlinParser.DO, KotlinParser.WHILE, KotlinParser.THROW, KotlinParser.RETURN, KotlinParser.CONTINUE, KotlinParser.BREAK, KotlinParser.IN, KotlinParser.OUT, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN, KotlinParser.RealLiteral, KotlinParser.LongLiteral, KotlinParser.IntegerLiteral, KotlinParser.HexLiteral, KotlinParser.BinLiteral, KotlinParser.BooleanLiteral, KotlinParser.NullLiteral, KotlinParser.Identifier, KotlinParser.LabelReference, KotlinParser.LabelDefinition, KotlinParser.CharacterLiteral]:
                pass
            else:
                pass
            self.state = 409
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.state = 408
                self.semi()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportAliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(KotlinParser.AS, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_importAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportAlias" ):
                listener.enterImportAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportAlias" ):
                listener.exitImportAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportAlias" ):
                return visitor.visitImportAlias(self)
            else:
                return visitor.visitChildren(self)




    def importAlias(self):

        localctx = KotlinParser.ImportAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_importAlias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.match(KotlinParser.AS)
            self.state = 412
            self.simpleIdentifier()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TopLevelObjectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ClassDeclarationContext,0)


        def objectDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ObjectDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.FunctionDeclarationContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.PropertyDeclarationContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(KotlinParser.TypeAliasContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_topLevelObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTopLevelObject" ):
                listener.enterTopLevelObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTopLevelObject" ):
                listener.exitTopLevelObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTopLevelObject" ):
                return visitor.visitTopLevelObject(self)
            else:
                return visitor.visitChildren(self)




    def topLevelObject(self):

        localctx = KotlinParser.TopLevelObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_topLevelObject)
        try:
            self.state = 419
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,24,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 414
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 415
                self.objectDeclaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 416
                self.functionDeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 417
                self.propertyDeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 418
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def CLASS(self):
            return self.getToken(KotlinParser.CLASS, 0)

        def INTERFACE(self):
            return self.getToken(KotlinParser.INTERFACE, 0)

        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def primaryConstructor(self):
            return self.getTypedRuleContext(KotlinParser.PrimaryConstructorContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def typeConstraints(self):
            return self.getTypedRuleContext(KotlinParser.TypeConstraintsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def enumClassBody(self):
            return self.getTypedRuleContext(KotlinParser.EnumClassBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_classDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclaration" ):
                listener.enterClassDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclaration" ):
                listener.exitClassDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDeclaration" ):
                return visitor.visitClassDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classDeclaration(self):

        localctx = KotlinParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 422
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 421
                self.modifierList()


            self.state = 424
            _la = self._input.LA(1)
            if not(_la==KotlinParser.CLASS or _la==KotlinParser.INTERFACE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 425
                self.match(KotlinParser.NL)
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 431
            self.simpleIdentifier()
            self.state = 439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 432
                    self.match(KotlinParser.NL)
                    self.state = 437
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 438
                self.typeParameters()


            self.state = 448
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 441
                    self.match(KotlinParser.NL)
                    self.state = 446
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 447
                self.primaryConstructor()


            self.state = 464
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 450
                    self.match(KotlinParser.NL)
                    self.state = 455
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 456
                self.match(KotlinParser.COLON)
                self.state = 460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 457
                    self.match(KotlinParser.NL)
                    self.state = 462
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 463
                self.delegationSpecifiers()


            self.state = 473
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 466
                    self.match(KotlinParser.NL)
                    self.state = 471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 472
                self.typeConstraints()


            self.state = 489
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,38,self._ctx)
            if la_ == 1:
                self.state = 478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 475
                    self.match(KotlinParser.NL)
                    self.state = 480
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 481
                self.classBody()

            elif la_ == 2:
                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 482
                    self.match(KotlinParser.NL)
                    self.state = 487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 488
                self.enumClassBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryConstructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classParameters(self):
            return self.getTypedRuleContext(KotlinParser.ClassParametersContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def CONSTRUCTOR(self):
            return self.getToken(KotlinParser.CONSTRUCTOR, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_primaryConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryConstructor" ):
                listener.enterPrimaryConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryConstructor" ):
                listener.exitPrimaryConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryConstructor" ):
                return visitor.visitPrimaryConstructor(self)
            else:
                return visitor.visitChildren(self)




    def primaryConstructor(self):

        localctx = KotlinParser.PrimaryConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_primaryConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 491
                self.modifierList()


            self.state = 501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.CONSTRUCTOR:
                self.state = 494
                self.match(KotlinParser.CONSTRUCTOR)
                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 495
                    self.match(KotlinParser.NL)
                    self.state = 500
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 503
            self.classParameters()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def classParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ClassParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ClassParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_classParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassParameters" ):
                listener.enterClassParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassParameters" ):
                listener.exitClassParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassParameters" ):
                return visitor.visitClassParameters(self)
            else:
                return visitor.visitChildren(self)




    def classParameters(self):

        localctx = KotlinParser.ClassParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_classParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.match(KotlinParser.LPAREN)
            self.state = 514
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.IMPORT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.BY - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)) | (1 << (KotlinParser.WHERE - 40)) | (1 << (KotlinParser.CATCH - 40)) | (1 << (KotlinParser.FINALLY - 40)) | (1 << (KotlinParser.IN - 40)) | (1 << (KotlinParser.OUT - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.GETTER - 40)) | (1 << (KotlinParser.SETTER - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)) | (1 << (KotlinParser.DYNAMIC - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)) | (1 << (KotlinParser.ENUM - 104)) | (1 << (KotlinParser.SEALED - 104)) | (1 << (KotlinParser.ANNOTATION - 104)) | (1 << (KotlinParser.DATA - 104)) | (1 << (KotlinParser.INNER - 104)) | (1 << (KotlinParser.TAILREC - 104)) | (1 << (KotlinParser.OPERATOR - 104)) | (1 << (KotlinParser.INLINE - 104)) | (1 << (KotlinParser.INFIX - 104)) | (1 << (KotlinParser.EXTERNAL - 104)) | (1 << (KotlinParser.SUSPEND - 104)) | (1 << (KotlinParser.OVERRIDE - 104)) | (1 << (KotlinParser.ABSTRACT - 104)) | (1 << (KotlinParser.FINAL - 104)) | (1 << (KotlinParser.OPEN - 104)) | (1 << (KotlinParser.CONST - 104)) | (1 << (KotlinParser.LATEINIT - 104)) | (1 << (KotlinParser.VARARG - 104)) | (1 << (KotlinParser.NOINLINE - 104)) | (1 << (KotlinParser.CROSSINLINE - 104)) | (1 << (KotlinParser.REIFIED - 104)) | (1 << (KotlinParser.Identifier - 104)) | (1 << (KotlinParser.LabelReference - 104)))) != 0):
                self.state = 506
                self.classParameter()
                self.state = 511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.COMMA:
                    self.state = 507
                    self.match(KotlinParser.COMMA)
                    self.state = 508
                    self.classParameter()
                    self.state = 513
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 516
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def VAL(self):
            return self.getToken(KotlinParser.VAL, 0)

        def VAR(self):
            return self.getToken(KotlinParser.VAR, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_classParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassParameter" ):
                listener.enterClassParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassParameter" ):
                listener.exitClassParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassParameter" ):
                return visitor.visitClassParameter(self)
            else:
                return visitor.visitChildren(self)




    def classParameter(self):

        localctx = KotlinParser.ClassParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_classParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 519
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
            if la_ == 1:
                self.state = 518
                self.modifierList()


            self.state = 522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.VAL or _la==KotlinParser.VAR:
                self.state = 521
                _la = self._input.LA(1)
                if not(_la==KotlinParser.VAL or _la==KotlinParser.VAR):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 524
            self.simpleIdentifier()
            self.state = 525
            self.match(KotlinParser.COLON)
            self.state = 526
            self.type()
            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.ASSIGNMENT:
                self.state = 527
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 528
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelegationSpecifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def delegationSpecifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.DelegationSpecifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.DelegationSpecifierContext,i)


        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_delegationSpecifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegationSpecifiers" ):
                listener.enterDelegationSpecifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegationSpecifiers" ):
                listener.exitDelegationSpecifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelegationSpecifiers" ):
                return visitor.visitDelegationSpecifiers(self)
            else:
                return visitor.visitChildren(self)




    def delegationSpecifiers(self):

        localctx = KotlinParser.DelegationSpecifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_delegationSpecifiers)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)) | (1 << (KotlinParser.LabelReference - 93)))) != 0):
                self.state = 531
                self.annotations()
                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 537
            self.delegationSpecifier()
            self.state = 554
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,50,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 541
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 538
                        self.match(KotlinParser.NL)
                        self.state = 543
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 544
                    self.match(KotlinParser.COMMA)
                    self.state = 548
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 545
                        self.match(KotlinParser.NL)
                        self.state = 550
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 551
                    self.delegationSpecifier() 
                self.state = 556
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,50,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DelegationSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constructorInvocation(self):
            return self.getTypedRuleContext(KotlinParser.ConstructorInvocationContext,0)


        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def explicitDelegation(self):
            return self.getTypedRuleContext(KotlinParser.ExplicitDelegationContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_delegationSpecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDelegationSpecifier" ):
                listener.enterDelegationSpecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDelegationSpecifier" ):
                listener.exitDelegationSpecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDelegationSpecifier" ):
                return visitor.visitDelegationSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def delegationSpecifier(self):

        localctx = KotlinParser.DelegationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_delegationSpecifier)
        try:
            self.state = 560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 557
                self.constructorInvocation()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 558
                self.userType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 559
                self.explicitDelegation()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorInvocationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def callSuffix(self):
            return self.getTypedRuleContext(KotlinParser.CallSuffixContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_constructorInvocation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorInvocation" ):
                listener.enterConstructorInvocation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorInvocation" ):
                listener.exitConstructorInvocation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorInvocation" ):
                return visitor.visitConstructorInvocation(self)
            else:
                return visitor.visitChildren(self)




    def constructorInvocation(self):

        localctx = KotlinParser.ConstructorInvocationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_constructorInvocation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 562
            self.userType()
            self.state = 563
            self.callSuffix()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitDelegationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def BY(self):
            return self.getToken(KotlinParser.BY, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_explicitDelegation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitDelegation" ):
                listener.enterExplicitDelegation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitDelegation" ):
                listener.exitExplicitDelegation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitDelegation" ):
                return visitor.visitExplicitDelegation(self)
            else:
                return visitor.visitChildren(self)




    def explicitDelegation(self):

        localctx = KotlinParser.ExplicitDelegationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_explicitDelegation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.userType()
            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 566
                self.match(KotlinParser.NL)
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 572
            self.match(KotlinParser.BY)
            self.state = 576
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,53,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 573
                    self.match(KotlinParser.NL) 
                self.state = 578
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,53,self._ctx)

            self.state = 579
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def classMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ClassMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ClassMemberDeclarationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBody" ):
                return visitor.visitClassBody(self)
            else:
                return visitor.visitChildren(self)




    def classBody(self):

        localctx = KotlinParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 581
            self.match(KotlinParser.LCURL)
            self.state = 585
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 582
                    self.match(KotlinParser.NL) 
                self.state = 587
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

            self.state = 591
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.CLASS - 40)) | (1 << (KotlinParser.INTERFACE - 40)) | (1 << (KotlinParser.FUN - 40)) | (1 << (KotlinParser.OBJECT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.TYPE_ALIAS - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)) | (1 << (KotlinParser.IN - 40)) | (1 << (KotlinParser.OUT - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)) | (1 << (KotlinParser.ENUM - 104)) | (1 << (KotlinParser.SEALED - 104)) | (1 << (KotlinParser.ANNOTATION - 104)) | (1 << (KotlinParser.DATA - 104)) | (1 << (KotlinParser.INNER - 104)) | (1 << (KotlinParser.TAILREC - 104)) | (1 << (KotlinParser.OPERATOR - 104)) | (1 << (KotlinParser.INLINE - 104)) | (1 << (KotlinParser.INFIX - 104)) | (1 << (KotlinParser.EXTERNAL - 104)) | (1 << (KotlinParser.SUSPEND - 104)) | (1 << (KotlinParser.OVERRIDE - 104)) | (1 << (KotlinParser.ABSTRACT - 104)) | (1 << (KotlinParser.FINAL - 104)) | (1 << (KotlinParser.OPEN - 104)) | (1 << (KotlinParser.CONST - 104)) | (1 << (KotlinParser.LATEINIT - 104)) | (1 << (KotlinParser.VARARG - 104)) | (1 << (KotlinParser.NOINLINE - 104)) | (1 << (KotlinParser.CROSSINLINE - 104)) | (1 << (KotlinParser.REIFIED - 104)) | (1 << (KotlinParser.LabelReference - 104)))) != 0):
                self.state = 588
                self.classMemberDeclaration()
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 594
                self.match(KotlinParser.NL)
                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 600
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassMemberDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ClassDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.FunctionDeclarationContext,0)


        def objectDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ObjectDeclarationContext,0)


        def companionObject(self):
            return self.getTypedRuleContext(KotlinParser.CompanionObjectContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.PropertyDeclarationContext,0)


        def anonymousInitializer(self):
            return self.getTypedRuleContext(KotlinParser.AnonymousInitializerContext,0)


        def secondaryConstructor(self):
            return self.getTypedRuleContext(KotlinParser.SecondaryConstructorContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(KotlinParser.TypeAliasContext,0)


        def anysemi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnysemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnysemiContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_classMemberDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassMemberDeclaration" ):
                listener.enterClassMemberDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassMemberDeclaration" ):
                listener.exitClassMemberDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassMemberDeclaration" ):
                return visitor.visitClassMemberDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classMemberDeclaration(self):

        localctx = KotlinParser.ClassMemberDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_classMemberDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 602
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.state = 603
                self.functionDeclaration()
                pass

            elif la_ == 3:
                self.state = 604
                self.objectDeclaration()
                pass

            elif la_ == 4:
                self.state = 605
                self.companionObject()
                pass

            elif la_ == 5:
                self.state = 606
                self.propertyDeclaration()
                pass

            elif la_ == 6:
                self.state = 607
                self.anonymousInitializer()
                pass

            elif la_ == 7:
                self.state = 608
                self.secondaryConstructor()
                pass

            elif la_ == 8:
                self.state = 609
                self.typeAlias()
                pass


            self.state = 615
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,58,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 612
                    self.anysemi() 
                self.state = 617
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,58,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnonymousInitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INIT(self):
            return self.getToken(KotlinParser.INIT, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_anonymousInitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnonymousInitializer" ):
                listener.enterAnonymousInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnonymousInitializer" ):
                listener.exitAnonymousInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnonymousInitializer" ):
                return visitor.visitAnonymousInitializer(self)
            else:
                return visitor.visitChildren(self)




    def anonymousInitializer(self):

        localctx = KotlinParser.AnonymousInitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_anonymousInitializer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(KotlinParser.INIT)
            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 619
                self.match(KotlinParser.NL)
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 625
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SecondaryConstructorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTRUCTOR(self):
            return self.getToken(KotlinParser.CONSTRUCTOR, 0)

        def functionValueParameters(self):
            return self.getTypedRuleContext(KotlinParser.FunctionValueParametersContext,0)


        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def constructorDelegationCall(self):
            return self.getTypedRuleContext(KotlinParser.ConstructorDelegationCallContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_secondaryConstructor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSecondaryConstructor" ):
                listener.enterSecondaryConstructor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSecondaryConstructor" ):
                listener.exitSecondaryConstructor(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSecondaryConstructor" ):
                return visitor.visitSecondaryConstructor(self)
            else:
                return visitor.visitChildren(self)




    def secondaryConstructor(self):

        localctx = KotlinParser.SecondaryConstructorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_secondaryConstructor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 627
                self.modifierList()


            self.state = 630
            self.match(KotlinParser.CONSTRUCTOR)
            self.state = 634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 631
                self.match(KotlinParser.NL)
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 637
            self.functionValueParameters()
            self.state = 652
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 638
                    self.match(KotlinParser.NL)
                    self.state = 643
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 644
                self.match(KotlinParser.COLON)
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 645
                    self.match(KotlinParser.NL)
                    self.state = 650
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 651
                self.constructorDelegationCall()


            self.state = 657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 654
                self.match(KotlinParser.NL)
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 660
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstructorDelegationCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(KotlinParser.THIS, 0)

        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def SUPER(self):
            return self.getToken(KotlinParser.SUPER, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_constructorDelegationCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstructorDelegationCall" ):
                listener.enterConstructorDelegationCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstructorDelegationCall" ):
                listener.exitConstructorDelegationCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstructorDelegationCall" ):
                return visitor.visitConstructorDelegationCall(self)
            else:
                return visitor.visitChildren(self)




    def constructorDelegationCall(self):

        localctx = KotlinParser.ConstructorDelegationCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_constructorDelegationCall)
        self._la = 0 # Token type
        try:
            self.state = 678
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.THIS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 662
                self.match(KotlinParser.THIS)
                self.state = 666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 663
                    self.match(KotlinParser.NL)
                    self.state = 668
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 669
                self.valueArguments()
                pass
            elif token in [KotlinParser.SUPER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 670
                self.match(KotlinParser.SUPER)
                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 671
                    self.match(KotlinParser.NL)
                    self.state = 676
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 677
                self.valueArguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumClassBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def enumEntries(self):
            return self.getTypedRuleContext(KotlinParser.EnumEntriesContext,0)


        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def classMemberDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ClassMemberDeclarationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ClassMemberDeclarationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_enumClassBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumClassBody" ):
                listener.enterEnumClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumClassBody" ):
                listener.exitEnumClassBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumClassBody" ):
                return visitor.visitEnumClassBody(self)
            else:
                return visitor.visitChildren(self)




    def enumClassBody(self):

        localctx = KotlinParser.EnumClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_enumClassBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.match(KotlinParser.LCURL)
            self.state = 684
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 681
                    self.match(KotlinParser.NL) 
                self.state = 686
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0):
                self.state = 687
                self.enumEntries()


            self.state = 709
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 690
                    self.match(KotlinParser.NL)
                    self.state = 695
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 696
                self.match(KotlinParser.SEMICOLON)
                self.state = 700
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,72,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 697
                        self.match(KotlinParser.NL) 
                    self.state = 702
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,72,self._ctx)

                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.CLASS - 40)) | (1 << (KotlinParser.INTERFACE - 40)) | (1 << (KotlinParser.FUN - 40)) | (1 << (KotlinParser.OBJECT - 40)) | (1 << (KotlinParser.VAL - 40)) | (1 << (KotlinParser.VAR - 40)) | (1 << (KotlinParser.TYPE_ALIAS - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)) | (1 << (KotlinParser.IN - 40)) | (1 << (KotlinParser.OUT - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)) | (1 << (KotlinParser.ENUM - 104)) | (1 << (KotlinParser.SEALED - 104)) | (1 << (KotlinParser.ANNOTATION - 104)) | (1 << (KotlinParser.DATA - 104)) | (1 << (KotlinParser.INNER - 104)) | (1 << (KotlinParser.TAILREC - 104)) | (1 << (KotlinParser.OPERATOR - 104)) | (1 << (KotlinParser.INLINE - 104)) | (1 << (KotlinParser.INFIX - 104)) | (1 << (KotlinParser.EXTERNAL - 104)) | (1 << (KotlinParser.SUSPEND - 104)) | (1 << (KotlinParser.OVERRIDE - 104)) | (1 << (KotlinParser.ABSTRACT - 104)) | (1 << (KotlinParser.FINAL - 104)) | (1 << (KotlinParser.OPEN - 104)) | (1 << (KotlinParser.CONST - 104)) | (1 << (KotlinParser.LATEINIT - 104)) | (1 << (KotlinParser.VARARG - 104)) | (1 << (KotlinParser.NOINLINE - 104)) | (1 << (KotlinParser.CROSSINLINE - 104)) | (1 << (KotlinParser.REIFIED - 104)) | (1 << (KotlinParser.LabelReference - 104)))) != 0):
                    self.state = 703
                    self.classMemberDeclaration()
                    self.state = 708
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 711
                self.match(KotlinParser.NL)
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 717
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumEntriesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.EnumEntryContext)
            else:
                return self.getTypedRuleContext(KotlinParser.EnumEntryContext,i)


        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_enumEntries

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumEntries" ):
                listener.enterEnumEntries(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumEntries" ):
                listener.exitEnumEntries(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumEntries" ):
                return visitor.visitEnumEntries(self)
            else:
                return visitor.visitChildren(self)




    def enumEntries(self):

        localctx = KotlinParser.EnumEntriesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_enumEntries)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 719
                self.enumEntry()
                self.state = 723
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,76,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 720
                        self.match(KotlinParser.NL) 
                    self.state = 725
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,76,self._ctx)

                self.state = 728 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0)):
                    break

            self.state = 731
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                self.state = 730
                self.match(KotlinParser.SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumEntryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def COMMA(self):
            return self.getToken(KotlinParser.COMMA, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_enumEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumEntry" ):
                listener.enterEnumEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumEntry" ):
                listener.exitEnumEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumEntry" ):
                return visitor.visitEnumEntry(self)
            else:
                return visitor.visitChildren(self)




    def enumEntry(self):

        localctx = KotlinParser.EnumEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_enumEntry)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.simpleIdentifier()
            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
            if la_ == 1:
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 734
                    self.match(KotlinParser.NL)
                    self.state = 739
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 740
                self.valueArguments()


            self.state = 750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
            if la_ == 1:
                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 743
                    self.match(KotlinParser.NL)
                    self.state = 748
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 749
                self.classBody()


            self.state = 759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 752
                    self.match(KotlinParser.NL)
                    self.state = 757
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 758
                self.match(KotlinParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUN(self):
            return self.getToken(KotlinParser.FUN, 0)

        def functionValueParameters(self):
            return self.getTypedRuleContext(KotlinParser.FunctionValueParametersContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeContext,i)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def typeConstraints(self):
            return self.getTypedRuleContext(KotlinParser.TypeConstraintsContext,0)


        def functionBody(self):
            return self.getTypedRuleContext(KotlinParser.FunctionBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_functionDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclaration" ):
                listener.enterFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclaration" ):
                listener.exitFunctionDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDeclaration" ):
                return visitor.visitFunctionDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def functionDeclaration(self):

        localctx = KotlinParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_functionDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 761
                self.modifierList()


            self.state = 764
            self.match(KotlinParser.FUN)
            self.state = 780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 765
                    self.match(KotlinParser.NL)
                    self.state = 770
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 771
                self.type()
                self.state = 775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 772
                    self.match(KotlinParser.NL)
                    self.state = 777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 778
                self.match(KotlinParser.DOT)


            self.state = 789
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 782
                    self.match(KotlinParser.NL)
                    self.state = 787
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 788
                self.typeParameters()


            self.state = 798
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 791
                    self.match(KotlinParser.NL)
                    self.state = 796
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 797
                self.identifier()


            self.state = 803
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 800
                self.match(KotlinParser.NL)
                self.state = 805
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 806
            self.functionValueParameters()
            self.state = 821
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 807
                    self.match(KotlinParser.NL)
                    self.state = 812
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 813
                self.match(KotlinParser.COLON)
                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 814
                    self.match(KotlinParser.NL)
                    self.state = 819
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 820
                self.type()


            self.state = 830
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 823
                    self.match(KotlinParser.NL)
                    self.state = 828
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 829
                self.typeConstraints()


            self.state = 839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 832
                    self.match(KotlinParser.NL)
                    self.state = 837
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 838
                self.functionBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionValueParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def functionValueParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.FunctionValueParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.FunctionValueParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionValueParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionValueParameters" ):
                listener.enterFunctionValueParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionValueParameters" ):
                listener.exitFunctionValueParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionValueParameters" ):
                return visitor.visitFunctionValueParameters(self)
            else:
                return visitor.visitChildren(self)




    def functionValueParameters(self):

        localctx = KotlinParser.FunctionValueParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_functionValueParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.match(KotlinParser.LPAREN)
            self.state = 850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 40)) & ~0x3f) == 0 and ((1 << (_la - 40)) & ((1 << (KotlinParser.AT - 40)) | (1 << (KotlinParser.FILE - 40)) | (1 << (KotlinParser.IMPORT - 40)) | (1 << (KotlinParser.CONSTRUCTOR - 40)) | (1 << (KotlinParser.BY - 40)) | (1 << (KotlinParser.COMPANION - 40)) | (1 << (KotlinParser.INIT - 40)) | (1 << (KotlinParser.WHERE - 40)) | (1 << (KotlinParser.CATCH - 40)) | (1 << (KotlinParser.FINALLY - 40)) | (1 << (KotlinParser.IN - 40)) | (1 << (KotlinParser.OUT - 40)) | (1 << (KotlinParser.FIELD - 40)) | (1 << (KotlinParser.PROPERTY - 40)) | (1 << (KotlinParser.GET - 40)) | (1 << (KotlinParser.SET - 40)) | (1 << (KotlinParser.GETTER - 40)) | (1 << (KotlinParser.SETTER - 40)) | (1 << (KotlinParser.RECEIVER - 40)) | (1 << (KotlinParser.PARAM - 40)) | (1 << (KotlinParser.SETPARAM - 40)) | (1 << (KotlinParser.DELEGATE - 40)) | (1 << (KotlinParser.DYNAMIC - 40)))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)) | (1 << (KotlinParser.ENUM - 104)) | (1 << (KotlinParser.SEALED - 104)) | (1 << (KotlinParser.ANNOTATION - 104)) | (1 << (KotlinParser.DATA - 104)) | (1 << (KotlinParser.INNER - 104)) | (1 << (KotlinParser.TAILREC - 104)) | (1 << (KotlinParser.OPERATOR - 104)) | (1 << (KotlinParser.INLINE - 104)) | (1 << (KotlinParser.INFIX - 104)) | (1 << (KotlinParser.EXTERNAL - 104)) | (1 << (KotlinParser.SUSPEND - 104)) | (1 << (KotlinParser.OVERRIDE - 104)) | (1 << (KotlinParser.ABSTRACT - 104)) | (1 << (KotlinParser.FINAL - 104)) | (1 << (KotlinParser.OPEN - 104)) | (1 << (KotlinParser.CONST - 104)) | (1 << (KotlinParser.LATEINIT - 104)) | (1 << (KotlinParser.VARARG - 104)) | (1 << (KotlinParser.NOINLINE - 104)) | (1 << (KotlinParser.CROSSINLINE - 104)) | (1 << (KotlinParser.REIFIED - 104)) | (1 << (KotlinParser.Identifier - 104)) | (1 << (KotlinParser.LabelReference - 104)))) != 0):
                self.state = 842
                self.functionValueParameter()
                self.state = 847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.COMMA:
                    self.state = 843
                    self.match(KotlinParser.COMMA)
                    self.state = 844
                    self.functionValueParameter()
                    self.state = 849
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 852
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionValueParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameter(self):
            return self.getTypedRuleContext(KotlinParser.ParameterContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_functionValueParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionValueParameter" ):
                listener.enterFunctionValueParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionValueParameter" ):
                listener.exitFunctionValueParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionValueParameter" ):
                return visitor.visitFunctionValueParameter(self)
            else:
                return visitor.visitChildren(self)




    def functionValueParameter(self):

        localctx = KotlinParser.FunctionValueParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_functionValueParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 854
                self.modifierList()


            self.state = 857
            self.parameter()
            self.state = 860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.ASSIGNMENT:
                self.state = 858
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 859
                self.expression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter" ):
                listener.enterParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter" ):
                listener.exitParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameter" ):
                return visitor.visitParameter(self)
            else:
                return visitor.visitChildren(self)




    def parameter(self):

        localctx = KotlinParser.ParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_parameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 862
            self.simpleIdentifier()
            self.state = 863
            self.match(KotlinParser.COLON)
            self.state = 864
            self.type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionBody" ):
                listener.enterFunctionBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionBody" ):
                listener.exitFunctionBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionBody" ):
                return visitor.visitFunctionBody(self)
            else:
                return visitor.visitChildren(self)




    def functionBody(self):

        localctx = KotlinParser.FunctionBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_functionBody)
        try:
            self.state = 875
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LCURL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 866
                self.block()
                pass
            elif token in [KotlinParser.ASSIGNMENT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 867
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 871
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,105,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 868
                        self.match(KotlinParser.NL) 
                    self.state = 873
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,105,self._ctx)

                self.state = 874
                self.expression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(KotlinParser.OBJECT, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def primaryConstructor(self):
            return self.getTypedRuleContext(KotlinParser.PrimaryConstructorContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_objectDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectDeclaration" ):
                listener.enterObjectDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectDeclaration" ):
                listener.exitObjectDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectDeclaration" ):
                return visitor.visitObjectDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def objectDeclaration(self):

        localctx = KotlinParser.ObjectDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_objectDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 877
                self.modifierList()


            self.state = 880
            self.match(KotlinParser.OBJECT)
            self.state = 884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 881
                self.match(KotlinParser.NL)
                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 887
            self.simpleIdentifier()
            self.state = 895
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
            if la_ == 1:
                self.state = 891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 888
                    self.match(KotlinParser.NL)
                    self.state = 893
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 894
                self.primaryConstructor()


            self.state = 911
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 897
                    self.match(KotlinParser.NL)
                    self.state = 902
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 903
                self.match(KotlinParser.COLON)
                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 904
                    self.match(KotlinParser.NL)
                    self.state = 909
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 910
                self.delegationSpecifiers()


            self.state = 920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 913
                    self.match(KotlinParser.NL)
                    self.state = 918
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 919
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompanionObjectContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPANION(self):
            return self.getToken(KotlinParser.COMPANION, 0)

        def OBJECT(self):
            return self.getToken(KotlinParser.OBJECT, 0)

        def modifierList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ModifierListContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ModifierListContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_companionObject

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompanionObject" ):
                listener.enterCompanionObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompanionObject" ):
                listener.exitCompanionObject(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompanionObject" ):
                return visitor.visitCompanionObject(self)
            else:
                return visitor.visitChildren(self)




    def companionObject(self):

        localctx = KotlinParser.CompanionObjectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_companionObject)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 922
                self.modifierList()


            self.state = 925
            self.match(KotlinParser.COMPANION)
            self.state = 929
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 926
                self.match(KotlinParser.NL)
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 932
                self.modifierList()


            self.state = 935
            self.match(KotlinParser.OBJECT)
            self.state = 943
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 936
                    self.match(KotlinParser.NL)
                    self.state = 941
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 942
                self.simpleIdentifier()


            self.state = 959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 945
                    self.match(KotlinParser.NL)
                    self.state = 950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 951
                self.match(KotlinParser.COLON)
                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 952
                    self.match(KotlinParser.NL)
                    self.state = 957
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 958
                self.delegationSpecifiers()


            self.state = 968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
            if la_ == 1:
                self.state = 964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 961
                    self.match(KotlinParser.NL)
                    self.state = 966
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 967
                self.classBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VAL(self):
            return self.getToken(KotlinParser.VAL, 0)

        def VAR(self):
            return self.getToken(KotlinParser.VAR, 0)

        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def typeConstraints(self):
            return self.getTypedRuleContext(KotlinParser.TypeConstraintsContext,0)


        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def getter(self):
            return self.getTypedRuleContext(KotlinParser.GetterContext,0)


        def setter(self):
            return self.getTypedRuleContext(KotlinParser.SetterContext,0)


        def multiVariableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.MultiVariableDeclarationContext,0)


        def variableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,0)


        def BY(self):
            return self.getToken(KotlinParser.BY, 0)

        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_propertyDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyDeclaration" ):
                listener.enterPropertyDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyDeclaration" ):
                listener.exitPropertyDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyDeclaration" ):
                return visitor.visitPropertyDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def propertyDeclaration(self):

        localctx = KotlinParser.PropertyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_propertyDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 970
                self.modifierList()


            self.state = 973
            _la = self._input.LA(1)
            if not(_la==KotlinParser.VAL or _la==KotlinParser.VAR):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 981
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.state = 977
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 974
                    self.match(KotlinParser.NL)
                    self.state = 979
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 980
                self.typeParameters()


            self.state = 998
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 983
                    self.match(KotlinParser.NL)
                    self.state = 988
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 989
                self.type()
                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 990
                    self.match(KotlinParser.NL)
                    self.state = 995
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 996
                self.match(KotlinParser.DOT)


            self.state = 1003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1000
                self.match(KotlinParser.NL)
                self.state = 1005
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1008
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LPAREN]:
                self.state = 1006
                self.multiVariableDeclaration()
                pass
            elif token in [KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier]:
                self.state = 1007
                self.variableDeclaration()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 1017
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
            if la_ == 1:
                self.state = 1013
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1010
                    self.match(KotlinParser.NL)
                    self.state = 1015
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1016
                self.typeConstraints()


            self.state = 1033
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,138,self._ctx)
            if la_ == 1:
                self.state = 1022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1019
                    self.match(KotlinParser.NL)
                    self.state = 1024
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1025
                _la = self._input.LA(1)
                if not(_la==KotlinParser.ASSIGNMENT or _la==KotlinParser.BY):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1029
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,137,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1026
                        self.match(KotlinParser.NL) 
                    self.state = 1031
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,137,self._ctx)

                self.state = 1032
                self.expression()


            self.state = 1047
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.state = 1035
                self.getter()
                self.state = 1039
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
                if la_ == 1:
                    self.state = 1036
                    self.semi()
                    self.state = 1037
                    self.setter()



            elif la_ == 2:
                self.state = 1041
                self.setter()
                self.state = 1045
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1042
                    self.semi()
                    self.state = 1043
                    self.getter()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiVariableDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def variableDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.VariableDeclarationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,i)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiVariableDeclaration" ):
                listener.enterMultiVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiVariableDeclaration" ):
                listener.exitMultiVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiVariableDeclaration" ):
                return visitor.visitMultiVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def multiVariableDeclaration(self):

        localctx = KotlinParser.MultiVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_multiVariableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.match(KotlinParser.LPAREN)
            self.state = 1050
            self.variableDeclaration()
            self.state = 1055
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.COMMA:
                self.state = 1051
                self.match(KotlinParser.COMMA)
                self.state = 1052
                self.variableDeclaration()
                self.state = 1057
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1058
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_variableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableDeclaration" ):
                listener.enterVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableDeclaration" ):
                listener.exitVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVariableDeclaration" ):
                return visitor.visitVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def variableDeclaration(self):

        localctx = KotlinParser.VariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_variableDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1060
            self.simpleIdentifier()
            self.state = 1063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.COLON:
                self.state = 1061
                self.match(KotlinParser.COLON)
                self.state = 1062
                self.type()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GETTER(self):
            return self.getToken(KotlinParser.GETTER, 0)

        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_getter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter" ):
                listener.enterGetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter" ):
                listener.exitGetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetter" ):
                return visitor.visitGetter(self)
            else:
                return visitor.visitChildren(self)




    def getter(self):

        localctx = KotlinParser.GetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_getter)
        self._la = 0 # Token type
        try:
            self.state = 1114
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                    self.state = 1065
                    self.modifierList()


                self.state = 1068
                self.match(KotlinParser.GETTER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1070
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                    self.state = 1069
                    self.modifierList()


                self.state = 1072
                self.match(KotlinParser.GETTER)
                self.state = 1076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1073
                    self.match(KotlinParser.NL)
                    self.state = 1078
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1079
                self.match(KotlinParser.LPAREN)
                self.state = 1080
                self.match(KotlinParser.RPAREN)
                self.state = 1095
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                if la_ == 1:
                    self.state = 1084
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1081
                        self.match(KotlinParser.NL)
                        self.state = 1086
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1087
                    self.match(KotlinParser.COLON)
                    self.state = 1091
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1088
                        self.match(KotlinParser.NL)
                        self.state = 1093
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1094
                    self.type()


                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1097
                    self.match(KotlinParser.NL)
                    self.state = 1102
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1112
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [KotlinParser.LCURL]:
                    self.state = 1103
                    self.block()
                    pass
                elif token in [KotlinParser.ASSIGNMENT]:
                    self.state = 1104
                    self.match(KotlinParser.ASSIGNMENT)
                    self.state = 1108
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,151,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1105
                            self.match(KotlinParser.NL) 
                        self.state = 1110
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,151,self._ctx)

                    self.state = 1111
                    self.expression()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SETTER(self):
            return self.getToken(KotlinParser.SETTER, 0)

        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def functionBody(self):
            return self.getTypedRuleContext(KotlinParser.FunctionBodyContext,0)


        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def parameter(self):
            return self.getTypedRuleContext(KotlinParser.ParameterContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def parameterModifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ParameterModifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ParameterModifierContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_setter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter" ):
                listener.enterSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter" ):
                listener.exitSetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetter" ):
                return visitor.visitSetter(self)
            else:
                return visitor.visitChildren(self)




    def setter(self):

        localctx = KotlinParser.SetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_setter)
        self._la = 0 # Token type
        try:
            self.state = 1151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                    self.state = 1116
                    self.modifierList()


                self.state = 1119
                self.match(KotlinParser.SETTER)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                    self.state = 1120
                    self.modifierList()


                self.state = 1123
                self.match(KotlinParser.SETTER)
                self.state = 1127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1124
                    self.match(KotlinParser.NL)
                    self.state = 1129
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1130
                self.match(KotlinParser.LPAREN)
                self.state = 1135
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,158,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1133
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [KotlinParser.AT, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.LabelReference]:
                            self.state = 1131
                            self.annotations()
                            pass
                        elif token in [KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE]:
                            self.state = 1132
                            self.parameterModifier()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 1137
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,158,self._ctx)

                self.state = 1140
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1138
                    self.simpleIdentifier()
                    pass

                elif la_ == 2:
                    self.state = 1139
                    self.parameter()
                    pass


                self.state = 1142
                self.match(KotlinParser.RPAREN)
                self.state = 1146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1143
                    self.match(KotlinParser.NL)
                    self.state = 1148
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1149
                self.functionBody()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeAliasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TYPE_ALIAS(self):
            return self.getToken(KotlinParser.TYPE_ALIAS, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def typeParameters(self):
            return self.getTypedRuleContext(KotlinParser.TypeParametersContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeAlias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeAlias" ):
                listener.enterTypeAlias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeAlias" ):
                listener.exitTypeAlias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeAlias" ):
                return visitor.visitTypeAlias(self)
            else:
                return visitor.visitChildren(self)




    def typeAlias(self):

        localctx = KotlinParser.TypeAliasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_typeAlias)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (KotlinParser.IN - 89)) | (1 << (KotlinParser.OUT - 89)) | (1 << (KotlinParser.FIELD - 89)) | (1 << (KotlinParser.PROPERTY - 89)) | (1 << (KotlinParser.GET - 89)) | (1 << (KotlinParser.SET - 89)) | (1 << (KotlinParser.RECEIVER - 89)) | (1 << (KotlinParser.PARAM - 89)) | (1 << (KotlinParser.SETPARAM - 89)) | (1 << (KotlinParser.DELEGATE - 89)) | (1 << (KotlinParser.PUBLIC - 89)) | (1 << (KotlinParser.PRIVATE - 89)) | (1 << (KotlinParser.PROTECTED - 89)) | (1 << (KotlinParser.INTERNAL - 89)) | (1 << (KotlinParser.ENUM - 89)) | (1 << (KotlinParser.SEALED - 89)) | (1 << (KotlinParser.ANNOTATION - 89)) | (1 << (KotlinParser.DATA - 89)) | (1 << (KotlinParser.INNER - 89)) | (1 << (KotlinParser.TAILREC - 89)) | (1 << (KotlinParser.OPERATOR - 89)) | (1 << (KotlinParser.INLINE - 89)) | (1 << (KotlinParser.INFIX - 89)) | (1 << (KotlinParser.EXTERNAL - 89)) | (1 << (KotlinParser.SUSPEND - 89)) | (1 << (KotlinParser.OVERRIDE - 89)) | (1 << (KotlinParser.ABSTRACT - 89)) | (1 << (KotlinParser.FINAL - 89)) | (1 << (KotlinParser.OPEN - 89)) | (1 << (KotlinParser.CONST - 89)) | (1 << (KotlinParser.LATEINIT - 89)) | (1 << (KotlinParser.VARARG - 89)) | (1 << (KotlinParser.NOINLINE - 89)) | (1 << (KotlinParser.CROSSINLINE - 89)) | (1 << (KotlinParser.REIFIED - 89)) | (1 << (KotlinParser.LabelReference - 89)))) != 0):
                self.state = 1153
                self.modifierList()


            self.state = 1156
            self.match(KotlinParser.TYPE_ALIAS)
            self.state = 1160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1157
                self.match(KotlinParser.NL)
                self.state = 1162
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1163
            self.simpleIdentifier()
            self.state = 1171
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.state = 1167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1164
                    self.match(KotlinParser.NL)
                    self.state = 1169
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1170
                self.typeParameters()


            self.state = 1176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1173
                self.match(KotlinParser.NL)
                self.state = 1178
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1179
            self.match(KotlinParser.ASSIGNMENT)
            self.state = 1183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1180
                self.match(KotlinParser.NL)
                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1186
            self.type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def typeParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeParameterContext,i)


        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameters" ):
                listener.enterTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameters" ):
                listener.exitTypeParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameters" ):
                return visitor.visitTypeParameters(self)
            else:
                return visitor.visitChildren(self)




    def typeParameters(self):

        localctx = KotlinParser.TypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_typeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188
            self.match(KotlinParser.LANGLE)
            self.state = 1192
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1189
                    self.match(KotlinParser.NL) 
                self.state = 1194
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

            self.state = 1195
            self.typeParameter()
            self.state = 1212
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,171,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1199
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1196
                        self.match(KotlinParser.NL)
                        self.state = 1201
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1202
                    self.match(KotlinParser.COMMA)
                    self.state = 1206
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1203
                            self.match(KotlinParser.NL) 
                        self.state = 1208
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

                    self.state = 1209
                    self.typeParameter() 
                self.state = 1214
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,171,self._ctx)

            self.state = 1218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1215
                self.match(KotlinParser.NL)
                self.state = 1220
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1221
            self.match(KotlinParser.RANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def modifierList(self):
            return self.getTypedRuleContext(KotlinParser.ModifierListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameter" ):
                listener.enterTypeParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameter" ):
                listener.exitTypeParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameter" ):
                return visitor.visitTypeParameter(self)
            else:
                return visitor.visitChildren(self)




    def typeParameter(self):

        localctx = KotlinParser.TypeParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_typeParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1224
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.state = 1223
                self.modifierList()


            self.state = 1229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1226
                self.match(KotlinParser.NL)
                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1232
            self.simpleIdentifier()
            self.state = 1247
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.state = 1236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1233
                    self.match(KotlinParser.NL)
                    self.state = 1238
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1239
                self.match(KotlinParser.COLON)
                self.state = 1243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1240
                    self.match(KotlinParser.NL)
                    self.state = 1245
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1246
                self.type()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionType(self):
            return self.getTypedRuleContext(KotlinParser.FunctionTypeContext,0)


        def parenthesizedType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedTypeContext,0)


        def nullableType(self):
            return self.getTypedRuleContext(KotlinParser.NullableTypeContext,0)


        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def typeModifierList(self):
            return self.getTypedRuleContext(KotlinParser.TypeModifierListContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_type

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterType" ):
                listener.enterType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitType" ):
                listener.exitType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitType" ):
                return visitor.visitType(self)
            else:
                return visitor.visitChildren(self)




    def type(self):

        localctx = KotlinParser.TypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_type)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1250
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
            if la_ == 1:
                self.state = 1249
                self.typeModifierList()


            self.state = 1256
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
            if la_ == 1:
                self.state = 1252
                self.functionType()
                pass

            elif la_ == 2:
                self.state = 1253
                self.parenthesizedType()
                pass

            elif la_ == 3:
                self.state = 1254
                self.nullableType()
                pass

            elif la_ == 4:
                self.state = 1255
                self.typeReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeModifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def SUSPEND(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.SUSPEND)
            else:
                return self.getToken(KotlinParser.SUSPEND, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeModifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeModifierList" ):
                listener.enterTypeModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeModifierList" ):
                listener.exitTypeModifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeModifierList" ):
                return visitor.visitTypeModifierList(self)
            else:
                return visitor.visitChildren(self)




    def typeModifierList(self):

        localctx = KotlinParser.TypeModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_typeModifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1266 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1266
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [KotlinParser.AT, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.LabelReference]:
                        self.state = 1258
                        self.annotations()
                        pass
                    elif token in [KotlinParser.SUSPEND]:
                        self.state = 1259
                        self.match(KotlinParser.SUSPEND)
                        self.state = 1263
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 1260
                            self.match(KotlinParser.NL)
                            self.state = 1265
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 1268 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,182,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_parenthesizedType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedType" ):
                listener.enterParenthesizedType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedType" ):
                listener.exitParenthesizedType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedType" ):
                return visitor.visitParenthesizedType(self)
            else:
                return visitor.visitChildren(self)




    def parenthesizedType(self):

        localctx = KotlinParser.ParenthesizedTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_parenthesizedType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1270
            self.match(KotlinParser.LPAREN)
            self.state = 1271
            self.type()
            self.state = 1272
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullableTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def parenthesizedType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedTypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def QUEST(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.QUEST)
            else:
                return self.getToken(KotlinParser.QUEST, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_nullableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullableType" ):
                listener.enterNullableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullableType" ):
                listener.exitNullableType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNullableType" ):
                return visitor.visitNullableType(self)
            else:
                return visitor.visitChildren(self)




    def nullableType(self):

        localctx = KotlinParser.NullableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_nullableType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.state = 1274
                self.typeReference()
                pass

            elif la_ == 2:
                self.state = 1275
                self.parenthesizedType()
                pass


            self.state = 1281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1278
                self.match(KotlinParser.NL)
                self.state = 1283
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1285 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1284
                    self.match(KotlinParser.QUEST)

                else:
                    raise NoViableAltException(self)
                self.state = 1287 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,185,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def DYNAMIC(self):
            return self.getToken(KotlinParser.DYNAMIC, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeReference" ):
                listener.enterTypeReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeReference" ):
                listener.exitTypeReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeReference" ):
                return visitor.visitTypeReference(self)
            else:
                return visitor.visitChildren(self)




    def typeReference(self):

        localctx = KotlinParser.TypeReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_typeReference)
        try:
            self.state = 1295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1289
                self.match(KotlinParser.LPAREN)
                self.state = 1290
                self.typeReference()
                self.state = 1291
                self.match(KotlinParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1293
                self.userType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1294
                self.match(KotlinParser.DYNAMIC)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionTypeParameters(self):
            return self.getTypedRuleContext(KotlinParser.FunctionTypeParametersContext,0)


        def ARROW(self):
            return self.getToken(KotlinParser.ARROW, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def functionTypeReceiver(self):
            return self.getTypedRuleContext(KotlinParser.FunctionTypeReceiverContext,0)


        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionType" ):
                listener.enterFunctionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionType" ):
                listener.exitFunctionType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionType" ):
                return visitor.visitFunctionType(self)
            else:
                return visitor.visitChildren(self)




    def functionType(self):

        localctx = KotlinParser.FunctionTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_functionType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1311
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
            if la_ == 1:
                self.state = 1297
                self.functionTypeReceiver()
                self.state = 1301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1298
                    self.match(KotlinParser.NL)
                    self.state = 1303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1304
                self.match(KotlinParser.DOT)
                self.state = 1308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1305
                    self.match(KotlinParser.NL)
                    self.state = 1310
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1313
            self.functionTypeParameters()
            self.state = 1317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1314
                self.match(KotlinParser.NL)
                self.state = 1319
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1320
            self.match(KotlinParser.ARROW)

            self.state = 1324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1321
                self.match(KotlinParser.NL)
                self.state = 1326
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1327
            self.type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeReceiverContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parenthesizedType(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedTypeContext,0)


        def nullableType(self):
            return self.getTypedRuleContext(KotlinParser.NullableTypeContext,0)


        def typeReference(self):
            return self.getTypedRuleContext(KotlinParser.TypeReferenceContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_functionTypeReceiver

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeReceiver" ):
                listener.enterFunctionTypeReceiver(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeReceiver" ):
                listener.exitFunctionTypeReceiver(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeReceiver" ):
                return visitor.visitFunctionTypeReceiver(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeReceiver(self):

        localctx = KotlinParser.FunctionTypeReceiverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_functionTypeReceiver)
        try:
            self.state = 1332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1329
                self.parenthesizedType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1330
                self.nullableType()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1331
                self.typeReference()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleUserType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SimpleUserTypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SimpleUserTypeContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DOT)
            else:
                return self.getToken(KotlinParser.DOT, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_userType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserType" ):
                listener.enterUserType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserType" ):
                listener.exitUserType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserType" ):
                return visitor.visitUserType(self)
            else:
                return visitor.visitChildren(self)




    def userType(self):

        localctx = KotlinParser.UserTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_userType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            self.simpleUserType()
            self.state = 1351
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,195,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1338
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1335
                        self.match(KotlinParser.NL)
                        self.state = 1340
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1341
                    self.match(KotlinParser.DOT)
                    self.state = 1345
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1342
                        self.match(KotlinParser.NL)
                        self.state = 1347
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1348
                    self.simpleUserType() 
                self.state = 1353
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,195,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleUserTypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_simpleUserType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleUserType" ):
                listener.enterSimpleUserType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleUserType" ):
                listener.exitSimpleUserType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleUserType" ):
                return visitor.visitSimpleUserType(self)
            else:
                return visitor.visitChildren(self)




    def simpleUserType(self):

        localctx = KotlinParser.SimpleUserTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_simpleUserType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1354
            self.simpleIdentifier()
            self.state = 1362
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 1358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1355
                    self.match(KotlinParser.NL)
                    self.state = 1360
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1361
                self.typeArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionTypeParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ParameterContext,i)


        def type(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionTypeParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionTypeParameters" ):
                listener.enterFunctionTypeParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionTypeParameters" ):
                listener.exitFunctionTypeParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionTypeParameters" ):
                return visitor.visitFunctionTypeParameters(self)
            else:
                return visitor.visitChildren(self)




    def functionTypeParameters(self):

        localctx = KotlinParser.FunctionTypeParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_functionTypeParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self.match(KotlinParser.LPAREN)
            self.state = 1367
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.state = 1365
                self.parameter()

            elif la_ == 2:
                self.state = 1366
                self.type()


            self.state = 1376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.COMMA:
                self.state = 1369
                self.match(KotlinParser.COMMA)
                self.state = 1372
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
                if la_ == 1:
                    self.state = 1370
                    self.parameter()
                    pass

                elif la_ == 2:
                    self.state = 1371
                    self.type()
                    pass


                self.state = 1378
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1379
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeConstraintsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHERE(self):
            return self.getToken(KotlinParser.WHERE, 0)

        def typeConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeConstraintContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeConstraintContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeConstraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstraints" ):
                listener.enterTypeConstraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstraints" ):
                listener.exitTypeConstraints(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstraints" ):
                return visitor.visitTypeConstraints(self)
            else:
                return visitor.visitChildren(self)




    def typeConstraints(self):

        localctx = KotlinParser.TypeConstraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_typeConstraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1381
            self.match(KotlinParser.WHERE)
            self.state = 1385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1382
                self.match(KotlinParser.NL)
                self.state = 1387
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1388
            self.typeConstraint()
            self.state = 1405
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,204,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1392
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1389
                        self.match(KotlinParser.NL)
                        self.state = 1394
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1395
                    self.match(KotlinParser.COMMA)
                    self.state = 1399
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1396
                        self.match(KotlinParser.NL)
                        self.state = 1401
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1402
                    self.typeConstraint() 
                self.state = 1407
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,204,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeConstraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeConstraint" ):
                listener.enterTypeConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeConstraint" ):
                listener.exitTypeConstraint(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeConstraint" ):
                return visitor.visitTypeConstraint(self)
            else:
                return visitor.visitChildren(self)




    def typeConstraint(self):

        localctx = KotlinParser.TypeConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_typeConstraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)) | (1 << (KotlinParser.LabelReference - 93)))) != 0):
                self.state = 1408
                self.annotations()
                self.state = 1413
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1414
            self.simpleIdentifier()
            self.state = 1418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1415
                self.match(KotlinParser.NL)
                self.state = 1420
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1421
            self.match(KotlinParser.COLON)
            self.state = 1425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1422
                self.match(KotlinParser.NL)
                self.state = 1427
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1428
            self.type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def statements(self):
            return self.getTypedRuleContext(KotlinParser.StatementsContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_block

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlock" ):
                listener.enterBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlock" ):
                listener.exitBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlock" ):
                return visitor.visitBlock(self)
            else:
                return visitor.visitChildren(self)




    def block(self):

        localctx = KotlinParser.BlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_block)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self.match(KotlinParser.LCURL)
            self.state = 1431
            self.statements()
            self.state = 1432
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anysemi(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnysemiContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnysemiContext,i)


        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.StatementContext)
            else:
                return self.getTypedRuleContext(KotlinParser.StatementContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatements" ):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)




    def statements(self):

        localctx = KotlinParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_statements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1437
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,208,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1434
                    self.anysemi() 
                self.state = 1439
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,208,self._ctx)

            self.state = 1454
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,212,self._ctx)
            if la_ == 1:
                self.state = 1440
                self.statement()
                self.state = 1451
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1442 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 1441
                                self.anysemi()

                            else:
                                raise NoViableAltException(self)
                            self.state = 1444 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,209,self._ctx)

                        self.state = 1447
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                        if la_ == 1:
                            self.state = 1446
                            self.statement()

                 
                    self.state = 1453
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,211,self._ctx)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(KotlinParser.DeclarationContext,0)


        def blockLevelExpression(self):
            return self.getTypedRuleContext(KotlinParser.BlockLevelExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = KotlinParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_statement)
        try:
            self.state = 1458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,213,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1456
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1457
                self.blockLevelExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockLevelExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_blockLevelExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockLevelExpression" ):
                listener.enterBlockLevelExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockLevelExpression" ):
                listener.exitBlockLevelExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockLevelExpression" ):
                return visitor.visitBlockLevelExpression(self)
            else:
                return visitor.visitChildren(self)




    def blockLevelExpression(self):

        localctx = KotlinParser.BlockLevelExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_blockLevelExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1463
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,214,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1460
                    self.annotations() 
                self.state = 1465
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,214,self._ctx)

            self.state = 1469
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,215,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1466
                    self.match(KotlinParser.NL) 
                self.state = 1471
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,215,self._ctx)

            self.state = 1472
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.ClassDeclarationContext,0)


        def functionDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.FunctionDeclarationContext,0)


        def propertyDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.PropertyDeclarationContext,0)


        def typeAlias(self):
            return self.getTypedRuleContext(KotlinParser.TypeAliasContext,0)


        def labelDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LabelDefinitionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LabelDefinitionContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = KotlinParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.LabelDefinition:
                self.state = 1474
                self.labelDefinition()
                self.state = 1479
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                self.state = 1480
                self.classDeclaration()
                pass

            elif la_ == 2:
                self.state = 1481
                self.functionDeclaration()
                pass

            elif la_ == 3:
                self.state = 1482
                self.propertyDeclaration()
                pass

            elif la_ == 4:
                self.state = 1483
                self.typeAlias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def disjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.DisjunctionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.DisjunctionContext,i)


        def assignmentOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AssignmentOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AssignmentOperatorContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = KotlinParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_expression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1486
            self.disjunction()
            self.state = 1492
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,218,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1487
                    self.assignmentOperator()
                    self.state = 1488
                    self.disjunction() 
                self.state = 1494
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,218,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisjunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conjunction(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ConjunctionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ConjunctionContext,i)


        def DISJ(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DISJ)
            else:
                return self.getToken(KotlinParser.DISJ, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_disjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDisjunction" ):
                listener.enterDisjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDisjunction" ):
                listener.exitDisjunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisjunction" ):
                return visitor.visitDisjunction(self)
            else:
                return visitor.visitChildren(self)




    def disjunction(self):

        localctx = KotlinParser.DisjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_disjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1495
            self.conjunction()
            self.state = 1512
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,221,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1499
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1496
                        self.match(KotlinParser.NL)
                        self.state = 1501
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1502
                    self.match(KotlinParser.DISJ)
                    self.state = 1506
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,220,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1503
                            self.match(KotlinParser.NL) 
                        self.state = 1508
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,220,self._ctx)

                    self.state = 1509
                    self.conjunction() 
                self.state = 1514
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,221,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConjunctionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityComparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.EqualityComparisonContext)
            else:
                return self.getTypedRuleContext(KotlinParser.EqualityComparisonContext,i)


        def CONJ(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.CONJ)
            else:
                return self.getToken(KotlinParser.CONJ, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_conjunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConjunction" ):
                listener.enterConjunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConjunction" ):
                listener.exitConjunction(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConjunction" ):
                return visitor.visitConjunction(self)
            else:
                return visitor.visitChildren(self)




    def conjunction(self):

        localctx = KotlinParser.ConjunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_conjunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1515
            self.equalityComparison()
            self.state = 1532
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,224,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1519
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1516
                        self.match(KotlinParser.NL)
                        self.state = 1521
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1522
                    self.match(KotlinParser.CONJ)
                    self.state = 1526
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,223,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1523
                            self.match(KotlinParser.NL) 
                        self.state = 1528
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,223,self._ctx)

                    self.state = 1529
                    self.equalityComparison() 
                self.state = 1534
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,224,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ComparisonContext,i)


        def equalityOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.EqualityOperationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.EqualityOperationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_equalityComparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityComparison" ):
                listener.enterEqualityComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityComparison" ):
                listener.exitEqualityComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityComparison" ):
                return visitor.visitEqualityComparison(self)
            else:
                return visitor.visitChildren(self)




    def equalityComparison(self):

        localctx = KotlinParser.EqualityComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_equalityComparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1535
            self.comparison()
            self.state = 1547
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,226,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1536
                    self.equalityOperation()
                    self.state = 1540
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,225,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1537
                            self.match(KotlinParser.NL) 
                        self.state = 1542
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,225,self._ctx)

                    self.state = 1543
                    self.comparison() 
                self.state = 1549
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,226,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namedInfix(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.NamedInfixContext)
            else:
                return self.getTypedRuleContext(KotlinParser.NamedInfixContext,i)


        def comparisonOperator(self):
            return self.getTypedRuleContext(KotlinParser.ComparisonOperatorContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)




    def comparison(self):

        localctx = KotlinParser.ComparisonContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_comparison)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1550
            self.namedInfix()
            self.state = 1560
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 1551
                self.comparisonOperator()
                self.state = 1555
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,227,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1552
                        self.match(KotlinParser.NL) 
                    self.state = 1557
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,227,self._ctx)

                self.state = 1558
                self.namedInfix()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamedInfixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def elvisExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ElvisExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ElvisExpressionContext,i)


        def isOperator(self):
            return self.getTypedRuleContext(KotlinParser.IsOperatorContext,0)


        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def inOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.InOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.InOperatorContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_namedInfix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamedInfix" ):
                listener.enterNamedInfix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamedInfix" ):
                listener.exitNamedInfix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamedInfix" ):
                return visitor.visitNamedInfix(self)
            else:
                return visitor.visitChildren(self)




    def namedInfix(self):

        localctx = KotlinParser.NamedInfixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_namedInfix)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1562
            self.elvisExpression()
            self.state = 1585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
            if la_ == 1:
                self.state = 1572 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1563
                        self.inOperator()
                        self.state = 1567
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,229,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 1564
                                self.match(KotlinParser.NL) 
                            self.state = 1569
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,229,self._ctx)

                        self.state = 1570
                        self.elvisExpression()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1574 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,230,self._ctx)


            elif la_ == 2:
                self.state = 1576
                self.isOperator()
                self.state = 1580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1577
                    self.match(KotlinParser.NL)
                    self.state = 1582
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1583
                self.type()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElvisExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def infixFunctionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.InfixFunctionCallContext)
            else:
                return self.getTypedRuleContext(KotlinParser.InfixFunctionCallContext,i)


        def ELVIS(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.ELVIS)
            else:
                return self.getToken(KotlinParser.ELVIS, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_elvisExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElvisExpression" ):
                listener.enterElvisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElvisExpression" ):
                listener.exitElvisExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElvisExpression" ):
                return visitor.visitElvisExpression(self)
            else:
                return visitor.visitChildren(self)




    def elvisExpression(self):

        localctx = KotlinParser.ElvisExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_elvisExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1587
            self.infixFunctionCall()
            self.state = 1604
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,235,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1591
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1588
                        self.match(KotlinParser.NL)
                        self.state = 1593
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1594
                    self.match(KotlinParser.ELVIS)
                    self.state = 1598
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,234,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1595
                            self.match(KotlinParser.NL) 
                        self.state = 1600
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,234,self._ctx)

                    self.state = 1601
                    self.infixFunctionCall() 
                self.state = 1606
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,235,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InfixFunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rangeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.RangeExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.RangeExpressionContext,i)


        def simpleIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SimpleIdentifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_infixFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInfixFunctionCall" ):
                listener.enterInfixFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInfixFunctionCall" ):
                listener.exitInfixFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInfixFunctionCall" ):
                return visitor.visitInfixFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def infixFunctionCall(self):

        localctx = KotlinParser.InfixFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_infixFunctionCall)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1607
            self.rangeExpression()
            self.state = 1619
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,237,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1608
                    self.simpleIdentifier()
                    self.state = 1612
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,236,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1609
                            self.match(KotlinParser.NL) 
                        self.state = 1614
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,236,self._ctx)

                    self.state = 1615
                    self.rangeExpression() 
                self.state = 1621
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,237,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AdditiveExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AdditiveExpressionContext,i)


        def RANGE(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.RANGE)
            else:
                return self.getToken(KotlinParser.RANGE, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_rangeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeExpression" ):
                listener.enterRangeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeExpression" ):
                listener.exitRangeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeExpression" ):
                return visitor.visitRangeExpression(self)
            else:
                return visitor.visitChildren(self)




    def rangeExpression(self):

        localctx = KotlinParser.RangeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_rangeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1622
            self.additiveExpression()
            self.state = 1633
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,239,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1623
                    self.match(KotlinParser.RANGE)
                    self.state = 1627
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,238,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1624
                            self.match(KotlinParser.NL) 
                        self.state = 1629
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,238,self._ctx)

                    self.state = 1630
                    self.additiveExpression() 
                self.state = 1635
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,239,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiplicativeExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiplicativeExpressionContext,i)


        def additiveOperator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AdditiveOperatorContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AdditiveOperatorContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_additiveExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveExpression" ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveExpression" ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveExpression" ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)




    def additiveExpression(self):

        localctx = KotlinParser.AdditiveExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_additiveExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1636
            self.multiplicativeExpression()
            self.state = 1648
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,241,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1637
                    self.additiveOperator()
                    self.state = 1641
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,240,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1638
                            self.match(KotlinParser.NL) 
                        self.state = 1643
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,240,self._ctx)

                    self.state = 1644
                    self.multiplicativeExpression() 
                self.state = 1650
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,241,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeRHS(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeRHSContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeRHSContext,i)


        def multiplicativeOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiplicativeOperationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiplicativeOperationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiplicativeExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeExpression" ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeExpression" ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeExpression" ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)




    def multiplicativeExpression(self):

        localctx = KotlinParser.MultiplicativeExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_multiplicativeExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1651
            self.typeRHS()
            self.state = 1663
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,243,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1652
                    self.multiplicativeOperation()
                    self.state = 1656
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,242,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1653
                            self.match(KotlinParser.NL) 
                        self.state = 1658
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,242,self._ctx)

                    self.state = 1659
                    self.typeRHS() 
                self.state = 1665
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,243,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeRHSContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prefixUnaryExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.PrefixUnaryExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.PrefixUnaryExpressionContext,i)


        def typeOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeOperationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeOperationContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeRHS

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeRHS" ):
                listener.enterTypeRHS(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeRHS" ):
                listener.exitTypeRHS(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeRHS" ):
                return visitor.visitTypeRHS(self)
            else:
                return visitor.visitChildren(self)




    def typeRHS(self):

        localctx = KotlinParser.TypeRHSContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_typeRHS)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1666
            self.prefixUnaryExpression()
            self.state = 1678
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,245,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1670
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1667
                        self.match(KotlinParser.NL)
                        self.state = 1672
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1673
                    self.typeOperation()
                    self.state = 1674
                    self.prefixUnaryExpression() 
                self.state = 1680
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,245,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixUnaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixUnaryExpression(self):
            return self.getTypedRuleContext(KotlinParser.PostfixUnaryExpressionContext,0)


        def prefixUnaryOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.PrefixUnaryOperationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.PrefixUnaryOperationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_prefixUnaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixUnaryExpression" ):
                listener.enterPrefixUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixUnaryExpression" ):
                listener.exitPrefixUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixUnaryExpression" ):
                return visitor.visitPrefixUnaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def prefixUnaryExpression(self):

        localctx = KotlinParser.PrefixUnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_prefixUnaryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1684
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,246,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1681
                    self.prefixUnaryOperation() 
                self.state = 1686
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,246,self._ctx)

            self.state = 1687
            self.postfixUnaryExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixUnaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def atomicExpression(self):
            return self.getTypedRuleContext(KotlinParser.AtomicExpressionContext,0)


        def callableReference(self):
            return self.getTypedRuleContext(KotlinParser.CallableReferenceContext,0)


        def postfixUnaryOperation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.PostfixUnaryOperationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.PostfixUnaryOperationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_postfixUnaryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixUnaryExpression" ):
                listener.enterPostfixUnaryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixUnaryExpression" ):
                listener.exitPostfixUnaryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixUnaryExpression" ):
                return visitor.visitPostfixUnaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def postfixUnaryExpression(self):

        localctx = KotlinParser.PostfixUnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_postfixUnaryExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,247,self._ctx)
            if la_ == 1:
                self.state = 1689
                self.atomicExpression()
                pass

            elif la_ == 2:
                self.state = 1690
                self.callableReference()
                pass


            self.state = 1696
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,248,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1693
                    self.postfixUnaryOperation() 
                self.state = 1698
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,248,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AtomicExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parenthesizedExpression(self):
            return self.getTypedRuleContext(KotlinParser.ParenthesizedExpressionContext,0)


        def literalConstant(self):
            return self.getTypedRuleContext(KotlinParser.LiteralConstantContext,0)


        def functionLiteral(self):
            return self.getTypedRuleContext(KotlinParser.FunctionLiteralContext,0)


        def thisExpression(self):
            return self.getTypedRuleContext(KotlinParser.ThisExpressionContext,0)


        def superExpression(self):
            return self.getTypedRuleContext(KotlinParser.SuperExpressionContext,0)


        def conditionalExpression(self):
            return self.getTypedRuleContext(KotlinParser.ConditionalExpressionContext,0)


        def tryExpression(self):
            return self.getTypedRuleContext(KotlinParser.TryExpressionContext,0)


        def objectLiteral(self):
            return self.getTypedRuleContext(KotlinParser.ObjectLiteralContext,0)


        def jumpExpression(self):
            return self.getTypedRuleContext(KotlinParser.JumpExpressionContext,0)


        def loopExpression(self):
            return self.getTypedRuleContext(KotlinParser.LoopExpressionContext,0)


        def collectionLiteral(self):
            return self.getTypedRuleContext(KotlinParser.CollectionLiteralContext,0)


        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_atomicExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomicExpression" ):
                listener.enterAtomicExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomicExpression" ):
                listener.exitAtomicExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtomicExpression" ):
                return visitor.visitAtomicExpression(self)
            else:
                return visitor.visitChildren(self)




    def atomicExpression(self):

        localctx = KotlinParser.AtomicExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_atomicExpression)
        try:
            self.state = 1711
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LPAREN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1699
                self.parenthesizedExpression()
                pass
            elif token in [KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN, KotlinParser.RealLiteral, KotlinParser.LongLiteral, KotlinParser.IntegerLiteral, KotlinParser.HexLiteral, KotlinParser.BinLiteral, KotlinParser.BooleanLiteral, KotlinParser.NullLiteral, KotlinParser.CharacterLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1700
                self.literalConstant()
                pass
            elif token in [KotlinParser.LCURL, KotlinParser.AT, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.LabelReference]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1701
                self.functionLiteral()
                pass
            elif token in [KotlinParser.THIS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1702
                self.thisExpression()
                pass
            elif token in [KotlinParser.SUPER]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1703
                self.superExpression()
                pass
            elif token in [KotlinParser.IF, KotlinParser.WHEN]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1704
                self.conditionalExpression()
                pass
            elif token in [KotlinParser.TRY]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1705
                self.tryExpression()
                pass
            elif token in [KotlinParser.OBJECT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1706
                self.objectLiteral()
                pass
            elif token in [KotlinParser.RETURN_AT, KotlinParser.CONTINUE_AT, KotlinParser.BREAK_AT, KotlinParser.THROW, KotlinParser.RETURN, KotlinParser.CONTINUE, KotlinParser.BREAK]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1707
                self.jumpExpression()
                pass
            elif token in [KotlinParser.FOR, KotlinParser.DO, KotlinParser.WHILE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1708
                self.loopExpression()
                pass
            elif token in [KotlinParser.LSQUARE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1709
                self.collectionLiteral()
                pass
            elif token in [KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1710
                self.simpleIdentifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParenthesizedExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_parenthesizedExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpression" ):
                listener.enterParenthesizedExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpression" ):
                listener.exitParenthesizedExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpression" ):
                return visitor.visitParenthesizedExpression(self)
            else:
                return visitor.visitChildren(self)




    def parenthesizedExpression(self):

        localctx = KotlinParser.ParenthesizedExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_parenthesizedExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1713
            self.match(KotlinParser.LPAREN)
            self.state = 1714
            self.expression()
            self.state = 1715
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallSuffixContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def annotatedLambda(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotatedLambdaContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotatedLambdaContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_callSuffix

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallSuffix" ):
                listener.enterCallSuffix(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallSuffix" ):
                listener.exitCallSuffix(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallSuffix" ):
                return visitor.visitCallSuffix(self)
            else:
                return visitor.visitChildren(self)




    def callSuffix(self):

        localctx = KotlinParser.CallSuffixContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_callSuffix)
        try:
            self.state = 1739
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LANGLE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1717
                self.typeArguments()
                self.state = 1719
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,250,self._ctx)
                if la_ == 1:
                    self.state = 1718
                    self.valueArguments()


                self.state = 1724
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,251,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1721
                        self.annotatedLambda() 
                    self.state = 1726
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,251,self._ctx)

                pass
            elif token in [KotlinParser.LPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1727
                self.valueArguments()
                self.state = 1731
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,252,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1728
                        self.annotatedLambda() 
                    self.state = 1733
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

                pass
            elif token in [KotlinParser.NL, KotlinParser.LCURL, KotlinParser.AT, KotlinParser.FILE, KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier, KotlinParser.LabelReference, KotlinParser.LabelDefinition]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1735 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1734
                        self.annotatedLambda()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1737 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,253,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotatedLambdaContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionLiteral(self):
            return self.getTypedRuleContext(KotlinParser.FunctionLiteralContext,0)


        def unescapedAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.UnescapedAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,i)


        def LabelDefinition(self):
            return self.getToken(KotlinParser.LabelDefinition, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotatedLambda

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotatedLambda" ):
                listener.enterAnnotatedLambda(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotatedLambda" ):
                listener.exitAnnotatedLambda(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotatedLambda" ):
                return visitor.visitAnnotatedLambda(self)
            else:
                return visitor.visitChildren(self)




    def annotatedLambda(self):

        localctx = KotlinParser.AnnotatedLambdaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_annotatedLambda)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1744
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0):
                self.state = 1741
                self.unescapedAnnotation()
                self.state = 1746
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1748
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.LabelDefinition:
                self.state = 1747
                self.match(KotlinParser.LabelDefinition)


            self.state = 1753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1750
                self.match(KotlinParser.NL)
                self.state = 1755
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1756
            self.functionLiteral()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArrayAccessContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(KotlinParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(KotlinParser.RSQUARE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_arrayAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayAccess" ):
                listener.enterArrayAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayAccess" ):
                listener.exitArrayAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayAccess" ):
                return visitor.visitArrayAccess(self)
            else:
                return visitor.visitChildren(self)




    def arrayAccess(self):

        localctx = KotlinParser.ArrayAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_arrayAccess)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1758
            self.match(KotlinParser.LSQUARE)
            self.state = 1767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.NL) | (1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL) | (1 << KotlinParser.COLONCOLON) | (1 << KotlinParser.Q_COLONCOLON) | (1 << KotlinParser.AT) | (1 << KotlinParser.RETURN_AT) | (1 << KotlinParser.CONTINUE_AT) | (1 << KotlinParser.BREAK_AT) | (1 << KotlinParser.FILE) | (1 << KotlinParser.IMPORT) | (1 << KotlinParser.OBJECT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KotlinParser.CONSTRUCTOR - 66)) | (1 << (KotlinParser.BY - 66)) | (1 << (KotlinParser.COMPANION - 66)) | (1 << (KotlinParser.INIT - 66)) | (1 << (KotlinParser.THIS - 66)) | (1 << (KotlinParser.SUPER - 66)) | (1 << (KotlinParser.WHERE - 66)) | (1 << (KotlinParser.IF - 66)) | (1 << (KotlinParser.WHEN - 66)) | (1 << (KotlinParser.TRY - 66)) | (1 << (KotlinParser.CATCH - 66)) | (1 << (KotlinParser.FINALLY - 66)) | (1 << (KotlinParser.FOR - 66)) | (1 << (KotlinParser.DO - 66)) | (1 << (KotlinParser.WHILE - 66)) | (1 << (KotlinParser.THROW - 66)) | (1 << (KotlinParser.RETURN - 66)) | (1 << (KotlinParser.CONTINUE - 66)) | (1 << (KotlinParser.BREAK - 66)) | (1 << (KotlinParser.OUT - 66)) | (1 << (KotlinParser.FIELD - 66)) | (1 << (KotlinParser.PROPERTY - 66)) | (1 << (KotlinParser.GET - 66)) | (1 << (KotlinParser.SET - 66)) | (1 << (KotlinParser.GETTER - 66)) | (1 << (KotlinParser.SETTER - 66)) | (1 << (KotlinParser.RECEIVER - 66)) | (1 << (KotlinParser.PARAM - 66)) | (1 << (KotlinParser.SETPARAM - 66)) | (1 << (KotlinParser.DELEGATE - 66)) | (1 << (KotlinParser.DYNAMIC - 66)) | (1 << (KotlinParser.PUBLIC - 66)) | (1 << (KotlinParser.PRIVATE - 66)) | (1 << (KotlinParser.PROTECTED - 66)) | (1 << (KotlinParser.INTERNAL - 66)) | (1 << (KotlinParser.ENUM - 66)) | (1 << (KotlinParser.SEALED - 66)) | (1 << (KotlinParser.ANNOTATION - 66)) | (1 << (KotlinParser.DATA - 66)) | (1 << (KotlinParser.INNER - 66)) | (1 << (KotlinParser.TAILREC - 66)) | (1 << (KotlinParser.OPERATOR - 66)) | (1 << (KotlinParser.INLINE - 66)) | (1 << (KotlinParser.INFIX - 66)) | (1 << (KotlinParser.EXTERNAL - 66)) | (1 << (KotlinParser.SUSPEND - 66)) | (1 << (KotlinParser.OVERRIDE - 66)) | (1 << (KotlinParser.ABSTRACT - 66)) | (1 << (KotlinParser.FINAL - 66)) | (1 << (KotlinParser.OPEN - 66)) | (1 << (KotlinParser.CONST - 66)) | (1 << (KotlinParser.LATEINIT - 66)) | (1 << (KotlinParser.VARARG - 66)) | (1 << (KotlinParser.NOINLINE - 66)) | (1 << (KotlinParser.CROSSINLINE - 66)) | (1 << (KotlinParser.REIFIED - 66)) | (1 << (KotlinParser.QUOTE_OPEN - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 130)) | (1 << (KotlinParser.RealLiteral - 130)) | (1 << (KotlinParser.LongLiteral - 130)) | (1 << (KotlinParser.IntegerLiteral - 130)) | (1 << (KotlinParser.HexLiteral - 130)) | (1 << (KotlinParser.BinLiteral - 130)) | (1 << (KotlinParser.BooleanLiteral - 130)) | (1 << (KotlinParser.NullLiteral - 130)) | (1 << (KotlinParser.Identifier - 130)) | (1 << (KotlinParser.LabelReference - 130)) | (1 << (KotlinParser.LabelDefinition - 130)) | (1 << (KotlinParser.CharacterLiteral - 130)))) != 0):
                self.state = 1759
                self.expression()
                self.state = 1764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.COMMA:
                    self.state = 1760
                    self.match(KotlinParser.COMMA)
                    self.state = 1761
                    self.expression()
                    self.state = 1766
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1769
            self.match(KotlinParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def valueArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ValueArgumentContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ValueArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_valueArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueArguments" ):
                listener.enterValueArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueArguments" ):
                listener.exitValueArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueArguments" ):
                return visitor.visitValueArguments(self)
            else:
                return visitor.visitChildren(self)




    def valueArguments(self):

        localctx = KotlinParser.ValueArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_valueArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1771
            self.match(KotlinParser.LPAREN)
            self.state = 1780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.NL) | (1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.MULT) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL) | (1 << KotlinParser.COLONCOLON) | (1 << KotlinParser.Q_COLONCOLON) | (1 << KotlinParser.AT) | (1 << KotlinParser.RETURN_AT) | (1 << KotlinParser.CONTINUE_AT) | (1 << KotlinParser.BREAK_AT) | (1 << KotlinParser.FILE) | (1 << KotlinParser.IMPORT) | (1 << KotlinParser.OBJECT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KotlinParser.CONSTRUCTOR - 66)) | (1 << (KotlinParser.BY - 66)) | (1 << (KotlinParser.COMPANION - 66)) | (1 << (KotlinParser.INIT - 66)) | (1 << (KotlinParser.THIS - 66)) | (1 << (KotlinParser.SUPER - 66)) | (1 << (KotlinParser.WHERE - 66)) | (1 << (KotlinParser.IF - 66)) | (1 << (KotlinParser.WHEN - 66)) | (1 << (KotlinParser.TRY - 66)) | (1 << (KotlinParser.CATCH - 66)) | (1 << (KotlinParser.FINALLY - 66)) | (1 << (KotlinParser.FOR - 66)) | (1 << (KotlinParser.DO - 66)) | (1 << (KotlinParser.WHILE - 66)) | (1 << (KotlinParser.THROW - 66)) | (1 << (KotlinParser.RETURN - 66)) | (1 << (KotlinParser.CONTINUE - 66)) | (1 << (KotlinParser.BREAK - 66)) | (1 << (KotlinParser.OUT - 66)) | (1 << (KotlinParser.FIELD - 66)) | (1 << (KotlinParser.PROPERTY - 66)) | (1 << (KotlinParser.GET - 66)) | (1 << (KotlinParser.SET - 66)) | (1 << (KotlinParser.GETTER - 66)) | (1 << (KotlinParser.SETTER - 66)) | (1 << (KotlinParser.RECEIVER - 66)) | (1 << (KotlinParser.PARAM - 66)) | (1 << (KotlinParser.SETPARAM - 66)) | (1 << (KotlinParser.DELEGATE - 66)) | (1 << (KotlinParser.DYNAMIC - 66)) | (1 << (KotlinParser.PUBLIC - 66)) | (1 << (KotlinParser.PRIVATE - 66)) | (1 << (KotlinParser.PROTECTED - 66)) | (1 << (KotlinParser.INTERNAL - 66)) | (1 << (KotlinParser.ENUM - 66)) | (1 << (KotlinParser.SEALED - 66)) | (1 << (KotlinParser.ANNOTATION - 66)) | (1 << (KotlinParser.DATA - 66)) | (1 << (KotlinParser.INNER - 66)) | (1 << (KotlinParser.TAILREC - 66)) | (1 << (KotlinParser.OPERATOR - 66)) | (1 << (KotlinParser.INLINE - 66)) | (1 << (KotlinParser.INFIX - 66)) | (1 << (KotlinParser.EXTERNAL - 66)) | (1 << (KotlinParser.SUSPEND - 66)) | (1 << (KotlinParser.OVERRIDE - 66)) | (1 << (KotlinParser.ABSTRACT - 66)) | (1 << (KotlinParser.FINAL - 66)) | (1 << (KotlinParser.OPEN - 66)) | (1 << (KotlinParser.CONST - 66)) | (1 << (KotlinParser.LATEINIT - 66)) | (1 << (KotlinParser.VARARG - 66)) | (1 << (KotlinParser.NOINLINE - 66)) | (1 << (KotlinParser.CROSSINLINE - 66)) | (1 << (KotlinParser.REIFIED - 66)) | (1 << (KotlinParser.QUOTE_OPEN - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 130)) | (1 << (KotlinParser.RealLiteral - 130)) | (1 << (KotlinParser.LongLiteral - 130)) | (1 << (KotlinParser.IntegerLiteral - 130)) | (1 << (KotlinParser.HexLiteral - 130)) | (1 << (KotlinParser.BinLiteral - 130)) | (1 << (KotlinParser.BooleanLiteral - 130)) | (1 << (KotlinParser.NullLiteral - 130)) | (1 << (KotlinParser.Identifier - 130)) | (1 << (KotlinParser.LabelReference - 130)) | (1 << (KotlinParser.LabelDefinition - 130)) | (1 << (KotlinParser.CharacterLiteral - 130)))) != 0):
                self.state = 1772
                self.valueArgument()
                self.state = 1777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.COMMA:
                    self.state = 1773
                    self.match(KotlinParser.COMMA)
                    self.state = 1774
                    self.valueArgument()
                    self.state = 1779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 1782
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeArgumentsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def typeProjection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.TypeProjectionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.TypeProjectionContext,i)


        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeArguments" ):
                listener.enterTypeArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeArguments" ):
                listener.exitTypeArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeArguments" ):
                return visitor.visitTypeArguments(self)
            else:
                return visitor.visitChildren(self)




    def typeArguments(self):

        localctx = KotlinParser.TypeArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_typeArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1784
            self.match(KotlinParser.LANGLE)
            self.state = 1788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1785
                self.match(KotlinParser.NL)
                self.state = 1790
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1791
            self.typeProjection()
            self.state = 1802
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,264,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1795
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1792
                        self.match(KotlinParser.NL)
                        self.state = 1797
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1798
                    self.match(KotlinParser.COMMA)
                    self.state = 1799
                    self.typeProjection() 
                self.state = 1804
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,264,self._ctx)

            self.state = 1808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 1805
                self.match(KotlinParser.NL)
                self.state = 1810
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1811
            self.match(KotlinParser.RANGLE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeProjectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def typeProjectionModifierList(self):
            return self.getTypedRuleContext(KotlinParser.TypeProjectionModifierListContext,0)


        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeProjection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeProjection" ):
                listener.enterTypeProjection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeProjection" ):
                listener.exitTypeProjection(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeProjection" ):
                return visitor.visitTypeProjection(self)
            else:
                return visitor.visitChildren(self)




    def typeProjection(self):

        localctx = KotlinParser.TypeProjectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_typeProjection)
        try:
            self.state = 1818
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.LPAREN, KotlinParser.AT, KotlinParser.FILE, KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.IN, KotlinParser.OUT, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier, KotlinParser.LabelReference]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1814
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                if la_ == 1:
                    self.state = 1813
                    self.typeProjectionModifierList()


                self.state = 1816
                self.type()
                pass
            elif token in [KotlinParser.MULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1817
                self.match(KotlinParser.MULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeProjectionModifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varianceAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.VarianceAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.VarianceAnnotationContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_typeProjectionModifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeProjectionModifierList" ):
                listener.enterTypeProjectionModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeProjectionModifierList" ):
                listener.exitTypeProjectionModifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeProjectionModifierList" ):
                return visitor.visitTypeProjectionModifierList(self)
            else:
                return visitor.visitChildren(self)




    def typeProjectionModifierList(self):

        localctx = KotlinParser.TypeProjectionModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_typeProjectionModifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1821 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 1820
                    self.varianceAnnotation()

                else:
                    raise NoViableAltException(self)
                self.state = 1823 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,268,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ValueArgumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_valueArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValueArgument" ):
                listener.enterValueArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValueArgument" ):
                listener.exitValueArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitValueArgument" ):
                return visitor.visitValueArgument(self)
            else:
                return visitor.visitChildren(self)




    def valueArgument(self):

        localctx = KotlinParser.ValueArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_valueArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 1825
                self.simpleIdentifier()
                self.state = 1829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1826
                    self.match(KotlinParser.NL)
                    self.state = 1831
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1832
                self.match(KotlinParser.ASSIGNMENT)
                self.state = 1836
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,270,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1833
                        self.match(KotlinParser.NL) 
                    self.state = 1838
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,270,self._ctx)



            self.state = 1842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.MULT:
                self.state = 1841
                self.match(KotlinParser.MULT)


            self.state = 1847
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,273,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1844
                    self.match(KotlinParser.NL) 
                self.state = 1849
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,273,self._ctx)

            self.state = 1850
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralConstantContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BooleanLiteral(self):
            return self.getToken(KotlinParser.BooleanLiteral, 0)

        def IntegerLiteral(self):
            return self.getToken(KotlinParser.IntegerLiteral, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(KotlinParser.StringLiteralContext,0)


        def HexLiteral(self):
            return self.getToken(KotlinParser.HexLiteral, 0)

        def BinLiteral(self):
            return self.getToken(KotlinParser.BinLiteral, 0)

        def CharacterLiteral(self):
            return self.getToken(KotlinParser.CharacterLiteral, 0)

        def RealLiteral(self):
            return self.getToken(KotlinParser.RealLiteral, 0)

        def NullLiteral(self):
            return self.getToken(KotlinParser.NullLiteral, 0)

        def LongLiteral(self):
            return self.getToken(KotlinParser.LongLiteral, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_literalConstant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralConstant" ):
                listener.enterLiteralConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralConstant" ):
                listener.exitLiteralConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralConstant" ):
                return visitor.visitLiteralConstant(self)
            else:
                return visitor.visitChildren(self)




    def literalConstant(self):

        localctx = KotlinParser.LiteralConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_literalConstant)
        try:
            self.state = 1861
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.BooleanLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1852
                self.match(KotlinParser.BooleanLiteral)
                pass
            elif token in [KotlinParser.IntegerLiteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1853
                self.match(KotlinParser.IntegerLiteral)
                pass
            elif token in [KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1854
                self.stringLiteral()
                pass
            elif token in [KotlinParser.HexLiteral]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1855
                self.match(KotlinParser.HexLiteral)
                pass
            elif token in [KotlinParser.BinLiteral]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1856
                self.match(KotlinParser.BinLiteral)
                pass
            elif token in [KotlinParser.CharacterLiteral]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1857
                self.match(KotlinParser.CharacterLiteral)
                pass
            elif token in [KotlinParser.RealLiteral]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1858
                self.match(KotlinParser.RealLiteral)
                pass
            elif token in [KotlinParser.NullLiteral]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1859
                self.match(KotlinParser.NullLiteral)
                pass
            elif token in [KotlinParser.LongLiteral]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1860
                self.match(KotlinParser.LongLiteral)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lineStringLiteral(self):
            return self.getTypedRuleContext(KotlinParser.LineStringLiteralContext,0)


        def multiLineStringLiteral(self):
            return self.getTypedRuleContext(KotlinParser.MultiLineStringLiteralContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringLiteral" ):
                return visitor.visitStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def stringLiteral(self):

        localctx = KotlinParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_stringLiteral)
        try:
            self.state = 1865
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.QUOTE_OPEN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1863
                self.lineStringLiteral()
                pass
            elif token in [KotlinParser.TRIPLE_QUOTE_OPEN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1864
                self.multiLineStringLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineStringLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUOTE_OPEN(self):
            return self.getToken(KotlinParser.QUOTE_OPEN, 0)

        def QUOTE_CLOSE(self):
            return self.getToken(KotlinParser.QUOTE_CLOSE, 0)

        def lineStringContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LineStringContentContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LineStringContentContext,i)


        def lineStringExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LineStringExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LineStringExpressionContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_lineStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineStringLiteral" ):
                listener.enterLineStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineStringLiteral" ):
                listener.exitLineStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineStringLiteral" ):
                return visitor.visitLineStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def lineStringLiteral(self):

        localctx = KotlinParser.LineStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_lineStringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1867
            self.match(KotlinParser.QUOTE_OPEN)
            self.state = 1872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 156)) & ~0x3f) == 0 and ((1 << (_la - 156)) & ((1 << (KotlinParser.LineStrRef - 156)) | (1 << (KotlinParser.LineStrText - 156)) | (1 << (KotlinParser.LineStrEscapedChar - 156)) | (1 << (KotlinParser.LineStrExprStart - 156)))) != 0):
                self.state = 1870
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [KotlinParser.LineStrRef, KotlinParser.LineStrText, KotlinParser.LineStrEscapedChar]:
                    self.state = 1868
                    self.lineStringContent()
                    pass
                elif token in [KotlinParser.LineStrExprStart]:
                    self.state = 1869
                    self.lineStringExpression()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1874
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1875
            self.match(KotlinParser.QUOTE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiLineStringLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRIPLE_QUOTE_OPEN(self):
            return self.getToken(KotlinParser.TRIPLE_QUOTE_OPEN, 0)

        def TRIPLE_QUOTE_CLOSE(self):
            return self.getToken(KotlinParser.TRIPLE_QUOTE_CLOSE, 0)

        def multiLineStringContent(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiLineStringContentContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiLineStringContentContext,i)


        def multiLineStringExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.MultiLineStringExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.MultiLineStringExpressionContext,i)


        def lineStringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LineStringLiteralContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LineStringLiteralContext,i)


        def MultiLineStringQuote(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.MultiLineStringQuote)
            else:
                return self.getToken(KotlinParser.MultiLineStringQuote, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiLineStringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiLineStringLiteral" ):
                listener.enterMultiLineStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiLineStringLiteral" ):
                listener.exitMultiLineStringLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiLineStringLiteral" ):
                return visitor.visitMultiLineStringLiteral(self)
            else:
                return visitor.visitChildren(self)




    def multiLineStringLiteral(self):

        localctx = KotlinParser.MultiLineStringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_multiLineStringLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1877
            self.match(KotlinParser.TRIPLE_QUOTE_OPEN)
            self.state = 1884
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (KotlinParser.QUOTE_OPEN - 129)) | (1 << (KotlinParser.MultiLineStringQuote - 129)) | (1 << (KotlinParser.MultiLineStrRef - 129)) | (1 << (KotlinParser.MultiLineStrText - 129)) | (1 << (KotlinParser.MultiLineStrEscapedChar - 129)) | (1 << (KotlinParser.MultiLineStrExprStart - 129)))) != 0):
                self.state = 1882
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [KotlinParser.MultiLineStrRef, KotlinParser.MultiLineStrText, KotlinParser.MultiLineStrEscapedChar]:
                    self.state = 1878
                    self.multiLineStringContent()
                    pass
                elif token in [KotlinParser.MultiLineStrExprStart]:
                    self.state = 1879
                    self.multiLineStringExpression()
                    pass
                elif token in [KotlinParser.QUOTE_OPEN]:
                    self.state = 1880
                    self.lineStringLiteral()
                    pass
                elif token in [KotlinParser.MultiLineStringQuote]:
                    self.state = 1881
                    self.match(KotlinParser.MultiLineStringQuote)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1886
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1887
            self.match(KotlinParser.TRIPLE_QUOTE_CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineStringContentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LineStrText(self):
            return self.getToken(KotlinParser.LineStrText, 0)

        def LineStrEscapedChar(self):
            return self.getToken(KotlinParser.LineStrEscapedChar, 0)

        def LineStrRef(self):
            return self.getToken(KotlinParser.LineStrRef, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_lineStringContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineStringContent" ):
                listener.enterLineStringContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineStringContent" ):
                listener.exitLineStringContent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineStringContent" ):
                return visitor.visitLineStringContent(self)
            else:
                return visitor.visitChildren(self)




    def lineStringContent(self):

        localctx = KotlinParser.LineStringContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_lineStringContent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1889
            _la = self._input.LA(1)
            if not(((((_la - 156)) & ~0x3f) == 0 and ((1 << (_la - 156)) & ((1 << (KotlinParser.LineStrRef - 156)) | (1 << (KotlinParser.LineStrText - 156)) | (1 << (KotlinParser.LineStrEscapedChar - 156)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LineStringExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LineStrExprStart(self):
            return self.getToken(KotlinParser.LineStrExprStart, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_lineStringExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLineStringExpression" ):
                listener.enterLineStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLineStringExpression" ):
                listener.exitLineStringExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLineStringExpression" ):
                return visitor.visitLineStringExpression(self)
            else:
                return visitor.visitChildren(self)




    def lineStringExpression(self):

        localctx = KotlinParser.LineStringExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_lineStringExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1891
            self.match(KotlinParser.LineStrExprStart)
            self.state = 1892
            self.expression()
            self.state = 1893
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiLineStringContentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MultiLineStrText(self):
            return self.getToken(KotlinParser.MultiLineStrText, 0)

        def MultiLineStrEscapedChar(self):
            return self.getToken(KotlinParser.MultiLineStrEscapedChar, 0)

        def MultiLineStrRef(self):
            return self.getToken(KotlinParser.MultiLineStrRef, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiLineStringContent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiLineStringContent" ):
                listener.enterMultiLineStringContent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiLineStringContent" ):
                listener.exitMultiLineStringContent(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiLineStringContent" ):
                return visitor.visitMultiLineStringContent(self)
            else:
                return visitor.visitChildren(self)




    def multiLineStringContent(self):

        localctx = KotlinParser.MultiLineStringContentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_multiLineStringContent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1895
            _la = self._input.LA(1)
            if not(((((_la - 162)) & ~0x3f) == 0 and ((1 << (_la - 162)) & ((1 << (KotlinParser.MultiLineStrRef - 162)) | (1 << (KotlinParser.MultiLineStrText - 162)) | (1 << (KotlinParser.MultiLineStrEscapedChar - 162)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiLineStringExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MultiLineStrExprStart(self):
            return self.getToken(KotlinParser.MultiLineStrExprStart, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiLineStringExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiLineStringExpression" ):
                listener.enterMultiLineStringExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiLineStringExpression" ):
                listener.exitMultiLineStringExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiLineStringExpression" ):
                return visitor.visitMultiLineStringExpression(self)
            else:
                return visitor.visitChildren(self)




    def multiLineStringExpression(self):

        localctx = KotlinParser.MultiLineStringExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_multiLineStringExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1897
            self.match(KotlinParser.MultiLineStrExprStart)
            self.state = 1898
            self.expression()
            self.state = 1899
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def statements(self):
            return self.getTypedRuleContext(KotlinParser.StatementsContext,0)


        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def lambdaParameters(self):
            return self.getTypedRuleContext(KotlinParser.LambdaParametersContext,0)


        def ARROW(self):
            return self.getToken(KotlinParser.ARROW, 0)

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionLiteral" ):
                listener.enterFunctionLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionLiteral" ):
                listener.exitFunctionLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionLiteral" ):
                return visitor.visitFunctionLiteral(self)
            else:
                return visitor.visitChildren(self)




    def functionLiteral(self):

        localctx = KotlinParser.FunctionLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_functionLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)) | (1 << (KotlinParser.LabelReference - 93)))) != 0):
                self.state = 1901
                self.annotations()
                self.state = 1906
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1953
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,287,self._ctx)
            if la_ == 1:
                self.state = 1907
                self.match(KotlinParser.LCURL)
                self.state = 1911
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,281,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1908
                        self.match(KotlinParser.NL) 
                    self.state = 1913
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,281,self._ctx)

                self.state = 1914
                self.statements()
                self.state = 1918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1915
                    self.match(KotlinParser.NL)
                    self.state = 1920
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1921
                self.match(KotlinParser.RCURL)
                pass

            elif la_ == 2:
                self.state = 1923
                self.match(KotlinParser.LCURL)
                self.state = 1927
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,283,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1924
                        self.match(KotlinParser.NL) 
                    self.state = 1929
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,283,self._ctx)

                self.state = 1930
                self.lambdaParameters()
                self.state = 1934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1931
                    self.match(KotlinParser.NL)
                    self.state = 1936
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1937
                self.match(KotlinParser.ARROW)
                self.state = 1941
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,285,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 1938
                        self.match(KotlinParser.NL) 
                    self.state = 1943
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,285,self._ctx)

                self.state = 1944
                self.statements()
                self.state = 1948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1945
                    self.match(KotlinParser.NL)
                    self.state = 1950
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1951
                self.match(KotlinParser.RCURL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParametersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.LambdaParameterContext)
            else:
                return self.getTypedRuleContext(KotlinParser.LambdaParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_lambdaParameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameters" ):
                listener.enterLambdaParameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameters" ):
                listener.exitLambdaParameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaParameters" ):
                return visitor.visitLambdaParameters(self)
            else:
                return visitor.visitChildren(self)




    def lambdaParameters(self):

        localctx = KotlinParser.LambdaParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_lambdaParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.LPAREN or _la==KotlinParser.IMPORT or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KotlinParser.CONSTRUCTOR - 66)) | (1 << (KotlinParser.BY - 66)) | (1 << (KotlinParser.COMPANION - 66)) | (1 << (KotlinParser.INIT - 66)) | (1 << (KotlinParser.WHERE - 66)) | (1 << (KotlinParser.CATCH - 66)) | (1 << (KotlinParser.FINALLY - 66)) | (1 << (KotlinParser.OUT - 66)) | (1 << (KotlinParser.GETTER - 66)) | (1 << (KotlinParser.SETTER - 66)) | (1 << (KotlinParser.DYNAMIC - 66)) | (1 << (KotlinParser.PUBLIC - 66)) | (1 << (KotlinParser.PRIVATE - 66)) | (1 << (KotlinParser.PROTECTED - 66)) | (1 << (KotlinParser.INTERNAL - 66)) | (1 << (KotlinParser.ENUM - 66)) | (1 << (KotlinParser.SEALED - 66)) | (1 << (KotlinParser.ANNOTATION - 66)) | (1 << (KotlinParser.DATA - 66)) | (1 << (KotlinParser.INNER - 66)) | (1 << (KotlinParser.TAILREC - 66)) | (1 << (KotlinParser.OPERATOR - 66)) | (1 << (KotlinParser.INLINE - 66)) | (1 << (KotlinParser.INFIX - 66)) | (1 << (KotlinParser.EXTERNAL - 66)) | (1 << (KotlinParser.SUSPEND - 66)) | (1 << (KotlinParser.OVERRIDE - 66)) | (1 << (KotlinParser.ABSTRACT - 66)) | (1 << (KotlinParser.FINAL - 66)) | (1 << (KotlinParser.OPEN - 66)) | (1 << (KotlinParser.CONST - 66)) | (1 << (KotlinParser.LATEINIT - 66)) | (1 << (KotlinParser.VARARG - 66)) | (1 << (KotlinParser.NOINLINE - 66)) | (1 << (KotlinParser.CROSSINLINE - 66)) | (1 << (KotlinParser.REIFIED - 66)))) != 0) or _la==KotlinParser.Identifier:
                self.state = 1955
                self.lambdaParameter()


            self.state = 1974
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,291,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1961
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1958
                        self.match(KotlinParser.NL)
                        self.state = 1963
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1964
                    self.match(KotlinParser.COMMA)
                    self.state = 1968
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1965
                        self.match(KotlinParser.NL)
                        self.state = 1970
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1971
                    self.lambdaParameter() 
                self.state = 1976
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,291,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaParameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def variableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,0)


        def multiVariableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.MultiVariableDeclarationContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_lambdaParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaParameter" ):
                listener.enterLambdaParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaParameter" ):
                listener.exitLambdaParameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaParameter" ):
                return visitor.visitLambdaParameter(self)
            else:
                return visitor.visitChildren(self)




    def lambdaParameter(self):

        localctx = KotlinParser.LambdaParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_lambdaParameter)
        self._la = 0 # Token type
        try:
            self.state = 1995
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1977
                self.variableDeclaration()
                pass
            elif token in [KotlinParser.LPAREN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1978
                self.multiVariableDeclaration()
                self.state = 1993
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
                if la_ == 1:
                    self.state = 1982
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1979
                        self.match(KotlinParser.NL)
                        self.state = 1984
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1985
                    self.match(KotlinParser.COLON)
                    self.state = 1989
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 1986
                        self.match(KotlinParser.NL)
                        self.state = 1991
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 1992
                    self.type()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OBJECT(self):
            return self.getToken(KotlinParser.OBJECT, 0)

        def classBody(self):
            return self.getTypedRuleContext(KotlinParser.ClassBodyContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def delegationSpecifiers(self):
            return self.getTypedRuleContext(KotlinParser.DelegationSpecifiersContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_objectLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectLiteral" ):
                listener.enterObjectLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectLiteral" ):
                listener.exitObjectLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectLiteral" ):
                return visitor.visitObjectLiteral(self)
            else:
                return visitor.visitChildren(self)




    def objectLiteral(self):

        localctx = KotlinParser.ObjectLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_objectLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1997
            self.match(KotlinParser.OBJECT)
            self.state = 2012
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,298,self._ctx)
            if la_ == 1:
                self.state = 2001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 1998
                    self.match(KotlinParser.NL)
                    self.state = 2003
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2004
                self.match(KotlinParser.COLON)
                self.state = 2008
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2005
                    self.match(KotlinParser.NL)
                    self.state = 2010
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2011
                self.delegationSpecifiers()


            self.state = 2017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2014
                self.match(KotlinParser.NL)
                self.state = 2019
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2020
            self.classBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LSQUARE(self):
            return self.getToken(KotlinParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(KotlinParser.RSQUARE, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_collectionLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionLiteral" ):
                listener.enterCollectionLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionLiteral" ):
                listener.exitCollectionLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCollectionLiteral" ):
                return visitor.visitCollectionLiteral(self)
            else:
                return visitor.visitChildren(self)




    def collectionLiteral(self):

        localctx = KotlinParser.CollectionLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_collectionLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2022
            self.match(KotlinParser.LSQUARE)
            self.state = 2024
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.NL) | (1 << KotlinParser.LPAREN) | (1 << KotlinParser.LSQUARE) | (1 << KotlinParser.LCURL) | (1 << KotlinParser.ADD) | (1 << KotlinParser.SUB) | (1 << KotlinParser.INCR) | (1 << KotlinParser.DECR) | (1 << KotlinParser.EXCL) | (1 << KotlinParser.COLONCOLON) | (1 << KotlinParser.Q_COLONCOLON) | (1 << KotlinParser.AT) | (1 << KotlinParser.RETURN_AT) | (1 << KotlinParser.CONTINUE_AT) | (1 << KotlinParser.BREAK_AT) | (1 << KotlinParser.FILE) | (1 << KotlinParser.IMPORT) | (1 << KotlinParser.OBJECT))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (KotlinParser.CONSTRUCTOR - 66)) | (1 << (KotlinParser.BY - 66)) | (1 << (KotlinParser.COMPANION - 66)) | (1 << (KotlinParser.INIT - 66)) | (1 << (KotlinParser.THIS - 66)) | (1 << (KotlinParser.SUPER - 66)) | (1 << (KotlinParser.WHERE - 66)) | (1 << (KotlinParser.IF - 66)) | (1 << (KotlinParser.WHEN - 66)) | (1 << (KotlinParser.TRY - 66)) | (1 << (KotlinParser.CATCH - 66)) | (1 << (KotlinParser.FINALLY - 66)) | (1 << (KotlinParser.FOR - 66)) | (1 << (KotlinParser.DO - 66)) | (1 << (KotlinParser.WHILE - 66)) | (1 << (KotlinParser.THROW - 66)) | (1 << (KotlinParser.RETURN - 66)) | (1 << (KotlinParser.CONTINUE - 66)) | (1 << (KotlinParser.BREAK - 66)) | (1 << (KotlinParser.OUT - 66)) | (1 << (KotlinParser.FIELD - 66)) | (1 << (KotlinParser.PROPERTY - 66)) | (1 << (KotlinParser.GET - 66)) | (1 << (KotlinParser.SET - 66)) | (1 << (KotlinParser.GETTER - 66)) | (1 << (KotlinParser.SETTER - 66)) | (1 << (KotlinParser.RECEIVER - 66)) | (1 << (KotlinParser.PARAM - 66)) | (1 << (KotlinParser.SETPARAM - 66)) | (1 << (KotlinParser.DELEGATE - 66)) | (1 << (KotlinParser.DYNAMIC - 66)) | (1 << (KotlinParser.PUBLIC - 66)) | (1 << (KotlinParser.PRIVATE - 66)) | (1 << (KotlinParser.PROTECTED - 66)) | (1 << (KotlinParser.INTERNAL - 66)) | (1 << (KotlinParser.ENUM - 66)) | (1 << (KotlinParser.SEALED - 66)) | (1 << (KotlinParser.ANNOTATION - 66)) | (1 << (KotlinParser.DATA - 66)) | (1 << (KotlinParser.INNER - 66)) | (1 << (KotlinParser.TAILREC - 66)) | (1 << (KotlinParser.OPERATOR - 66)) | (1 << (KotlinParser.INLINE - 66)) | (1 << (KotlinParser.INFIX - 66)) | (1 << (KotlinParser.EXTERNAL - 66)) | (1 << (KotlinParser.SUSPEND - 66)) | (1 << (KotlinParser.OVERRIDE - 66)) | (1 << (KotlinParser.ABSTRACT - 66)) | (1 << (KotlinParser.FINAL - 66)) | (1 << (KotlinParser.OPEN - 66)) | (1 << (KotlinParser.CONST - 66)) | (1 << (KotlinParser.LATEINIT - 66)) | (1 << (KotlinParser.VARARG - 66)) | (1 << (KotlinParser.NOINLINE - 66)) | (1 << (KotlinParser.CROSSINLINE - 66)) | (1 << (KotlinParser.REIFIED - 66)) | (1 << (KotlinParser.QUOTE_OPEN - 66)))) != 0) or ((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & ((1 << (KotlinParser.TRIPLE_QUOTE_OPEN - 130)) | (1 << (KotlinParser.RealLiteral - 130)) | (1 << (KotlinParser.LongLiteral - 130)) | (1 << (KotlinParser.IntegerLiteral - 130)) | (1 << (KotlinParser.HexLiteral - 130)) | (1 << (KotlinParser.BinLiteral - 130)) | (1 << (KotlinParser.BooleanLiteral - 130)) | (1 << (KotlinParser.NullLiteral - 130)) | (1 << (KotlinParser.Identifier - 130)) | (1 << (KotlinParser.LabelReference - 130)) | (1 << (KotlinParser.LabelDefinition - 130)) | (1 << (KotlinParser.CharacterLiteral - 130)))) != 0):
                self.state = 2023
                self.expression()


            self.state = 2030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.COMMA:
                self.state = 2026
                self.match(KotlinParser.COMMA)
                self.state = 2027
                self.expression()
                self.state = 2032
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2033
            self.match(KotlinParser.RSQUARE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThisExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THIS(self):
            return self.getToken(KotlinParser.THIS, 0)

        def LabelReference(self):
            return self.getToken(KotlinParser.LabelReference, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_thisExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThisExpression" ):
                listener.enterThisExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThisExpression" ):
                listener.exitThisExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThisExpression" ):
                return visitor.visitThisExpression(self)
            else:
                return visitor.visitChildren(self)




    def thisExpression(self):

        localctx = KotlinParser.ThisExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_thisExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2035
            self.match(KotlinParser.THIS)
            self.state = 2037
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,302,self._ctx)
            if la_ == 1:
                self.state = 2036
                self.match(KotlinParser.LabelReference)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUPER(self):
            return self.getToken(KotlinParser.SUPER, 0)

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def LabelReference(self):
            return self.getToken(KotlinParser.LabelReference, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_superExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperExpression" ):
                listener.enterSuperExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperExpression" ):
                listener.exitSuperExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuperExpression" ):
                return visitor.visitSuperExpression(self)
            else:
                return visitor.visitChildren(self)




    def superExpression(self):

        localctx = KotlinParser.SuperExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_superExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2039
            self.match(KotlinParser.SUPER)
            self.state = 2056
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,305,self._ctx)
            if la_ == 1:
                self.state = 2040
                self.match(KotlinParser.LANGLE)
                self.state = 2044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2041
                    self.match(KotlinParser.NL)
                    self.state = 2046
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2047
                self.type()
                self.state = 2051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2048
                    self.match(KotlinParser.NL)
                    self.state = 2053
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2054
                self.match(KotlinParser.RANGLE)


            self.state = 2059
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,306,self._ctx)
            if la_ == 1:
                self.state = 2058
                self.match(KotlinParser.LabelReference)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ifExpression(self):
            return self.getTypedRuleContext(KotlinParser.IfExpressionContext,0)


        def whenExpression(self):
            return self.getTypedRuleContext(KotlinParser.WhenExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_conditionalExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalExpression" ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalExpression" ):
                listener.exitConditionalExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalExpression" ):
                return visitor.visitConditionalExpression(self)
            else:
                return visitor.visitChildren(self)




    def conditionalExpression(self):

        localctx = KotlinParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_conditionalExpression)
        try:
            self.state = 2063
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.IF]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2061
                self.ifExpression()
                pass
            elif token in [KotlinParser.WHEN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2062
                self.whenExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(KotlinParser.IF, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def controlStructureBody(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ControlStructureBodyContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,i)


        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def ELSE(self):
            return self.getToken(KotlinParser.ELSE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_ifExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExpression" ):
                listener.enterIfExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExpression" ):
                listener.exitIfExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfExpression" ):
                return visitor.visitIfExpression(self)
            else:
                return visitor.visitChildren(self)




    def ifExpression(self):

        localctx = KotlinParser.IfExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_ifExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2065
            self.match(KotlinParser.IF)
            self.state = 2069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2066
                self.match(KotlinParser.NL)
                self.state = 2071
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2072
            self.match(KotlinParser.LPAREN)
            self.state = 2073
            self.expression()
            self.state = 2074
            self.match(KotlinParser.RPAREN)
            self.state = 2078
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,309,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2075
                    self.match(KotlinParser.NL) 
                self.state = 2080
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,309,self._ctx)

            self.state = 2082
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,310,self._ctx)
            if la_ == 1:
                self.state = 2081
                self.controlStructureBody()


            self.state = 2085
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                self.state = 2084
                self.match(KotlinParser.SEMICOLON)


            self.state = 2103
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                self.state = 2090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2087
                    self.match(KotlinParser.NL)
                    self.state = 2092
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2093
                self.match(KotlinParser.ELSE)
                self.state = 2097
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,313,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2094
                        self.match(KotlinParser.NL) 
                    self.state = 2099
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,313,self._ctx)

                self.state = 2101
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
                if la_ == 1:
                    self.state = 2100
                    self.controlStructureBody()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ControlStructureBodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_controlStructureBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterControlStructureBody" ):
                listener.enterControlStructureBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitControlStructureBody" ):
                listener.exitControlStructureBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitControlStructureBody" ):
                return visitor.visitControlStructureBody(self)
            else:
                return visitor.visitChildren(self)




    def controlStructureBody(self):

        localctx = KotlinParser.ControlStructureBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_controlStructureBody)
        try:
            self.state = 2107
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2105
                self.block()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2106
                self.expression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(KotlinParser.WHEN, 0)

        def LCURL(self):
            return self.getToken(KotlinParser.LCURL, 0)

        def RCURL(self):
            return self.getToken(KotlinParser.RCURL, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def whenEntry(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.WhenEntryContext)
            else:
                return self.getTypedRuleContext(KotlinParser.WhenEntryContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_whenExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenExpression" ):
                listener.enterWhenExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenExpression" ):
                listener.exitWhenExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenExpression" ):
                return visitor.visitWhenExpression(self)
            else:
                return visitor.visitChildren(self)




    def whenExpression(self):

        localctx = KotlinParser.WhenExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_whenExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2109
            self.match(KotlinParser.WHEN)
            self.state = 2113
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,317,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2110
                    self.match(KotlinParser.NL) 
                self.state = 2115
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,317,self._ctx)

            self.state = 2120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.LPAREN:
                self.state = 2116
                self.match(KotlinParser.LPAREN)
                self.state = 2117
                self.expression()
                self.state = 2118
                self.match(KotlinParser.RPAREN)


            self.state = 2125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2122
                self.match(KotlinParser.NL)
                self.state = 2127
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2128
            self.match(KotlinParser.LCURL)
            self.state = 2132
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,320,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2129
                    self.match(KotlinParser.NL) 
                self.state = 2134
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,320,self._ctx)

            self.state = 2144
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,322,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2135
                    self.whenEntry()
                    self.state = 2139
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,321,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2136
                            self.match(KotlinParser.NL) 
                        self.state = 2141
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,321,self._ctx)
             
                self.state = 2146
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,322,self._ctx)

            self.state = 2150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2147
                self.match(KotlinParser.NL)
                self.state = 2152
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2153
            self.match(KotlinParser.RCURL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenEntryContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whenCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.WhenConditionContext)
            else:
                return self.getTypedRuleContext(KotlinParser.WhenConditionContext,i)


        def ARROW(self):
            return self.getToken(KotlinParser.ARROW, 0)

        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.COMMA)
            else:
                return self.getToken(KotlinParser.COMMA, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def semi(self):
            return self.getTypedRuleContext(KotlinParser.SemiContext,0)


        def ELSE(self):
            return self.getToken(KotlinParser.ELSE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_whenEntry

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenEntry" ):
                listener.enterWhenEntry(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenEntry" ):
                listener.exitWhenEntry(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenEntry" ):
                return visitor.visitWhenEntry(self)
            else:
                return visitor.visitChildren(self)




    def whenEntry(self):

        localctx = KotlinParser.WhenEntryContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_whenEntry)
        self._la = 0 # Token type
        try:
            self.state = 2207
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.NL, KotlinParser.LPAREN, KotlinParser.LSQUARE, KotlinParser.LCURL, KotlinParser.ADD, KotlinParser.SUB, KotlinParser.INCR, KotlinParser.DECR, KotlinParser.EXCL, KotlinParser.COLONCOLON, KotlinParser.Q_COLONCOLON, KotlinParser.AT, KotlinParser.RETURN_AT, KotlinParser.CONTINUE_AT, KotlinParser.BREAK_AT, KotlinParser.FILE, KotlinParser.IMPORT, KotlinParser.OBJECT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.THIS, KotlinParser.SUPER, KotlinParser.WHERE, KotlinParser.IF, KotlinParser.WHEN, KotlinParser.TRY, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.FOR, KotlinParser.DO, KotlinParser.WHILE, KotlinParser.THROW, KotlinParser.RETURN, KotlinParser.CONTINUE, KotlinParser.BREAK, KotlinParser.IS, KotlinParser.IN, KotlinParser.NOT_IS, KotlinParser.NOT_IN, KotlinParser.OUT, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN, KotlinParser.RealLiteral, KotlinParser.LongLiteral, KotlinParser.IntegerLiteral, KotlinParser.HexLiteral, KotlinParser.BinLiteral, KotlinParser.BooleanLiteral, KotlinParser.NullLiteral, KotlinParser.Identifier, KotlinParser.LabelReference, KotlinParser.LabelDefinition, KotlinParser.CharacterLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2155
                self.whenCondition()
                self.state = 2172
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,326,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2159
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==KotlinParser.NL:
                            self.state = 2156
                            self.match(KotlinParser.NL)
                            self.state = 2161
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 2162
                        self.match(KotlinParser.COMMA)
                        self.state = 2166
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,325,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 2163
                                self.match(KotlinParser.NL) 
                            self.state = 2168
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,325,self._ctx)

                        self.state = 2169
                        self.whenCondition() 
                    self.state = 2174
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,326,self._ctx)

                self.state = 2178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2175
                    self.match(KotlinParser.NL)
                    self.state = 2180
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2181
                self.match(KotlinParser.ARROW)
                self.state = 2185
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,328,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2182
                        self.match(KotlinParser.NL) 
                    self.state = 2187
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,328,self._ctx)

                self.state = 2188
                self.controlStructureBody()
                self.state = 2190
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,329,self._ctx)
                if la_ == 1:
                    self.state = 2189
                    self.semi()


                pass
            elif token in [KotlinParser.ELSE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2192
                self.match(KotlinParser.ELSE)
                self.state = 2196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2193
                    self.match(KotlinParser.NL)
                    self.state = 2198
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2199
                self.match(KotlinParser.ARROW)
                self.state = 2203
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,331,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2200
                        self.match(KotlinParser.NL) 
                    self.state = 2205
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,331,self._ctx)

                self.state = 2206
                self.controlStructureBody()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def rangeTest(self):
            return self.getTypedRuleContext(KotlinParser.RangeTestContext,0)


        def typeTest(self):
            return self.getTypedRuleContext(KotlinParser.TypeTestContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_whenCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenCondition" ):
                listener.enterWhenCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenCondition" ):
                listener.exitWhenCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenCondition" ):
                return visitor.visitWhenCondition(self)
            else:
                return visitor.visitChildren(self)




    def whenCondition(self):

        localctx = KotlinParser.WhenConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_whenCondition)
        try:
            self.state = 2212
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.NL, KotlinParser.LPAREN, KotlinParser.LSQUARE, KotlinParser.LCURL, KotlinParser.ADD, KotlinParser.SUB, KotlinParser.INCR, KotlinParser.DECR, KotlinParser.EXCL, KotlinParser.COLONCOLON, KotlinParser.Q_COLONCOLON, KotlinParser.AT, KotlinParser.RETURN_AT, KotlinParser.CONTINUE_AT, KotlinParser.BREAK_AT, KotlinParser.FILE, KotlinParser.IMPORT, KotlinParser.OBJECT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.THIS, KotlinParser.SUPER, KotlinParser.WHERE, KotlinParser.IF, KotlinParser.WHEN, KotlinParser.TRY, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.FOR, KotlinParser.DO, KotlinParser.WHILE, KotlinParser.THROW, KotlinParser.RETURN, KotlinParser.CONTINUE, KotlinParser.BREAK, KotlinParser.OUT, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.QUOTE_OPEN, KotlinParser.TRIPLE_QUOTE_OPEN, KotlinParser.RealLiteral, KotlinParser.LongLiteral, KotlinParser.IntegerLiteral, KotlinParser.HexLiteral, KotlinParser.BinLiteral, KotlinParser.BooleanLiteral, KotlinParser.NullLiteral, KotlinParser.Identifier, KotlinParser.LabelReference, KotlinParser.LabelDefinition, KotlinParser.CharacterLiteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2209
                self.expression()
                pass
            elif token in [KotlinParser.IN, KotlinParser.NOT_IN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2210
                self.rangeTest()
                pass
            elif token in [KotlinParser.IS, KotlinParser.NOT_IS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2211
                self.typeTest()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RangeTestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inOperator(self):
            return self.getTypedRuleContext(KotlinParser.InOperatorContext,0)


        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_rangeTest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRangeTest" ):
                listener.enterRangeTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRangeTest" ):
                listener.exitRangeTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRangeTest" ):
                return visitor.visitRangeTest(self)
            else:
                return visitor.visitChildren(self)




    def rangeTest(self):

        localctx = KotlinParser.RangeTestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_rangeTest)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2214
            self.inOperator()
            self.state = 2218
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,334,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2215
                    self.match(KotlinParser.NL) 
                self.state = 2220
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,334,self._ctx)

            self.state = 2221
            self.expression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTestContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def isOperator(self):
            return self.getTypedRuleContext(KotlinParser.IsOperatorContext,0)


        def type(self):
            return self.getTypedRuleContext(KotlinParser.TypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeTest

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeTest" ):
                listener.enterTypeTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeTest" ):
                listener.exitTypeTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeTest" ):
                return visitor.visitTypeTest(self)
            else:
                return visitor.visitChildren(self)




    def typeTest(self):

        localctx = KotlinParser.TypeTestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_typeTest)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2223
            self.isOperator()
            self.state = 2227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2224
                self.match(KotlinParser.NL)
                self.state = 2229
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2230
            self.type()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(KotlinParser.TRY, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def catchBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.CatchBlockContext)
            else:
                return self.getTypedRuleContext(KotlinParser.CatchBlockContext,i)


        def finallyBlock(self):
            return self.getTypedRuleContext(KotlinParser.FinallyBlockContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_tryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryExpression" ):
                listener.enterTryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryExpression" ):
                listener.exitTryExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryExpression" ):
                return visitor.visitTryExpression(self)
            else:
                return visitor.visitChildren(self)




    def tryExpression(self):

        localctx = KotlinParser.TryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_tryExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2232
            self.match(KotlinParser.TRY)
            self.state = 2236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2233
                self.match(KotlinParser.NL)
                self.state = 2238
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2239
            self.block()
            self.state = 2249
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,338,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2243
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2240
                        self.match(KotlinParser.NL)
                        self.state = 2245
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2246
                    self.catchBlock() 
                self.state = 2251
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,338,self._ctx)

            self.state = 2259
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,340,self._ctx)
            if la_ == 1:
                self.state = 2255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2252
                    self.match(KotlinParser.NL)
                    self.state = 2257
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2258
                self.finallyBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(KotlinParser.CATCH, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def simpleIdentifier(self):
            return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_catchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchBlock" ):
                listener.enterCatchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchBlock" ):
                listener.exitCatchBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchBlock" ):
                return visitor.visitCatchBlock(self)
            else:
                return visitor.visitChildren(self)




    def catchBlock(self):

        localctx = KotlinParser.CatchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_catchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2261
            self.match(KotlinParser.CATCH)
            self.state = 2265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2262
                self.match(KotlinParser.NL)
                self.state = 2267
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2268
            self.match(KotlinParser.LPAREN)
            self.state = 2272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)) | (1 << (KotlinParser.LabelReference - 93)))) != 0):
                self.state = 2269
                self.annotations()
                self.state = 2274
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2275
            self.simpleIdentifier()
            self.state = 2276
            self.match(KotlinParser.COLON)
            self.state = 2277
            self.userType()
            self.state = 2278
            self.match(KotlinParser.RPAREN)
            self.state = 2282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2279
                self.match(KotlinParser.NL)
                self.state = 2284
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2285
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FinallyBlockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(KotlinParser.FINALLY, 0)

        def block(self):
            return self.getTypedRuleContext(KotlinParser.BlockContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_finallyBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinallyBlock" ):
                listener.enterFinallyBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinallyBlock" ):
                listener.exitFinallyBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinallyBlock" ):
                return visitor.visitFinallyBlock(self)
            else:
                return visitor.visitChildren(self)




    def finallyBlock(self):

        localctx = KotlinParser.FinallyBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_finallyBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2287
            self.match(KotlinParser.FINALLY)
            self.state = 2291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2288
                self.match(KotlinParser.NL)
                self.state = 2293
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2294
            self.block()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def forExpression(self):
            return self.getTypedRuleContext(KotlinParser.ForExpressionContext,0)


        def whileExpression(self):
            return self.getTypedRuleContext(KotlinParser.WhileExpressionContext,0)


        def doWhileExpression(self):
            return self.getTypedRuleContext(KotlinParser.DoWhileExpressionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_loopExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopExpression" ):
                listener.enterLoopExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopExpression" ):
                listener.exitLoopExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoopExpression" ):
                return visitor.visitLoopExpression(self)
            else:
                return visitor.visitChildren(self)




    def loopExpression(self):

        localctx = KotlinParser.LoopExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_loopExpression)
        try:
            self.state = 2299
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2296
                self.forExpression()
                pass
            elif token in [KotlinParser.WHILE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2297
                self.whileExpression()
                pass
            elif token in [KotlinParser.DO]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2298
                self.doWhileExpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(KotlinParser.FOR, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def IN(self):
            return self.getToken(KotlinParser.IN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def variableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.VariableDeclarationContext,0)


        def multiVariableDeclaration(self):
            return self.getTypedRuleContext(KotlinParser.MultiVariableDeclarationContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_forExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForExpression" ):
                listener.enterForExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForExpression" ):
                listener.exitForExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForExpression" ):
                return visitor.visitForExpression(self)
            else:
                return visitor.visitChildren(self)




    def forExpression(self):

        localctx = KotlinParser.ForExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_forExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2301
            self.match(KotlinParser.FOR)
            self.state = 2305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2302
                self.match(KotlinParser.NL)
                self.state = 2307
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2308
            self.match(KotlinParser.LPAREN)
            self.state = 2312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.AT or _la==KotlinParser.FILE or ((((_la - 93)) & ~0x3f) == 0 and ((1 << (_la - 93)) & ((1 << (KotlinParser.FIELD - 93)) | (1 << (KotlinParser.PROPERTY - 93)) | (1 << (KotlinParser.GET - 93)) | (1 << (KotlinParser.SET - 93)) | (1 << (KotlinParser.RECEIVER - 93)) | (1 << (KotlinParser.PARAM - 93)) | (1 << (KotlinParser.SETPARAM - 93)) | (1 << (KotlinParser.DELEGATE - 93)) | (1 << (KotlinParser.LabelReference - 93)))) != 0):
                self.state = 2309
                self.annotations()
                self.state = 2314
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2317
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier]:
                self.state = 2315
                self.variableDeclaration()
                pass
            elif token in [KotlinParser.LPAREN]:
                self.state = 2316
                self.multiVariableDeclaration()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2319
            self.match(KotlinParser.IN)
            self.state = 2320
            self.expression()
            self.state = 2321
            self.match(KotlinParser.RPAREN)
            self.state = 2325
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,349,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2322
                    self.match(KotlinParser.NL) 
                self.state = 2327
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,349,self._ctx)

            self.state = 2329
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,350,self._ctx)
            if la_ == 1:
                self.state = 2328
                self.controlStructureBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(KotlinParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_whileExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileExpression" ):
                listener.enterWhileExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileExpression" ):
                listener.exitWhileExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileExpression" ):
                return visitor.visitWhileExpression(self)
            else:
                return visitor.visitChildren(self)




    def whileExpression(self):

        localctx = KotlinParser.WhileExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_whileExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2331
            self.match(KotlinParser.WHILE)
            self.state = 2335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2332
                self.match(KotlinParser.NL)
                self.state = 2337
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2338
            self.match(KotlinParser.LPAREN)
            self.state = 2339
            self.expression()
            self.state = 2340
            self.match(KotlinParser.RPAREN)
            self.state = 2344
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,352,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2341
                    self.match(KotlinParser.NL) 
                self.state = 2346
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,352,self._ctx)

            self.state = 2348
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,353,self._ctx)
            if la_ == 1:
                self.state = 2347
                self.controlStructureBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoWhileExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(KotlinParser.DO, 0)

        def WHILE(self):
            return self.getToken(KotlinParser.WHILE, 0)

        def LPAREN(self):
            return self.getToken(KotlinParser.LPAREN, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def RPAREN(self):
            return self.getToken(KotlinParser.RPAREN, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def controlStructureBody(self):
            return self.getTypedRuleContext(KotlinParser.ControlStructureBodyContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_doWhileExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoWhileExpression" ):
                listener.enterDoWhileExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoWhileExpression" ):
                listener.exitDoWhileExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDoWhileExpression" ):
                return visitor.visitDoWhileExpression(self)
            else:
                return visitor.visitChildren(self)




    def doWhileExpression(self):

        localctx = KotlinParser.DoWhileExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_doWhileExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2350
            self.match(KotlinParser.DO)
            self.state = 2354
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,354,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2351
                    self.match(KotlinParser.NL) 
                self.state = 2356
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,354,self._ctx)

            self.state = 2358
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
            if la_ == 1:
                self.state = 2357
                self.controlStructureBody()


            self.state = 2363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2360
                self.match(KotlinParser.NL)
                self.state = 2365
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2366
            self.match(KotlinParser.WHILE)
            self.state = 2370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2367
                self.match(KotlinParser.NL)
                self.state = 2372
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2373
            self.match(KotlinParser.LPAREN)
            self.state = 2374
            self.expression()
            self.state = 2375
            self.match(KotlinParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def THROW(self):
            return self.getToken(KotlinParser.THROW, 0)

        def expression(self):
            return self.getTypedRuleContext(KotlinParser.ExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def RETURN(self):
            return self.getToken(KotlinParser.RETURN, 0)

        def RETURN_AT(self):
            return self.getToken(KotlinParser.RETURN_AT, 0)

        def CONTINUE(self):
            return self.getToken(KotlinParser.CONTINUE, 0)

        def CONTINUE_AT(self):
            return self.getToken(KotlinParser.CONTINUE_AT, 0)

        def BREAK(self):
            return self.getToken(KotlinParser.BREAK, 0)

        def BREAK_AT(self):
            return self.getToken(KotlinParser.BREAK_AT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_jumpExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpExpression" ):
                listener.enterJumpExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpExpression" ):
                listener.exitJumpExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpExpression" ):
                return visitor.visitJumpExpression(self)
            else:
                return visitor.visitChildren(self)




    def jumpExpression(self):

        localctx = KotlinParser.JumpExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_jumpExpression)
        self._la = 0 # Token type
        try:
            self.state = 2393
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.THROW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2377
                self.match(KotlinParser.THROW)
                self.state = 2381
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,358,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2378
                        self.match(KotlinParser.NL) 
                    self.state = 2383
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,358,self._ctx)

                self.state = 2384
                self.expression()
                pass
            elif token in [KotlinParser.RETURN_AT, KotlinParser.RETURN]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2385
                _la = self._input.LA(1)
                if not(_la==KotlinParser.RETURN_AT or _la==KotlinParser.RETURN):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2387
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,359,self._ctx)
                if la_ == 1:
                    self.state = 2386
                    self.expression()


                pass
            elif token in [KotlinParser.CONTINUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2389
                self.match(KotlinParser.CONTINUE)
                pass
            elif token in [KotlinParser.CONTINUE_AT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2390
                self.match(KotlinParser.CONTINUE_AT)
                pass
            elif token in [KotlinParser.BREAK]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2391
                self.match(KotlinParser.BREAK)
                pass
            elif token in [KotlinParser.BREAK_AT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2392
                self.match(KotlinParser.BREAK_AT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallableReferenceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLONCOLON(self):
            return self.getToken(KotlinParser.COLONCOLON, 0)

        def Q_COLONCOLON(self):
            return self.getToken(KotlinParser.Q_COLONCOLON, 0)

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def CLASS(self):
            return self.getToken(KotlinParser.CLASS, 0)

        def userType(self):
            return self.getTypedRuleContext(KotlinParser.UserTypeContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def QUEST(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.QUEST)
            else:
                return self.getToken(KotlinParser.QUEST, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_callableReference

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallableReference" ):
                listener.enterCallableReference(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallableReference" ):
                listener.exitCallableReference(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCallableReference" ):
                return visitor.visitCallableReference(self)
            else:
                return visitor.visitChildren(self)




    def callableReference(self):

        localctx = KotlinParser.CallableReferenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_callableReference)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0):
                self.state = 2395
                self.userType()
                self.state = 2405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.QUEST:
                    self.state = 2396
                    self.match(KotlinParser.QUEST)
                    self.state = 2400
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,361,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 2397
                            self.match(KotlinParser.NL) 
                        self.state = 2402
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,361,self._ctx)

                    self.state = 2407
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2410
                self.match(KotlinParser.NL)
                self.state = 2415
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2416
            _la = self._input.LA(1)
            if not(_la==KotlinParser.COLONCOLON or _la==KotlinParser.Q_COLONCOLON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==KotlinParser.NL:
                self.state = 2417
                self.match(KotlinParser.NL)
                self.state = 2422
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2425
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.IMPORT, KotlinParser.CONSTRUCTOR, KotlinParser.BY, KotlinParser.COMPANION, KotlinParser.INIT, KotlinParser.WHERE, KotlinParser.CATCH, KotlinParser.FINALLY, KotlinParser.OUT, KotlinParser.GETTER, KotlinParser.SETTER, KotlinParser.DYNAMIC, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED, KotlinParser.Identifier]:
                self.state = 2423
                self.identifier()
                pass
            elif token in [KotlinParser.CLASS]:
                self.state = 2424
                self.match(KotlinParser.CLASS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSIGNMENT(self):
            return self.getToken(KotlinParser.ASSIGNMENT, 0)

        def ADD_ASSIGNMENT(self):
            return self.getToken(KotlinParser.ADD_ASSIGNMENT, 0)

        def SUB_ASSIGNMENT(self):
            return self.getToken(KotlinParser.SUB_ASSIGNMENT, 0)

        def MULT_ASSIGNMENT(self):
            return self.getToken(KotlinParser.MULT_ASSIGNMENT, 0)

        def DIV_ASSIGNMENT(self):
            return self.getToken(KotlinParser.DIV_ASSIGNMENT, 0)

        def MOD_ASSIGNMENT(self):
            return self.getToken(KotlinParser.MOD_ASSIGNMENT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_assignmentOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentOperator" ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentOperator" ):
                listener.exitAssignmentOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentOperator" ):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentOperator(self):

        localctx = KotlinParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2427
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.ASSIGNMENT) | (1 << KotlinParser.ADD_ASSIGNMENT) | (1 << KotlinParser.SUB_ASSIGNMENT) | (1 << KotlinParser.MULT_ASSIGNMENT) | (1 << KotlinParser.DIV_ASSIGNMENT) | (1 << KotlinParser.MOD_ASSIGNMENT))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EqualityOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCL_EQ(self):
            return self.getToken(KotlinParser.EXCL_EQ, 0)

        def EXCL_EQEQ(self):
            return self.getToken(KotlinParser.EXCL_EQEQ, 0)

        def EQEQ(self):
            return self.getToken(KotlinParser.EQEQ, 0)

        def EQEQEQ(self):
            return self.getToken(KotlinParser.EQEQEQ, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_equalityOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityOperation" ):
                listener.enterEqualityOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityOperation" ):
                listener.exitEqualityOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityOperation" ):
                return visitor.visitEqualityOperation(self)
            else:
                return visitor.visitChildren(self)




    def equalityOperation(self):

        localctx = KotlinParser.EqualityOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_equalityOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2429
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.EXCL_EQ) | (1 << KotlinParser.EXCL_EQEQ) | (1 << KotlinParser.EQEQ) | (1 << KotlinParser.EQEQEQ))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LANGLE(self):
            return self.getToken(KotlinParser.LANGLE, 0)

        def RANGLE(self):
            return self.getToken(KotlinParser.RANGLE, 0)

        def LE(self):
            return self.getToken(KotlinParser.LE, 0)

        def GE(self):
            return self.getToken(KotlinParser.GE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = KotlinParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2431
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.LANGLE) | (1 << KotlinParser.RANGLE) | (1 << KotlinParser.LE) | (1 << KotlinParser.GE))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(KotlinParser.IN, 0)

        def NOT_IN(self):
            return self.getToken(KotlinParser.NOT_IN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_inOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInOperator" ):
                listener.enterInOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInOperator" ):
                listener.exitInOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInOperator" ):
                return visitor.visitInOperator(self)
            else:
                return visitor.visitChildren(self)




    def inOperator(self):

        localctx = KotlinParser.InOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_inOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2433
            _la = self._input.LA(1)
            if not(_la==KotlinParser.IN or _la==KotlinParser.NOT_IN):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IsOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IS(self):
            return self.getToken(KotlinParser.IS, 0)

        def NOT_IS(self):
            return self.getToken(KotlinParser.NOT_IS, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_isOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsOperator" ):
                listener.enterIsOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsOperator" ):
                listener.exitIsOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIsOperator" ):
                return visitor.visitIsOperator(self)
            else:
                return visitor.visitChildren(self)




    def isOperator(self):

        localctx = KotlinParser.IsOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_isOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2435
            _la = self._input.LA(1)
            if not(_la==KotlinParser.IS or _la==KotlinParser.NOT_IS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdditiveOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ADD(self):
            return self.getToken(KotlinParser.ADD, 0)

        def SUB(self):
            return self.getToken(KotlinParser.SUB, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_additiveOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveOperator" ):
                listener.enterAdditiveOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveOperator" ):
                listener.exitAdditiveOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveOperator" ):
                return visitor.visitAdditiveOperator(self)
            else:
                return visitor.visitChildren(self)




    def additiveOperator(self):

        localctx = KotlinParser.AdditiveOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_additiveOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2437
            _la = self._input.LA(1)
            if not(_la==KotlinParser.ADD or _la==KotlinParser.SUB):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultiplicativeOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MULT(self):
            return self.getToken(KotlinParser.MULT, 0)

        def DIV(self):
            return self.getToken(KotlinParser.DIV, 0)

        def MOD(self):
            return self.getToken(KotlinParser.MOD, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_multiplicativeOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeOperation" ):
                listener.enterMultiplicativeOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeOperation" ):
                listener.exitMultiplicativeOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeOperation" ):
                return visitor.visitMultiplicativeOperation(self)
            else:
                return visitor.visitChildren(self)




    def multiplicativeOperation(self):

        localctx = KotlinParser.MultiplicativeOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_multiplicativeOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2439
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << KotlinParser.MULT) | (1 << KotlinParser.MOD) | (1 << KotlinParser.DIV))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AS(self):
            return self.getToken(KotlinParser.AS, 0)

        def AS_SAFE(self):
            return self.getToken(KotlinParser.AS_SAFE, 0)

        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeOperation" ):
                listener.enterTypeOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeOperation" ):
                listener.exitTypeOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeOperation" ):
                return visitor.visitTypeOperation(self)
            else:
                return visitor.visitChildren(self)




    def typeOperation(self):

        localctx = KotlinParser.TypeOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_typeOperation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2441
            _la = self._input.LA(1)
            if not(((((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & ((1 << (KotlinParser.COLON - 25)) | (1 << (KotlinParser.AS_SAFE - 25)) | (1 << (KotlinParser.AS - 25)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrefixUnaryOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(KotlinParser.INCR, 0)

        def DECR(self):
            return self.getToken(KotlinParser.DECR, 0)

        def ADD(self):
            return self.getToken(KotlinParser.ADD, 0)

        def SUB(self):
            return self.getToken(KotlinParser.SUB, 0)

        def EXCL(self):
            return self.getToken(KotlinParser.EXCL, 0)

        def annotations(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationsContext,0)


        def labelDefinition(self):
            return self.getTypedRuleContext(KotlinParser.LabelDefinitionContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_prefixUnaryOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrefixUnaryOperation" ):
                listener.enterPrefixUnaryOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrefixUnaryOperation" ):
                listener.exitPrefixUnaryOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrefixUnaryOperation" ):
                return visitor.visitPrefixUnaryOperation(self)
            else:
                return visitor.visitChildren(self)




    def prefixUnaryOperation(self):

        localctx = KotlinParser.PrefixUnaryOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_prefixUnaryOperation)
        try:
            self.state = 2450
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.INCR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2443
                self.match(KotlinParser.INCR)
                pass
            elif token in [KotlinParser.DECR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2444
                self.match(KotlinParser.DECR)
                pass
            elif token in [KotlinParser.ADD]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2445
                self.match(KotlinParser.ADD)
                pass
            elif token in [KotlinParser.SUB]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2446
                self.match(KotlinParser.SUB)
                pass
            elif token in [KotlinParser.EXCL]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2447
                self.match(KotlinParser.EXCL)
                pass
            elif token in [KotlinParser.AT, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.LabelReference]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2448
                self.annotations()
                pass
            elif token in [KotlinParser.LabelDefinition]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2449
                self.labelDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixUnaryOperationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INCR(self):
            return self.getToken(KotlinParser.INCR, 0)

        def DECR(self):
            return self.getToken(KotlinParser.DECR, 0)

        def EXCL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.EXCL)
            else:
                return self.getToken(KotlinParser.EXCL, i)

        def callSuffix(self):
            return self.getTypedRuleContext(KotlinParser.CallSuffixContext,0)


        def arrayAccess(self):
            return self.getTypedRuleContext(KotlinParser.ArrayAccessContext,0)


        def memberAccessOperator(self):
            return self.getTypedRuleContext(KotlinParser.MemberAccessOperatorContext,0)


        def postfixUnaryExpression(self):
            return self.getTypedRuleContext(KotlinParser.PostfixUnaryExpressionContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_postfixUnaryOperation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixUnaryOperation" ):
                listener.enterPostfixUnaryOperation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixUnaryOperation" ):
                listener.exitPostfixUnaryOperation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixUnaryOperation" ):
                return visitor.visitPostfixUnaryOperation(self)
            else:
                return visitor.visitChildren(self)




    def postfixUnaryOperation(self):

        localctx = KotlinParser.PostfixUnaryOperationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_postfixUnaryOperation)
        self._la = 0 # Token type
        try:
            self.state = 2467
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2452
                self.match(KotlinParser.INCR)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2453
                self.match(KotlinParser.DECR)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2454
                self.match(KotlinParser.EXCL)
                self.state = 2455
                self.match(KotlinParser.EXCL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2456
                self.callSuffix()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2457
                self.arrayAccess()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2458
                    self.match(KotlinParser.NL)
                    self.state = 2463
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2464
                self.memberAccessOperator()
                self.state = 2465
                self.postfixUnaryExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberAccessOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(KotlinParser.DOT, 0)

        def QUEST(self):
            return self.getToken(KotlinParser.QUEST, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_memberAccessOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberAccessOperator" ):
                listener.enterMemberAccessOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberAccessOperator" ):
                listener.exitMemberAccessOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberAccessOperator" ):
                return visitor.visitMemberAccessOperator(self)
            else:
                return visitor.visitChildren(self)




    def memberAccessOperator(self):

        localctx = KotlinParser.MemberAccessOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_memberAccessOperator)
        try:
            self.state = 2472
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.DOT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2469
                self.match(KotlinParser.DOT)
                pass
            elif token in [KotlinParser.QUEST]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2470
                self.match(KotlinParser.QUEST)
                self.state = 2471
                self.match(KotlinParser.DOT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotations(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.AnnotationsContext)
            else:
                return self.getTypedRuleContext(KotlinParser.AnnotationsContext,i)


        def modifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.ModifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.ModifierContext,i)


        def getRuleIndex(self):
            return KotlinParser.RULE_modifierList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifierList" ):
                listener.enterModifierList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifierList" ):
                listener.exitModifierList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifierList" ):
                return visitor.visitModifierList(self)
            else:
                return visitor.visitChildren(self)




    def modifierList(self):

        localctx = KotlinParser.ModifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_modifierList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2476 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 2476
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [KotlinParser.AT, KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE, KotlinParser.LabelReference]:
                        self.state = 2474
                        self.annotations()
                        pass
                    elif token in [KotlinParser.IN, KotlinParser.OUT, KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL, KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER, KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND, KotlinParser.OVERRIDE, KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN, KotlinParser.CONST, KotlinParser.LATEINIT, KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE, KotlinParser.REIFIED]:
                        self.state = 2475
                        self.modifier()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 2478 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,372,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classModifier(self):
            return self.getTypedRuleContext(KotlinParser.ClassModifierContext,0)


        def memberModifier(self):
            return self.getTypedRuleContext(KotlinParser.MemberModifierContext,0)


        def visibilityModifier(self):
            return self.getTypedRuleContext(KotlinParser.VisibilityModifierContext,0)


        def varianceAnnotation(self):
            return self.getTypedRuleContext(KotlinParser.VarianceAnnotationContext,0)


        def functionModifier(self):
            return self.getTypedRuleContext(KotlinParser.FunctionModifierContext,0)


        def propertyModifier(self):
            return self.getTypedRuleContext(KotlinParser.PropertyModifierContext,0)


        def inheritanceModifier(self):
            return self.getTypedRuleContext(KotlinParser.InheritanceModifierContext,0)


        def parameterModifier(self):
            return self.getTypedRuleContext(KotlinParser.ParameterModifierContext,0)


        def typeParameterModifier(self):
            return self.getTypedRuleContext(KotlinParser.TypeParameterModifierContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_modifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModifier" ):
                listener.enterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModifier" ):
                listener.exitModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitModifier" ):
                return visitor.visitModifier(self)
            else:
                return visitor.visitChildren(self)




    def modifier(self):

        localctx = KotlinParser.ModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_modifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2489
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.ENUM, KotlinParser.SEALED, KotlinParser.ANNOTATION, KotlinParser.DATA, KotlinParser.INNER]:
                self.state = 2480
                self.classModifier()
                pass
            elif token in [KotlinParser.OVERRIDE, KotlinParser.LATEINIT]:
                self.state = 2481
                self.memberModifier()
                pass
            elif token in [KotlinParser.PUBLIC, KotlinParser.PRIVATE, KotlinParser.PROTECTED, KotlinParser.INTERNAL]:
                self.state = 2482
                self.visibilityModifier()
                pass
            elif token in [KotlinParser.IN, KotlinParser.OUT]:
                self.state = 2483
                self.varianceAnnotation()
                pass
            elif token in [KotlinParser.TAILREC, KotlinParser.OPERATOR, KotlinParser.INLINE, KotlinParser.INFIX, KotlinParser.EXTERNAL, KotlinParser.SUSPEND]:
                self.state = 2484
                self.functionModifier()
                pass
            elif token in [KotlinParser.CONST]:
                self.state = 2485
                self.propertyModifier()
                pass
            elif token in [KotlinParser.ABSTRACT, KotlinParser.FINAL, KotlinParser.OPEN]:
                self.state = 2486
                self.inheritanceModifier()
                pass
            elif token in [KotlinParser.VARARG, KotlinParser.NOINLINE, KotlinParser.CROSSINLINE]:
                self.state = 2487
                self.parameterModifier()
                pass
            elif token in [KotlinParser.REIFIED]:
                self.state = 2488
                self.typeParameterModifier()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 2494
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,374,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2491
                    self.match(KotlinParser.NL) 
                self.state = 2496
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,374,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENUM(self):
            return self.getToken(KotlinParser.ENUM, 0)

        def SEALED(self):
            return self.getToken(KotlinParser.SEALED, 0)

        def ANNOTATION(self):
            return self.getToken(KotlinParser.ANNOTATION, 0)

        def DATA(self):
            return self.getToken(KotlinParser.DATA, 0)

        def INNER(self):
            return self.getToken(KotlinParser.INNER, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_classModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassModifier" ):
                listener.enterClassModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassModifier" ):
                listener.exitClassModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassModifier" ):
                return visitor.visitClassModifier(self)
            else:
                return visitor.visitChildren(self)




    def classModifier(self):

        localctx = KotlinParser.ClassModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_classModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2497
            _la = self._input.LA(1)
            if not(((((_la - 108)) & ~0x3f) == 0 and ((1 << (_la - 108)) & ((1 << (KotlinParser.ENUM - 108)) | (1 << (KotlinParser.SEALED - 108)) | (1 << (KotlinParser.ANNOTATION - 108)) | (1 << (KotlinParser.DATA - 108)) | (1 << (KotlinParser.INNER - 108)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVERRIDE(self):
            return self.getToken(KotlinParser.OVERRIDE, 0)

        def LATEINIT(self):
            return self.getToken(KotlinParser.LATEINIT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_memberModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberModifier" ):
                listener.enterMemberModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberModifier" ):
                listener.exitMemberModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberModifier" ):
                return visitor.visitMemberModifier(self)
            else:
                return visitor.visitChildren(self)




    def memberModifier(self):

        localctx = KotlinParser.MemberModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_memberModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2499
            _la = self._input.LA(1)
            if not(_la==KotlinParser.OVERRIDE or _la==KotlinParser.LATEINIT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VisibilityModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PUBLIC(self):
            return self.getToken(KotlinParser.PUBLIC, 0)

        def PRIVATE(self):
            return self.getToken(KotlinParser.PRIVATE, 0)

        def INTERNAL(self):
            return self.getToken(KotlinParser.INTERNAL, 0)

        def PROTECTED(self):
            return self.getToken(KotlinParser.PROTECTED, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_visibilityModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibilityModifier" ):
                listener.enterVisibilityModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibilityModifier" ):
                listener.exitVisibilityModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVisibilityModifier" ):
                return visitor.visitVisibilityModifier(self)
            else:
                return visitor.visitChildren(self)




    def visibilityModifier(self):

        localctx = KotlinParser.VisibilityModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_visibilityModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2501
            _la = self._input.LA(1)
            if not(((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (KotlinParser.PUBLIC - 104)) | (1 << (KotlinParser.PRIVATE - 104)) | (1 << (KotlinParser.PROTECTED - 104)) | (1 << (KotlinParser.INTERNAL - 104)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarianceAnnotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IN(self):
            return self.getToken(KotlinParser.IN, 0)

        def OUT(self):
            return self.getToken(KotlinParser.OUT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_varianceAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarianceAnnotation" ):
                listener.enterVarianceAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarianceAnnotation" ):
                listener.exitVarianceAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarianceAnnotation" ):
                return visitor.visitVarianceAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def varianceAnnotation(self):

        localctx = KotlinParser.VarianceAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_varianceAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2503
            _la = self._input.LA(1)
            if not(_la==KotlinParser.IN or _la==KotlinParser.OUT):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TAILREC(self):
            return self.getToken(KotlinParser.TAILREC, 0)

        def OPERATOR(self):
            return self.getToken(KotlinParser.OPERATOR, 0)

        def INFIX(self):
            return self.getToken(KotlinParser.INFIX, 0)

        def INLINE(self):
            return self.getToken(KotlinParser.INLINE, 0)

        def EXTERNAL(self):
            return self.getToken(KotlinParser.EXTERNAL, 0)

        def SUSPEND(self):
            return self.getToken(KotlinParser.SUSPEND, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_functionModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionModifier" ):
                listener.enterFunctionModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionModifier" ):
                listener.exitFunctionModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionModifier" ):
                return visitor.visitFunctionModifier(self)
            else:
                return visitor.visitChildren(self)




    def functionModifier(self):

        localctx = KotlinParser.FunctionModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_functionModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2505
            _la = self._input.LA(1)
            if not(((((_la - 113)) & ~0x3f) == 0 and ((1 << (_la - 113)) & ((1 << (KotlinParser.TAILREC - 113)) | (1 << (KotlinParser.OPERATOR - 113)) | (1 << (KotlinParser.INLINE - 113)) | (1 << (KotlinParser.INFIX - 113)) | (1 << (KotlinParser.EXTERNAL - 113)) | (1 << (KotlinParser.SUSPEND - 113)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONST(self):
            return self.getToken(KotlinParser.CONST, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_propertyModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyModifier" ):
                listener.enterPropertyModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyModifier" ):
                listener.exitPropertyModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyModifier" ):
                return visitor.visitPropertyModifier(self)
            else:
                return visitor.visitChildren(self)




    def propertyModifier(self):

        localctx = KotlinParser.PropertyModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_propertyModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2507
            self.match(KotlinParser.CONST)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InheritanceModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABSTRACT(self):
            return self.getToken(KotlinParser.ABSTRACT, 0)

        def FINAL(self):
            return self.getToken(KotlinParser.FINAL, 0)

        def OPEN(self):
            return self.getToken(KotlinParser.OPEN, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_inheritanceModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInheritanceModifier" ):
                listener.enterInheritanceModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInheritanceModifier" ):
                listener.exitInheritanceModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInheritanceModifier" ):
                return visitor.visitInheritanceModifier(self)
            else:
                return visitor.visitChildren(self)




    def inheritanceModifier(self):

        localctx = KotlinParser.InheritanceModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_inheritanceModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2509
            _la = self._input.LA(1)
            if not(((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & ((1 << (KotlinParser.ABSTRACT - 120)) | (1 << (KotlinParser.FINAL - 120)) | (1 << (KotlinParser.OPEN - 120)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def VARARG(self):
            return self.getToken(KotlinParser.VARARG, 0)

        def NOINLINE(self):
            return self.getToken(KotlinParser.NOINLINE, 0)

        def CROSSINLINE(self):
            return self.getToken(KotlinParser.CROSSINLINE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_parameterModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterModifier" ):
                listener.enterParameterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterModifier" ):
                listener.exitParameterModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterModifier" ):
                return visitor.visitParameterModifier(self)
            else:
                return visitor.visitChildren(self)




    def parameterModifier(self):

        localctx = KotlinParser.ParameterModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_parameterModifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2511
            _la = self._input.LA(1)
            if not(((((_la - 125)) & ~0x3f) == 0 and ((1 << (_la - 125)) & ((1 << (KotlinParser.VARARG - 125)) | (1 << (KotlinParser.NOINLINE - 125)) | (1 << (KotlinParser.CROSSINLINE - 125)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeParameterModifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REIFIED(self):
            return self.getToken(KotlinParser.REIFIED, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_typeParameterModifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeParameterModifier" ):
                listener.enterTypeParameterModifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeParameterModifier" ):
                listener.exitTypeParameterModifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeParameterModifier" ):
                return visitor.visitTypeParameterModifier(self)
            else:
                return visitor.visitChildren(self)




    def typeParameterModifier(self):

        localctx = KotlinParser.TypeParameterModifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_typeParameterModifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2513
            self.match(KotlinParser.REIFIED)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabelDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LabelDefinition(self):
            return self.getToken(KotlinParser.LabelDefinition, 0)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_labelDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabelDefinition" ):
                listener.enterLabelDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabelDefinition" ):
                listener.exitLabelDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabelDefinition" ):
                return visitor.visitLabelDefinition(self)
            else:
                return visitor.visitChildren(self)




    def labelDefinition(self):

        localctx = KotlinParser.LabelDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_labelDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2515
            self.match(KotlinParser.LabelDefinition)
            self.state = 2519
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,375,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2516
                    self.match(KotlinParser.NL) 
                self.state = 2521
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,375,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotation(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationContext,0)


        def annotationList(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationListContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotations

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotations" ):
                listener.enterAnnotations(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotations" ):
                listener.exitAnnotations(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotations" ):
                return visitor.visitAnnotations(self)
            else:
                return visitor.visitChildren(self)




    def annotations(self):

        localctx = KotlinParser.AnnotationsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_annotations)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2524
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,376,self._ctx)
            if la_ == 1:
                self.state = 2522
                self.annotation()
                pass

            elif la_ == 2:
                self.state = 2523
                self.annotationList()
                pass


            self.state = 2529
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,377,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2526
                    self.match(KotlinParser.NL) 
                self.state = 2531
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,377,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationUseSiteTarget(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationUseSiteTargetContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def unescapedAnnotation(self):
            return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,0)


        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def LabelReference(self):
            return self.getToken(KotlinParser.LabelReference, 0)

        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotation" ):
                listener.enterAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotation" ):
                listener.exitAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotation" ):
                return visitor.visitAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def annotation(self):

        localctx = KotlinParser.AnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_annotation)
        self._la = 0 # Token type
        try:
            self.state = 2567
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2532
                self.annotationUseSiteTarget()
                self.state = 2536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2533
                    self.match(KotlinParser.NL)
                    self.state = 2538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2539
                self.match(KotlinParser.COLON)
                self.state = 2543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2540
                    self.match(KotlinParser.NL)
                    self.state = 2545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2546
                self.unescapedAnnotation()
                pass
            elif token in [KotlinParser.LabelReference]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2548
                self.match(KotlinParser.LabelReference)
                self.state = 2556
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
                if la_ == 1:
                    self.state = 2552
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2549
                        self.match(KotlinParser.NL)
                        self.state = 2554
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2555
                    self.typeArguments()


                self.state = 2565
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,383,self._ctx)
                if la_ == 1:
                    self.state = 2561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2558
                        self.match(KotlinParser.NL)
                        self.state = 2563
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2564
                    self.valueArguments()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationListContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def annotationUseSiteTarget(self):
            return self.getTypedRuleContext(KotlinParser.AnnotationUseSiteTargetContext,0)


        def COLON(self):
            return self.getToken(KotlinParser.COLON, 0)

        def LSQUARE(self):
            return self.getToken(KotlinParser.LSQUARE, 0)

        def RSQUARE(self):
            return self.getToken(KotlinParser.RSQUARE, 0)

        def unescapedAnnotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.UnescapedAnnotationContext)
            else:
                return self.getTypedRuleContext(KotlinParser.UnescapedAnnotationContext,i)


        def AT(self):
            return self.getToken(KotlinParser.AT, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotationList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationList" ):
                listener.enterAnnotationList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationList" ):
                listener.exitAnnotationList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationList" ):
                return visitor.visitAnnotationList(self)
            else:
                return visitor.visitChildren(self)




    def annotationList(self):

        localctx = KotlinParser.AnnotationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_annotationList)
        self._la = 0 # Token type
        try:
            self.state = 2588
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [KotlinParser.FILE, KotlinParser.FIELD, KotlinParser.PROPERTY, KotlinParser.GET, KotlinParser.SET, KotlinParser.RECEIVER, KotlinParser.PARAM, KotlinParser.SETPARAM, KotlinParser.DELEGATE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2569
                self.annotationUseSiteTarget()
                self.state = 2570
                self.match(KotlinParser.COLON)
                self.state = 2571
                self.match(KotlinParser.LSQUARE)
                self.state = 2573 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2572
                    self.unescapedAnnotation()
                    self.state = 2575 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0)):
                        break

                self.state = 2577
                self.match(KotlinParser.RSQUARE)
                pass
            elif token in [KotlinParser.AT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2579
                self.match(KotlinParser.AT)
                self.state = 2580
                self.match(KotlinParser.LSQUARE)
                self.state = 2582 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2581
                    self.unescapedAnnotation()
                    self.state = 2584 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0)):
                        break

                self.state = 2586
                self.match(KotlinParser.RSQUARE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnnotationUseSiteTargetContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FIELD(self):
            return self.getToken(KotlinParser.FIELD, 0)

        def FILE(self):
            return self.getToken(KotlinParser.FILE, 0)

        def PROPERTY(self):
            return self.getToken(KotlinParser.PROPERTY, 0)

        def GET(self):
            return self.getToken(KotlinParser.GET, 0)

        def SET(self):
            return self.getToken(KotlinParser.SET, 0)

        def RECEIVER(self):
            return self.getToken(KotlinParser.RECEIVER, 0)

        def PARAM(self):
            return self.getToken(KotlinParser.PARAM, 0)

        def SETPARAM(self):
            return self.getToken(KotlinParser.SETPARAM, 0)

        def DELEGATE(self):
            return self.getToken(KotlinParser.DELEGATE, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_annotationUseSiteTarget

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnnotationUseSiteTarget" ):
                listener.enterAnnotationUseSiteTarget(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnnotationUseSiteTarget" ):
                listener.exitAnnotationUseSiteTarget(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnnotationUseSiteTarget" ):
                return visitor.visitAnnotationUseSiteTarget(self)
            else:
                return visitor.visitChildren(self)




    def annotationUseSiteTarget(self):

        localctx = KotlinParser.AnnotationUseSiteTargetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_annotationUseSiteTarget)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2590
            _la = self._input.LA(1)
            if not(((((_la - 56)) & ~0x3f) == 0 and ((1 << (_la - 56)) & ((1 << (KotlinParser.FILE - 56)) | (1 << (KotlinParser.FIELD - 56)) | (1 << (KotlinParser.PROPERTY - 56)) | (1 << (KotlinParser.GET - 56)) | (1 << (KotlinParser.SET - 56)) | (1 << (KotlinParser.RECEIVER - 56)) | (1 << (KotlinParser.PARAM - 56)) | (1 << (KotlinParser.SETPARAM - 56)) | (1 << (KotlinParser.DELEGATE - 56)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnescapedAnnotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def identifier(self):
            return self.getTypedRuleContext(KotlinParser.IdentifierContext,0)


        def typeArguments(self):
            return self.getTypedRuleContext(KotlinParser.TypeArgumentsContext,0)


        def valueArguments(self):
            return self.getTypedRuleContext(KotlinParser.ValueArgumentsContext,0)


        def getRuleIndex(self):
            return KotlinParser.RULE_unescapedAnnotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnescapedAnnotation" ):
                listener.enterUnescapedAnnotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnescapedAnnotation" ):
                listener.exitUnescapedAnnotation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnescapedAnnotation" ):
                return visitor.visitUnescapedAnnotation(self)
            else:
                return visitor.visitChildren(self)




    def unescapedAnnotation(self):

        localctx = KotlinParser.UnescapedAnnotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_unescapedAnnotation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2592
            self.identifier()
            self.state = 2594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==KotlinParser.LANGLE:
                self.state = 2593
                self.typeArguments()


            self.state = 2597
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,389,self._ctx)
            if la_ == 1:
                self.state = 2596
                self.valueArguments()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleIdentifier(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(KotlinParser.SimpleIdentifierContext)
            else:
                return self.getTypedRuleContext(KotlinParser.SimpleIdentifierContext,i)


        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.DOT)
            else:
                return self.getToken(KotlinParser.DOT, i)

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def getRuleIndex(self):
            return KotlinParser.RULE_identifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifier" ):
                listener.enterIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifier" ):
                listener.exitIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifier" ):
                return visitor.visitIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def identifier(self):

        localctx = KotlinParser.IdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_identifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2599
            self.simpleIdentifier()
            self.state = 2610
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,391,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2603
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==KotlinParser.NL:
                        self.state = 2600
                        self.match(KotlinParser.NL)
                        self.state = 2605
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2606
                    self.match(KotlinParser.DOT)
                    self.state = 2607
                    self.simpleIdentifier() 
                self.state = 2612
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,391,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdentifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(KotlinParser.Identifier, 0)

        def ABSTRACT(self):
            return self.getToken(KotlinParser.ABSTRACT, 0)

        def ANNOTATION(self):
            return self.getToken(KotlinParser.ANNOTATION, 0)

        def BY(self):
            return self.getToken(KotlinParser.BY, 0)

        def CATCH(self):
            return self.getToken(KotlinParser.CATCH, 0)

        def COMPANION(self):
            return self.getToken(KotlinParser.COMPANION, 0)

        def CONSTRUCTOR(self):
            return self.getToken(KotlinParser.CONSTRUCTOR, 0)

        def CROSSINLINE(self):
            return self.getToken(KotlinParser.CROSSINLINE, 0)

        def DATA(self):
            return self.getToken(KotlinParser.DATA, 0)

        def DYNAMIC(self):
            return self.getToken(KotlinParser.DYNAMIC, 0)

        def ENUM(self):
            return self.getToken(KotlinParser.ENUM, 0)

        def EXTERNAL(self):
            return self.getToken(KotlinParser.EXTERNAL, 0)

        def FINAL(self):
            return self.getToken(KotlinParser.FINAL, 0)

        def FINALLY(self):
            return self.getToken(KotlinParser.FINALLY, 0)

        def GETTER(self):
            return self.getToken(KotlinParser.GETTER, 0)

        def IMPORT(self):
            return self.getToken(KotlinParser.IMPORT, 0)

        def INFIX(self):
            return self.getToken(KotlinParser.INFIX, 0)

        def INIT(self):
            return self.getToken(KotlinParser.INIT, 0)

        def INLINE(self):
            return self.getToken(KotlinParser.INLINE, 0)

        def INNER(self):
            return self.getToken(KotlinParser.INNER, 0)

        def INTERNAL(self):
            return self.getToken(KotlinParser.INTERNAL, 0)

        def LATEINIT(self):
            return self.getToken(KotlinParser.LATEINIT, 0)

        def NOINLINE(self):
            return self.getToken(KotlinParser.NOINLINE, 0)

        def OPEN(self):
            return self.getToken(KotlinParser.OPEN, 0)

        def OPERATOR(self):
            return self.getToken(KotlinParser.OPERATOR, 0)

        def OUT(self):
            return self.getToken(KotlinParser.OUT, 0)

        def OVERRIDE(self):
            return self.getToken(KotlinParser.OVERRIDE, 0)

        def PRIVATE(self):
            return self.getToken(KotlinParser.PRIVATE, 0)

        def PROTECTED(self):
            return self.getToken(KotlinParser.PROTECTED, 0)

        def PUBLIC(self):
            return self.getToken(KotlinParser.PUBLIC, 0)

        def REIFIED(self):
            return self.getToken(KotlinParser.REIFIED, 0)

        def SEALED(self):
            return self.getToken(KotlinParser.SEALED, 0)

        def TAILREC(self):
            return self.getToken(KotlinParser.TAILREC, 0)

        def SETTER(self):
            return self.getToken(KotlinParser.SETTER, 0)

        def VARARG(self):
            return self.getToken(KotlinParser.VARARG, 0)

        def WHERE(self):
            return self.getToken(KotlinParser.WHERE, 0)

        def CONST(self):
            return self.getToken(KotlinParser.CONST, 0)

        def SUSPEND(self):
            return self.getToken(KotlinParser.SUSPEND, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_simpleIdentifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIdentifier" ):
                listener.enterSimpleIdentifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIdentifier" ):
                listener.exitSimpleIdentifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleIdentifier" ):
                return visitor.visitSimpleIdentifier(self)
            else:
                return visitor.visitChildren(self)




    def simpleIdentifier(self):

        localctx = KotlinParser.SimpleIdentifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_simpleIdentifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2613
            _la = self._input.LA(1)
            if not(((((_la - 58)) & ~0x3f) == 0 and ((1 << (_la - 58)) & ((1 << (KotlinParser.IMPORT - 58)) | (1 << (KotlinParser.CONSTRUCTOR - 58)) | (1 << (KotlinParser.BY - 58)) | (1 << (KotlinParser.COMPANION - 58)) | (1 << (KotlinParser.INIT - 58)) | (1 << (KotlinParser.WHERE - 58)) | (1 << (KotlinParser.CATCH - 58)) | (1 << (KotlinParser.FINALLY - 58)) | (1 << (KotlinParser.OUT - 58)) | (1 << (KotlinParser.GETTER - 58)) | (1 << (KotlinParser.SETTER - 58)) | (1 << (KotlinParser.DYNAMIC - 58)) | (1 << (KotlinParser.PUBLIC - 58)) | (1 << (KotlinParser.PRIVATE - 58)) | (1 << (KotlinParser.PROTECTED - 58)) | (1 << (KotlinParser.INTERNAL - 58)) | (1 << (KotlinParser.ENUM - 58)) | (1 << (KotlinParser.SEALED - 58)) | (1 << (KotlinParser.ANNOTATION - 58)) | (1 << (KotlinParser.DATA - 58)) | (1 << (KotlinParser.INNER - 58)) | (1 << (KotlinParser.TAILREC - 58)) | (1 << (KotlinParser.OPERATOR - 58)) | (1 << (KotlinParser.INLINE - 58)) | (1 << (KotlinParser.INFIX - 58)) | (1 << (KotlinParser.EXTERNAL - 58)) | (1 << (KotlinParser.SUSPEND - 58)) | (1 << (KotlinParser.OVERRIDE - 58)) | (1 << (KotlinParser.ABSTRACT - 58)) | (1 << (KotlinParser.FINAL - 58)))) != 0) or ((((_la - 122)) & ~0x3f) == 0 and ((1 << (_la - 122)) & ((1 << (KotlinParser.OPEN - 122)) | (1 << (KotlinParser.CONST - 122)) | (1 << (KotlinParser.LATEINIT - 122)) | (1 << (KotlinParser.VARARG - 122)) | (1 << (KotlinParser.NOINLINE - 122)) | (1 << (KotlinParser.CROSSINLINE - 122)) | (1 << (KotlinParser.REIFIED - 122)) | (1 << (KotlinParser.Identifier - 122)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SemiContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self, i:int=None):
            if i is None:
                return self.getTokens(KotlinParser.NL)
            else:
                return self.getToken(KotlinParser.NL, i)

        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_semi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSemi" ):
                listener.enterSemi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSemi" ):
                listener.exitSemi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSemi" ):
                return visitor.visitSemi(self)
            else:
                return visitor.visitChildren(self)




    def semi(self):

        localctx = KotlinParser.SemiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_semi)
        self._la = 0 # Token type
        try:
            self.state = 2633
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,395,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2616 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2615
                        self.match(KotlinParser.NL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 2618 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,392,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==KotlinParser.NL:
                    self.state = 2620
                    self.match(KotlinParser.NL)
                    self.state = 2625
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2626
                self.match(KotlinParser.SEMICOLON)
                self.state = 2630
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,394,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2627
                        self.match(KotlinParser.NL) 
                    self.state = 2632
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,394,self._ctx)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnysemiContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NL(self):
            return self.getToken(KotlinParser.NL, 0)

        def SEMICOLON(self):
            return self.getToken(KotlinParser.SEMICOLON, 0)

        def getRuleIndex(self):
            return KotlinParser.RULE_anysemi

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnysemi" ):
                listener.enterAnysemi(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnysemi" ):
                listener.exitAnysemi(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAnysemi" ):
                return visitor.visitAnysemi(self)
            else:
                return visitor.visitChildren(self)




    def anysemi(self):

        localctx = KotlinParser.AnysemiContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_anysemi)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2635
            _la = self._input.LA(1)
            if not(_la==KotlinParser.NL or _la==KotlinParser.SEMICOLON):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





